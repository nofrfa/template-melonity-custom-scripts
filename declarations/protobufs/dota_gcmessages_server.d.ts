import { CMatchAdditionalUnitInventory, CMatchHeroSelectEvent, CMatchPlayerAbilityUpgrade, CMatchPlayerPermanentBuff, CMatchPlayerTimedStats, CMatchTeamTimedStats, CMsgClientToGCRerollPlayerChallenge, CMsgDOTAFantasyPlayerStats, CMsgDOTAMatch, CMsgDOTARealtimeGameStatsTerse, CMsgStickerHeroes, CProtoItemHeroStatue, DOTA_TournamentEvents } from "./dota_gcmessages_common";
import { CLobbyTimedRewardDetails, CSODOTALobbyMember } from "./dota_gcmessages_common_lobby";
import { CMsgLeaverState, CMvpData } from "./dota_gcmessages_common_match_management";
import { CMsgDOTACombatLogEntry, DOTA_GameState, DOTA_GC_TEAM, DOTABotDifficulty, DOTALeaverStatus_t, EEvent, EPlayerChallengeHistoryType } from "./dota_shared_enums";
import { CMsgEconPlayerStrangeCountAdjustment } from "./econ_gcmessages";
import { CExtraMsgBlock } from "./gcsdk_gcmessages";
import { ENetworkDisconnectionReason } from "./network_connection";
import { CMsgSteamLearnHMACKeys } from "./steammessages_steamlearn.steamworkssdk";
export declare const protobufPackage = "";
export declare enum EPoorNetworkConditionsType {
    k_EPoorNetworkConditions_None = 0,
    k_EPoorNetworkConditions_Unknown = 1,
    k_EPoorNetworkConditions_MassDisconnect = 2,
    k_EPoorNetworkConditions_ExcessBadQosIntervals = 3,
    UNRECOGNIZED = -1
}
export declare function ePoorNetworkConditionsTypeFromJSON(object: any): EPoorNetworkConditionsType;
export declare function ePoorNetworkConditionsTypeToJSON(object: EPoorNetworkConditionsType): string;
export interface CMsgPoorNetworkConditions {
    detection_type: EPoorNetworkConditionsType;
    players: CMsgPoorNetworkConditions_Player[];
}
export interface CMsgPoorNetworkConditions_Player {
    account_id: number;
    disconnect_reason: ENetworkDisconnectionReason;
    num_bad_intervals: number;
    peak_loss_pct: number;
}
export interface CMsgGameserverCrash {
    match_id: string;
    lobby_id: string;
    game_state: DOTA_GameState;
    sentinel_save_time: number;
    custom_game_id: string;
    tournament_id: number;
    server_steam_id: string;
    server_public_ip_addr: number;
    server_port: number;
    server_cluster: number;
    pid: number;
    engine: number;
}
export interface CMsgConnectedPlayers {
    connected_players: CMsgConnectedPlayers_Player[];
    disconnected_players: CMsgConnectedPlayers_Player[];
    game_state: DOTA_GameState;
    first_blood_happened: boolean;
    poor_network_conditions: CMsgPoorNetworkConditions | undefined;
    send_reason: CMsgConnectedPlayers_SendReason;
    radiant_kills: number;
    dire_kills: number;
    radiant_lead: number;
    building_state: number;
}
export declare enum CMsgConnectedPlayers_SendReason {
    INVALID = 0,
    HEARTBEAT = 1,
    GAME_STATE = 2,
    FIRST_BLOOD = 3,
    PLAYER_CONNECTED = 4,
    PLAYER_HERO = 5,
    PLAYER_DISCONNECTED_CONSEQUENCES = 6,
    PLAYER_DISCONNECTED_NOCONSEQUENCES = 7,
    GAMESTATE_TIMEOUT = 10,
    MASS_DISCONNECT = 11,
    KILLS = 13,
    BUILDING_STATE = 14,
    UNRECOGNIZED = -1
}
export declare function cMsgConnectedPlayers_SendReasonFromJSON(object: any): CMsgConnectedPlayers_SendReason;
export declare function cMsgConnectedPlayers_SendReasonToJSON(object: CMsgConnectedPlayers_SendReason): string;
export interface CMsgConnectedPlayers_Player {
    steam_id: string;
    hero_id: number;
    leaver_state: CMsgLeaverState | undefined;
    disconnect_reason: ENetworkDisconnectionReason;
}
export interface CMsgGameServerInfo {
    server_public_ip_addr: number;
    server_private_ip_addr: number;
    server_port: number;
    server_tv_port: number;
    assigned_server_tv_port: number;
    legacy_server_steamdatagram_address: string;
    server_key: string;
    server_hibernation: boolean;
    server_type: CMsgGameServerInfo_ServerType;
    server_region: number;
    server_loadavg: number;
    server_tv_broadcast_time: number;
    server_game_time: number;
    server_relay_connected_steam_id: string;
    relay_slots_max: number;
    relays_connected: number;
    relay_clients_connected: number;
    relayed_game_server_steam_id: string;
    parent_relay_count: number;
    tv_secret_code: string;
    server_version: number;
    server_cluster: number;
    allow_custom_games: CMsgGameServerInfo_CustomGames;
    build_version: number;
    tf_server_count: number;
    srcds_instance: number;
    dev_force_server_type: boolean;
    is_recording_match_training_data: boolean;
}
export declare enum CMsgGameServerInfo_ServerType {
    UNSPECIFIED = 0,
    GAME = 1,
    PROXY = 2,
    TENSORFLOW = 3,
    DOTA_ONLY = 4,
    CUSTOM_GAME_ONLY = 5,
    EVENT_GAME_ONLY = 6,
    UNRECOGNIZED = -1
}
export declare function cMsgGameServerInfo_ServerTypeFromJSON(object: any): CMsgGameServerInfo_ServerType;
export declare function cMsgGameServerInfo_ServerTypeToJSON(object: CMsgGameServerInfo_ServerType): string;
export declare enum CMsgGameServerInfo_CustomGames {
    BOTH = 0,
    NONE = 1,
    ONLY = 2,
    EVENT = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgGameServerInfo_CustomGamesFromJSON(object: any): CMsgGameServerInfo_CustomGames;
export declare function cMsgGameServerInfo_CustomGamesToJSON(object: CMsgGameServerInfo_CustomGames): string;
export interface CMsgLeaverDetected {
    steam_id: string;
    leaver_status: DOTALeaverStatus_t;
    leaver_state: CMsgLeaverState | undefined;
    server_cluster: number;
    disconnect_reason: ENetworkDisconnectionReason;
    poor_network_conditions: CMsgPoorNetworkConditions | undefined;
}
export interface CMsgLeaverDetectedResponse {
    result: number;
}
export interface CMsgDOTAFantasyFinalPlayerStats {
    stats: CMsgDOTAFantasyPlayerStats[];
}
export interface CMsgDOTAFantasyLivePlayerStats {
    stats: CMsgDOTAFantasyPlayerStats[];
}
export interface CMsgServerToGCRealtimeStats {
    delayed: CMsgDOTARealtimeGameStatsTerse | undefined;
}
export interface CMsgGCToServerRealtimeStatsStartStop {
    delayed: boolean;
}
export interface CMsgGCToServerUpdateSteamBroadcasting {
    active: boolean;
}
export interface CMsgSignOutGameplayStats {
    teams: CMsgSignOutGameplayStats_CTeam[];
}
export interface CMsgSignOutGameplayStats_CPlayer {
    steam_id: string;
    player_slot: number;
    hero_id: number;
    timed_player_stats: CMatchPlayerTimedStats[];
}
export interface CMsgSignOutGameplayStats_CTeam {
    is_winning_team: boolean;
    is_radiant_team: boolean;
    timed_team_stats: CMatchTeamTimedStats[];
    players: CMsgSignOutGameplayStats_CPlayer[];
}
export interface CMsgGameMatchSignOut {
    match_id: string;
    duration: number;
    good_guys_win: boolean;
    date: number;
    num_players: number[];
    teams: CMsgGameMatchSignOut_CTeam[];
    tower_status: number[];
    barracks_status: number[];
    cluster: number;
    server_addr: string;
    first_blood_time: number;
    event_score: number;
    picks_bans: CMatchHeroSelectEvent[];
    fantasy_stats: CMsgDOTAFantasyPlayerStats[];
    player_strange_count_adjustments: CMsgEconPlayerStrangeCountAdjustment[];
    automatic_surrender: boolean;
    server_version: number;
    poor_network_conditions: CMsgPoorNetworkConditions | undefined;
    additional_msgs: CMsgGameMatchSignOut_CAdditionalSignoutMsg[];
    social_feed_events: CMsgGameMatchSignOut_CSocialFeedMatchEvent[];
    average_networth_delta: number;
    custom_game_data: CMsgGameMatchSignOut_CCustomGameData | undefined;
    match_flags: number;
    team_scores: number[];
    pre_game_duration: number;
    event_game_leaderboard_entries: CMsgGameMatchSignOut_EventGameLeaderboardEntry[];
    ward_placements: CMsgGameMatchSignOut_WardPlacement[];
    gameplay_stats: CMsgSignOutGameplayStats | undefined;
    extra_messages: CExtraMsgBlock[];
    training_data_recorded: boolean;
    winning_team: DOTA_GC_TEAM;
    normalized_win_probability_diff: number;
}
export interface CMsgGameMatchSignOut_CTeam {
    players: CMsgGameMatchSignOut_CTeam_CPlayer[];
}
export interface CMsgGameMatchSignOut_CTeam_CPlayer {
    steam_id: string;
    hero_id: number;
    items: number[];
    item_purchase_times: number[];
    gold: number;
    kills: number;
    deaths: number;
    assists: number;
    leaver_status: number;
    last_hits: number;
    denies: number;
    gold_per_min: number;
    xp_per_minute: number;
    gold_spent: number;
    level: number;
    scaled_hero_damage: number;
    scaled_tower_damage: number;
    scaled_hero_healing: number;
    time_last_seen: number;
    support_ability_value: number;
    party_id: string;
    claimed_farm_gold: number;
    support_gold: number;
    claimed_denies: number;
    claimed_misses: number;
    misses: number;
    net_worth: number;
    hero_damage: number;
    tower_damage: number;
    hero_healing: number;
    ability_upgrades: CMatchPlayerAbilityUpgrade[];
    additional_units_inventory: CMatchAdditionalUnitInventory[];
    permanent_buffs: CMatchPlayerPermanentBuff[];
    custom_game_data: CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData | undefined;
    match_player_flags: number;
    talent_ability_ids: number[];
    hero_pick_order: number;
    hero_was_randomed: boolean;
    hero_was_dota_plus_suggestion: boolean;
    lane: number;
    is_using_plus_guide: boolean;
    hero_damage_received: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived[];
    hero_damage_dealt: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived[];
    seconds_dead: number;
    gold_lost_to_death: number;
    command_count: number;
    mouse_click_cast_command_count: number;
    teleports_used: number;
    cavern_crawl_preferred_map_variant: number;
    bounty_runes: number;
    outposts_captured: number;
    dewards: number;
    wards_placed: number;
    camps_stacked: number;
    player_slot: number;
    predicted_position: number;
    lane_outcomes: number;
    friendly_t1_destroyed_time: number;
    enemy_t1_destroyed_time: number;
    friendly_roshan_kills: number;
    enemy_roshan_kills: number;
    power_runes: number;
    water_runes: number;
    stun_duration: number;
    team_number: DOTA_GC_TEAM;
    team_slot: number;
    time_purchased_shard: number;
    time_purchased_aghs: number;
    ability_draft_abilities: number[];
}
export declare enum CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType {
    HERO_DAMAGE_PHYSICAL = 0,
    HERO_DAMAGE_MAGICAL = 1,
    HERO_DAMAGE_PURE = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageTypeFromJSON(object: any): CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
export declare function cMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageTypeToJSON(object: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType): string;
export interface CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData {
    dota_team: number;
    winner: boolean;
}
export interface CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived {
    pre_reduction: number;
    post_reduction: number;
    damage_type: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
}
export interface CMsgGameMatchSignOut_CAdditionalSignoutMsg {
    id: number;
    contents: string;
}
export interface CMsgGameMatchSignOut_CSocialFeedMatchEvent {
    account_id: number;
    timestamp: number;
    event_type: number;
    game_time: number;
    replay_time: number;
}
export interface CMsgGameMatchSignOut_CCustomGameData {
    publish_timestamp: number;
}
export interface CMsgGameMatchSignOut_EventGameLeaderboardEntry {
    name_suffix: string;
    score: number;
    extra_data_1: number;
    extra_data_2: number;
    extra_data_3: number;
    extra_data_4: number;
    extra_data_5: number;
}
export interface CMsgGameMatchSignOut_WardPlacement {
    player_id: number;
    team_id: number;
    placed_time: number;
    building_state: number;
    creep_state: number;
    roshan_alive: boolean;
    position_x: number;
    position_y: number;
}
export interface CMsgSignOutDraftInfo {
    radiant_captain_account_id: number;
    dire_captain_account_id: number;
    picks_bans: CMatchHeroSelectEvent[];
}
export interface CMsgSignOutBotInfo {
    allow_cheats: boolean;
    bot_difficulty_radiant: DOTABotDifficulty;
    created_lobby: boolean;
    bot_difficulty_dire: DOTABotDifficulty;
}
export interface CMsgSignOutTextMuteInfo {
    text_mute_messages: CMsgSignOutTextMuteInfo_TextMuteMessage[];
}
export interface CMsgSignOutTextMuteInfo_TextMuteMessage {
    region: number;
    caused_text_mute: boolean;
    chat_message: string;
}
export interface CMsgSignOutPlayerStats {
    account_id: number;
    match_id: string;
    rank: number;
    hero_id: number;
    rampages: number;
    triple_kills: number;
    first_blood_claimed: number;
    first_blood_given: number;
    couriers_killed: number;
    aegises_snatched: number;
    cheeses_eaten: number;
    creeps_stacked: number;
    fight_score: number;
    farm_score: number;
    support_score: number;
    push_score: number;
    kills: number;
    deaths: number;
    assists: number;
    last_hits: number;
    denies: number;
    gpm: number;
    xppm: number;
    net_worth: number;
    damage: number;
    heals: number;
    rapiers_purchased: number;
    observer_wards_placed: number;
    wards_destroyed: number;
    lobby_type: number;
}
export interface CMsgSignOutCommunicationSummary {
    players: CMsgSignOutCommunicationSummary_PlayerCommunication[];
}
export interface CMsgSignOutCommunicationSummary_PlayerCommunication {
    account_id: number;
    pings: number;
    max_pings_per_interval: number;
    teammate_pings: number;
    max_teammate_pings_per_interval: number;
    team_chat_messages: number;
    all_chat_messages: number;
    chat_wheel_messages: number;
    pauses: number;
    unpauses: number;
    lines_drawn: number;
    voice_chat_seconds: number;
    chat_mutes: number;
    voice_mutes: number;
    ping_details: CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail[];
    comms_blocks_solo: number;
    comms_blocks_mass: number;
}
export interface CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail {
    type: number;
    count: number;
}
export interface CMsgGameMatchSignoutResponse {
    match_id: string;
    replay_salt: number;
    timed_reward_details: CLobbyTimedRewardDetails[];
    xp_reward_details: CSODOTALobbyMember[];
    leagueid: number;
    metadata_private_key: number;
    match_details: CMsgDOTAMatch | undefined;
    players_metadata: CMsgGameMatchSignoutResponse_PlayerMetadata[];
    mvp_data: CMvpData | undefined;
    ow_private_key: string;
    ow_salt: number;
    ow_replay_id: string;
}
export interface CMsgGameMatchSignoutResponse_PlayerMetadata {
    hero_id: number;
    avg_kills_x16: number;
    avg_deaths_x16: number;
    avg_assists_x16: number;
    avg_gpm_x16: number;
    avg_xpm_x16: number;
    best_kills_x16: number;
    best_assists_x16: number;
    best_gpm_x16: number;
    best_xpm_x16: number;
    win_streak: number;
    best_win_streak: number;
    games_played: number;
}
export interface CMsgTimedRewardContainer {
    timed_reward_details: CLobbyTimedRewardDetails[];
}
export interface CMsgGameMatchSignOutPermissionRequest {
    server_version: number;
    local_attempt: number;
    total_attempt: number;
    seconds_waited: number;
}
export interface CMsgGameMatchSignOutPermissionResponse {
    permission_granted: boolean;
    abandon_signout: boolean;
    retry_delay_seconds: number;
}
export interface CMsgGameMatchSignOutEventGameData {
    event_id: EEvent;
    game_name: string;
    map_name: string;
    event_game_data: string;
    start_time: number;
}
export interface CMsgGameMatchSignOutPerfData {
    average_frame_time: number[];
    max_frame_time: number[];
    server_average_frame_time: number;
    server_max_frame_time: number;
    average_compute_time: number[];
    max_compute_time: number[];
    average_client_tick_time: number[];
    max_client_tick_time: number[];
    average_client_simulate_time: number[];
    max_client_simulate_time: number[];
    average_output_time: number[];
    max_output_time: number[];
    average_wait_for_rendering_to_complete_time: number[];
    max_wait_for_rendering_to_complete_time: number[];
    average_swap_time: number[];
    max_swap_time: number[];
    average_frame_update_time: number[];
    max_frame_update_time: number[];
    average_idle_time: number[];
    max_idle_time: number[];
    average_input_processing_time: number[];
    max_input_processing_time: number[];
}
export interface CMsgGameMatchSignOutBanData {
    hero_bans: number[];
    hero_ban_votes: number[];
}
export interface CMsgDOTALiveScoreboardUpdate {
    tournament_id: number;
    tournament_game_id: number;
    duration: number;
    hltv_delay: number;
    team_good: CMsgDOTALiveScoreboardUpdate_Team | undefined;
    team_bad: CMsgDOTALiveScoreboardUpdate_Team | undefined;
    roshan_respawn_timer: number;
    league_id: number;
    match_id: string;
}
export interface CMsgDOTALiveScoreboardUpdate_Team {
    players: CMsgDOTALiveScoreboardUpdate_Team_Player[];
    score: number;
    tower_state: number;
    barracks_state: number;
    hero_picks: number[];
    hero_bans: number[];
}
export interface CMsgDOTALiveScoreboardUpdate_Team_Player {
    player_slot: number;
    player_name: string;
    hero_name: string;
    hero_id: number;
    kills: number;
    deaths: number;
    assists: number;
    last_hits: number;
    denies: number;
    gold: number;
    level: number;
    gold_per_min: number;
    xp_per_min: number;
    ultimate_state: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
    ultimate_cooldown: number;
    item0: number;
    item1: number;
    item2: number;
    item3: number;
    item4: number;
    item5: number;
    respawn_timer: number;
    account_id: number;
    position_x: number;
    position_y: number;
    net_worth: number;
    abilities: CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility[];
}
export declare enum CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState {
    k_EDOTAUltimateStateNotLearned = 0,
    k_EDOTAUltimateStateCooldown = 1,
    k_EDOTAUltimateStateNeedsMana = 2,
    k_EDOTAUltimateStateReady = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStateFromJSON(object: any): CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
export declare function cMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateStateToJSON(object: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState): string;
export interface CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility {
    ability_id: number;
    ability_level: number;
}
export interface CMsgServerToGCRequestBatchPlayerResources {
    account_ids: number[];
    rank_types: number[];
}
export interface CMsgServerToGCRequestBatchPlayerResourcesResponse {
    results: CMsgServerToGCRequestBatchPlayerResourcesResponse_Result[];
}
export interface CMsgServerToGCRequestBatchPlayerResourcesResponse_Result {
    account_id: number;
    prevent_text_chat: boolean;
    prevent_voice_chat: boolean;
    rank: number;
    rank_calibrated: boolean;
    low_priority: boolean;
    is_new_player: boolean;
    is_guide_player: boolean;
}
export interface CMsgDOTAPlayerFailedToConnect {
    failed_loaders: string[];
    abandoned_loaders: string[];
}
export interface CMsgGCToRelayConnect {
    source_tv_public_addr: number;
    source_tv_private_addr: number;
    source_tv_port: number;
    game_server_steam_id: string;
    parent_count: number;
    tv_unique_secret_code: string;
    source_tv_steamid: string;
}
export interface CMsgGCGCToLANServerRelayConnect {
    relay_steamid: string;
}
export interface CMsgGCBanStatusRequest {
    account_id: number;
}
export interface CMsgGCBanStatusResponse {
    result: number;
    low_priority: boolean;
    text_chat_banned: boolean;
    voice_chat_banned: boolean;
}
export interface CMsgTournamentItemEvent {
    killer_account_id: number;
    victim_account_id: number;
    event_type: DOTA_TournamentEvents;
    tv_delay: number;
    dota_time: number;
    replay_time: number;
    loot_list: string;
    event_team: number;
    multi_kill_count: number;
    winner_score: number;
    loser_score: number;
    hero_statues: CProtoItemHeroStatue[];
}
export interface CMsgTournamentItemEventResponse {
    event_type: DOTA_TournamentEvents;
    viewers_granted: number;
}
export interface CMsgTeamFanfare {
    match_id: string;
}
export interface CMsgResponseTeamFanfare {
    fanfare_goodguys: number;
    fanfare_badguys: number;
}
export interface CMsgGameServerUploadSaveGame {
    game_time: number;
    save_game_data: string;
    lobby_id: string;
    player_steam_ids: string[];
}
export interface CMsgGameServerSaveGameResult {
    result: CMsgGameServerSaveGameResult_Result;
}
export declare enum CMsgGameServerSaveGameResult_Result {
    SaveSuccessful = 0,
    SessionNotFound = 1,
    DatabaseError = 2,
    TooBig = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgGameServerSaveGameResult_ResultFromJSON(object: any): CMsgGameServerSaveGameResult_Result;
export declare function cMsgGameServerSaveGameResult_ResultToJSON(object: CMsgGameServerSaveGameResult_Result): string;
export interface CMsgGameServerGetLoadGame {
    save_id: number;
}
export interface CMsgGameServerGetLoadGameResult {
    save_game_data: string;
}
export interface CMsgDOTAAwardEventPoints {
    award_points: CMsgDOTAAwardEventPoints_AwardPoints[];
    match_id: string;
    event_id: EEvent;
    timestamp: number;
    audit_action: number;
}
export interface CMsgDOTAAwardEventPoints_AwardPoints {
    account_id: number;
    points: number;
    premium_points: number;
    trade_ban_time: number;
    eligible_for_periodic_adjustment: boolean;
    point_cap_periodic_resource_id: number;
}
export interface CMsgGCToServerPingRequest {
    request_id: string;
    request_time: string;
}
export interface CMsgGCToServerPingResponse {
    request_id: string;
    request_time: string;
    cluster: number;
}
export interface CMsgServerToGCMatchConnectionStats {
    match_id: string;
    region_id: number;
    league_id: number;
    players: CMsgServerToGCMatchConnectionStats_Player[];
    cluster_id: number;
}
export interface CMsgServerToGCMatchConnectionStats_Player {
    account_id: number;
    ip: number;
    avg_ping_ms: number;
    packet_loss: number;
    ping_deviation: number;
    full_resends: number;
}
export interface CMsgServerGCUpdateSpectatorCount {
    spectator_count: number;
}
export interface CSerializedCombatLog {
    version: number;
    dictionary: CSerializedCombatLog_Dictionary | undefined;
    entries: CMsgDOTACombatLogEntry[];
}
export interface CSerializedCombatLog_Dictionary {
    strings: CSerializedCombatLog_Dictionary_DictString[];
}
export interface CSerializedCombatLog_Dictionary_DictString {
    id: number;
    value: string;
}
export interface CMsgServerToGCVictoryPredictions {
    records: CMsgServerToGCVictoryPredictions_Record[];
}
export interface CMsgServerToGCVictoryPredictions_Record {
    account_id: number;
    item_id: string;
    item_ids: string[];
}
export interface CMsgServerToGCRequestStatus {
}
export interface CMsgServerToGCRequestStatus_Response {
    response: number;
}
export interface CMsgSignOutAssassinMiniGameInfo {
    winning_players: string[];
    losing_players: string[];
    arcana_owners: string[];
    assassin_won: boolean;
    target_hero_id: number;
    contract_completed: boolean;
    contract_complete_time: number;
    pa_is_radiant: boolean;
}
export interface CMsgServerToGCKillSummaries {
    ingameevent_id: number;
    summaries: CMsgServerToGCKillSummaries_KillSummary[];
}
export interface CMsgServerToGCKillSummaries_KillSummary {
    killer_hero_id: number;
    victim_hero_id: number;
    kill_count: number;
}
export interface CMsgGCToServerPredictionResult {
    account_id: number;
    match_id: string;
    correct: boolean;
    predictions: CMsgGCToServerPredictionResult_Prediction[];
}
export interface CMsgGCToServerPredictionResult_Prediction {
    item_def: number;
    num_correct: number;
    num_fails: number;
    result: CMsgGCToServerPredictionResult_Prediction_EResult;
    granted_item_defs: number[];
}
export declare enum CMsgGCToServerPredictionResult_Prediction_EResult {
    k_eResult_ItemGranted = 1,
    k_eResult_Destroyed = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToServerPredictionResult_Prediction_EResultFromJSON(object: any): CMsgGCToServerPredictionResult_Prediction_EResult;
export declare function cMsgGCToServerPredictionResult_Prediction_EResultToJSON(object: CMsgGCToServerPredictionResult_Prediction_EResult): string;
export interface CMsgServerToGCLockCharmTrading {
    account_id: number;
    item_id: string;
}
export interface CMsgSignOutUpdatePlayerChallenge {
    account_id: number;
    completed: CMsgSignOutUpdatePlayerChallenge_Challenge[];
    rerolled: CMsgSignOutUpdatePlayerChallenge_Challenge[];
    match_id: string;
    hero_id: number;
}
export interface CMsgSignOutUpdatePlayerChallenge_Challenge {
    event_id: EEvent;
    slot_id: number;
    sequence_id: number;
    progress: number;
    challenge_rank: number;
}
export interface CMsgServerToGCRerollPlayerChallenge {
    account_id: number;
    reroll_msg: CMsgClientToGCRerollPlayerChallenge | undefined;
}
export interface CMsgSpendWager {
    players: CMsgSpendWager_Player[];
    event_id: EEvent;
    timestamp: number;
    match_id: string;
    server_steam_id: string;
}
export interface CMsgSpendWager_Player {
    account_id: number;
    wager: number;
    wager_token_item_id: string;
}
export interface CMsgSignOutXPCoins {
    players: CMsgSignOutXPCoins_Player[];
    event_id: EEvent;
    match_id: string;
    timestamp: number;
}
export interface CMsgSignOutXPCoins_Player {
    account_id: number;
    xp_gained: number;
    coins_spent: number;
    wager_token_item_id: string;
    rank_wager: number;
    wager_streak: number;
}
export interface CMsgSignOutBounties {
    bounties: CMsgSignOutBounties_Bounty[];
    event_id: EEvent;
    match_id: string;
    timestamp: number;
}
export interface CMsgSignOutBounties_Bounty {
    issuer_account_id: number;
    completer_account_id: number;
    target_account_id: number;
}
export interface CMsgSignOutCommunityGoalProgress {
    event_id: EEvent;
    event_increments: CMsgSignOutCommunityGoalProgress_EventGoalIncrement[];
}
export interface CMsgSignOutCommunityGoalProgress_EventGoalIncrement {
    event_goal_id: number;
    increment_amount: number;
}
export interface CMsgServerToGCCloseCompendiumInGamePredictionVoting {
    match_id: string;
    hltv_delay: number;
    league_id: number;
}
export interface CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse {
    result: boolean;
}
export interface CMsgServerToGCCompendiumInGamePredictionResults {
    match_id: string;
    results: CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult[];
    league_id: number;
    league_node_id: number;
}
export interface CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult {
    prediction_id: number;
    prediction_value: number;
    prediction_value_is_mask: boolean;
}
export interface CMsgServerToGCCompendiumChosenInGamePredictions {
    match_id: string;
    predictions_chosen: CMsgServerToGCCompendiumChosenInGamePredictions_Prediction[];
    league_id: number;
}
export interface CMsgServerToGCCompendiumChosenInGamePredictions_Prediction {
    prediction_id: number;
}
export interface CMsgGCToGCCompendiumInGamePredictionResults {
    results: CMsgServerToGCCompendiumInGamePredictionResults | undefined;
}
export interface CMsgServerToGCMatchPlayerItemPurchaseHistory {
    match_id: string;
    mmr: number;
    players: CMsgServerToGCMatchPlayerItemPurchaseHistory_Player[];
}
export interface CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase {
    item: number;
    gold: number;
    net_worth: number;
    game_time: number;
    inventory_items: number[];
    talents_skilled: boolean[];
}
export interface CMsgServerToGCMatchPlayerItemPurchaseHistory_Player {
    player_slot: number;
    account_id: number;
    hero_id: number;
    allied_hero_ids: number[];
    enemy_hero_ids: number[];
    item_purchases: CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase[];
    lane: number;
    is_winner: boolean;
}
export interface CMsgServerToGCMatchPlayerNeutralItemEquipHistory {
    match_id: string;
    players: CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player[];
}
export interface CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip {
    item: number;
    game_time: number;
    inventory_items: number[];
    talents_skilled: boolean[];
    available_neutral_items: number[];
}
export interface CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player {
    account_id: number;
    allied_hero_ids: number[];
    enemy_hero_ids: number[];
    item_equips: CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip[];
    is_winner: boolean;
}
export interface CMsgServerToGCMatchStateHistory {
    match_id: string;
    radiant_won: boolean;
    mmr: number;
    match_states: CMsgServerToGCMatchStateHistory_MatchState[];
}
export interface CMsgServerToGCMatchStateHistory_PlayerState {
    hero_id: number;
    net_worth: number;
    level: number;
    deaths: number;
    respawn_time: number;
    has_buyback: boolean;
    has_aegis: boolean;
    has_rapier: boolean;
    distance: number;
}
export interface CMsgServerToGCMatchStateHistory_TeamState {
    team: number;
    player_states: CMsgServerToGCMatchStateHistory_PlayerState[];
    tower_health_pct: number[];
    barracks_health_pct: number[];
    ancient_health_pct: number;
    glyph_cooldown: number;
    kills: number;
    creep_distance_safe: number;
    creep_distance_mid: number;
    creep_distance_off: number;
}
export interface CMsgServerToGCMatchStateHistory_MatchState {
    game_time: number;
    radiant_state: CMsgServerToGCMatchStateHistory_TeamState | undefined;
    dire_state: CMsgServerToGCMatchStateHistory_TeamState | undefined;
}
export interface CMsgMatchStateSteamMLEntry {
    match_state: CMsgServerToGCMatchStateHistory_MatchState | undefined;
    mmr: number;
    radiant_won: boolean;
}
export interface CMsgLaneSelectionSteamMLEntry {
    hero_ids: number[];
    lanes: number[];
}
export interface CMsgAbilitySelectionSteamMLEntry {
    mmr: number;
    hero_id: number;
    enemy_hero_ids: number[];
    lane: number;
    abilities: number[];
    selected_ability: number;
}
export interface CMsgItemPurchasePregameSteamMLEntry {
    mmr: number;
    lane: number;
    balance: number;
    hero_id: number;
    allied_hero_ids: number[];
    enemy_hero_ids: number[];
    items: number[];
}
export interface CMsgItemPurchaseSteamMLEntry {
    mmr: number;
    lane: number;
    hero_id: number;
    allied_hero_ids: number[];
    enemy_hero_ids: number[];
    items: number[];
    items_to_be_purchased: number[];
}
export interface CMsgItemPurchaseSequenceSteamMLEntry {
    mmr: number;
    lane: number;
    hero_id: number;
    allied_hero_ids: number[];
    enemy_hero_ids: number[];
    items: number[];
    item_to_be_purchased: number;
}
export interface CMsgServerToGCCavernCrawlIsHeroActive {
    event_id: number;
    account_id: number;
    preferred_map_variant: number;
    hero_id: number;
    turbo_mode: boolean;
}
export interface CMsgServerToGCPlayerChallengeHistory {
    match_id: string;
    average_rank: number;
    challenge_records: CMsgServerToGCPlayerChallengeHistory_PlayerChallenge[];
}
export interface CMsgServerToGCPlayerChallengeHistory_PlayerChallenge {
    account_id: number;
    challenge_type: EPlayerChallengeHistoryType;
    challenge_id1: number;
    challenge_id2: number;
    progress_value_start: number;
    progress_value_end: number;
    team_won: boolean;
    audit_data: string;
    hero_id: number;
    rank_completed: number;
}
export interface CMsgServerToGCCavernCrawlIsHeroActiveResponse {
    result: boolean;
    map_variant: number;
    potential_winnings: number;
    map_results: CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults[];
    potential_plus_shard_winnings: number;
}
export interface CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults {
    path_id_completed: number;
    room_id_claimed: number;
}
export interface CMsgGCtoServerTensorflowInstance {
    server_instance: number;
}
export interface CMsgDetailedGameStats {
    minutes: CMsgDetailedGameStats_MinuteEntry[];
    player_info: CMsgDetailedGameStats_PlayerInfo[];
    game_stats: CMsgDetailedGameStats_GameStats | undefined;
}
export interface CMsgDetailedGameStats_PlayerStatEntry {
    total_earned_gold: number;
    total_networth: number;
    level: number;
    total_dps: number;
    average_dps: number;
    ability_damage_output: number;
    base_health: number;
    total_health: number;
    total_mana: number;
    base_physical_damage_reduction_pct: number;
    total_physical_damage_reduction_pct: number;
    base_ability_damage_reduction_pct: number;
    total_ability_damage_reduction_pct: number;
    ability_damage_block: number;
    physical_damage_block: number;
    mana_regen: number;
    health_regen: number;
    physical_magic_dmg_pct: number;
    kills: number;
    deaths: number;
    assists: number;
    gold_from_kills: number;
    gold_from_creeps: number;
    gold_shared: number;
    xp_from_kills: number;
    xp_from_creeps: number;
    total_xp: number;
    ability_casts: number;
    item_casts: number;
    total_time_stunned: number;
    item_count: number;
}
export interface CMsgDetailedGameStats_GameStats {
    tower_death_time_t1: number;
    tower_death_time_t2: number;
    tower_death_time_t3: number;
}
export interface CMsgDetailedGameStats_MinuteEntry {
    minute: number;
    stats: CMsgDetailedGameStats_PlayerStatEntry[];
}
export interface CMsgDetailedGameStats_PlayerInfo {
    account_id: number;
    hero_id: number;
    player_slot: number;
}
export interface CMsgNeutralItemStats {
    neutral_items: CMsgNeutralItemStats_NeutralItem[];
}
export interface CMsgNeutralItemStats_NeutralItem {
    item_id: number;
    time_dropped: number;
    team: number;
    time_last_equipped: number;
    time_last_unequipped: number;
    duration_equipped: number;
}
export interface CMsgGCToServerLobbyHeroBanRates {
    ban_data: CMsgGCToServerLobbyHeroBanRates_HeroBanEntry[];
}
export interface CMsgGCToServerLobbyHeroBanRates_HeroBanEntry {
    hero_id: number;
    ban_count: number;
    pick_count: number;
}
export interface CMsgSignOutGuildContractProgress {
    player_contracts: CMsgSignOutGuildContractProgress_PlayerContract[];
}
export interface CMsgSignOutGuildContractProgress_CompletedGuildEventContracts {
    guild_id: number;
    event_id: number;
    contracts: string[];
}
export interface CMsgSignOutGuildContractProgress_PlayerContract {
    account_id: number;
    completed_contracts: CMsgSignOutGuildContractProgress_CompletedGuildEventContracts[];
}
export interface CMsgSignOutGuildChallengeProgress {
    guild_challenges_progresses: CMsgSignOutGuildChallengeProgress_ChallengeProgress[];
}
export interface CMsgSignOutGuildChallengeProgress_ChallengeProgress {
    guild_id: number;
    event_id: number;
    challenge_instance_id: number;
    challenge_instance_timestamp: number;
    challenge_period_serial: number;
    progress: number;
    challenge_parameter: number;
}
export interface CMsgSignOutMVPStats {
    match_id: string;
    game_mode: number;
    winning_team: number;
    game_time: number;
    players: CMsgSignOutMVPStats_Player[];
}
export interface CMsgSignOutMVPStats_Player {
    team_id: number;
    team_networth_rank: number;
    account_id: number;
    player_slot: number;
    rank: number;
    hero_id: number;
    role: number;
    kills: number;
    deaths: number;
    assists: number;
    xp: number;
    net_worth: number;
    support_gold_spent: number;
    wards_placed: number;
    wards_spotted_for_dewarding: number;
    camps_stacked: number;
    last_hits: number;
    denies: number;
    building_damage: number;
    other_damage: number;
    triple_kills: number;
    rampages: number;
    first_blood: number;
    kill_eater_events: CMsgSignOutMVPStats_Player_KillEaterEvent[];
    highest_killstreak: number;
}
export interface CMsgSignOutMVPStats_Player_KillEaterEvent {
    event_type: number;
    amount: number;
}
export interface CMsgGCToServerRecordTrainingData {
    enable: boolean;
}
export interface CMsgServerToGCGetGuildContracts {
    account_ids: number[];
}
export interface CMsgServerToGCGetGuildContractsResponse {
    player_contracts: CMsgServerToGCGetGuildContractsResponse_Player[];
}
export interface CMsgServerToGCGetGuildContractsResponse_ContractDetails {
    contract_id: string;
    challenge_instance_id: number;
    challenge_parameter: number;
    contract_stars: number;
    contract_slot: number;
}
export interface CMsgServerToGCGetGuildContractsResponse_Player {
    account_id: number;
    guild_id: number;
    event_id: EEvent;
    contracts: CMsgServerToGCGetGuildContractsResponse_ContractDetails[];
}
export interface CMsgMatchDiretideCandy {
    player_candy_data: CMsgMatchDiretideCandy_PlayerCandy[];
    event_id: EEvent;
}
export interface CMsgMatchDiretideCandy_CandyDetails {
    amount: number;
    audit: number;
}
export interface CMsgMatchDiretideCandy_PlayerCandy {
    account_id: number;
    candy_amount: number;
    consumes_periodic_resource: boolean;
    candy_breakdown: CMsgMatchDiretideCandy_CandyDetails[];
}
export interface CMsgGCToServerCheerData {
    cheer_types: CMsgGCToServerCheerData_CheerTypeCount[];
}
export interface CMsgGCToServerCheerData_CheerTypeCount {
    cheer_type: number;
    cheer_count: number;
}
export interface CMsgCheerConfig {
    cheers_enabled: boolean;
    is_valid_league_id: boolean;
    window_duration: number;
    window_bucket_count: number;
    crowd_level_push_time: number;
    crowd_level_low: number;
    crowd_level_medium: number;
    crowd_level_high: number;
    cheer_scale_start: number;
    cheer_scale_speed: number;
    cheer_scale_push_mark: number;
    cheer_scale_pull_mark: number;
    cheer_scale_pct_of_max_cps_clamp: number;
    cheer_scale_dampener_value: number;
    cheer_scale_dampener_lerp_time: number;
    cheer_factor_bronze: number;
    cheer_factor_silver: number;
    cheer_factor_gold: number;
}
export interface CMsgGCToServerCheerConfig {
    cheer_config: CMsgCheerConfig | undefined;
}
export interface CMsgServerToGCGetCheerConfig {
    league_id: number;
}
export interface CMsgServerToGCGetCheerConfigResponse {
    cheer_config: CMsgCheerConfig | undefined;
}
export interface CMsgGCToServerCheerScalesOverride {
    scales: number[];
}
export interface CMsgGCToServerGetCheerState {
}
export interface CMsgCheerTypeState {
    cheer_counts: number[];
    max_per_second: number;
    cheer_scale: number;
    override_scale: number;
}
export interface CMsgCheerState {
    cheer_types: CMsgCheerTypeState[];
    radiant_crowd_level: number;
    dire_crowd_level: number;
}
export interface CMsgServerToGCReportCheerState {
    cheer_config: CMsgCheerConfig | undefined;
    cheer_state: CMsgCheerState | undefined;
}
export interface CMsgServerToGCGetStickerHeroes {
    account_ids: number[];
}
export interface CMsgServerToGCGetStickerHeroesResponse {
    players: CMsgServerToGCGetStickerHeroesResponse_Player[];
}
export interface CMsgServerToGCGetStickerHeroesResponse_Player {
    account_id: number;
    stickers: CMsgStickerHeroes | undefined;
}
export interface CMsgGCToServerSetSteamLearnDisable {
}
export interface CMsgGCToServerSetSteamLearnKeysChanged {
    keys: CMsgSteamLearnHMACKeys | undefined;
}
export interface CMsgSteamLearnMatchInfo {
    average_mmr: number;
    radiant_won: boolean;
    duration: number;
    game_mode: number;
    lobby_type: number;
}
export interface CMsgSteamLearnMatchHeroes {
    radiant_hero_ids: number[];
    dire_hero_ids: number[];
    radiant_lanes: number[];
    dire_lanes: number[];
}
export interface CMsgSteamLearnMatchHero {
    hero_id: number;
    lane: number;
    allied_hero_ids: number[];
    enemy_hero_ids: number[];
}
export interface CMsgSteamLearnMatchState {
    game_time: number;
    radiant_state: CMsgSteamLearnMatchState_TeamState | undefined;
    dire_state: CMsgSteamLearnMatchState_TeamState | undefined;
}
export interface CMsgSteamLearnMatchState_PlayerState {
    hero_id: number;
    net_worth: number;
    level: number;
    deaths: number;
    respawn_time: number;
    has_buyback: boolean;
    has_aegis: boolean;
    has_rapier: boolean;
    distance: number;
}
export interface CMsgSteamLearnMatchState_TeamState {
    team: number;
    player_states: CMsgSteamLearnMatchState_PlayerState[];
    tower_health_pct: number[];
    barracks_health_pct: number[];
    ancient_health_pct: number;
    glyph_cooldown: number;
    kills: number;
    creep_distance_safe: number;
    creep_distance_mid: number;
    creep_distance_off: number;
}
export interface CMsgSteamLearnItemPurchase {
    item_id: number;
    inventory_items: number[];
    gold: number;
    net_worth: number;
    is_radiant_team: number;
    game_time: number;
    is_using_dota_plus: boolean;
}
export interface CMsgSteamLearnAbilitySkill {
    ability_id: number;
    skilled_abilities: number[];
    game_time: number;
    is_using_dota_plus: boolean;
}
export interface CMsgSignOutMuertaMinigame {
    event_game_data: string;
}
export declare const CMsgPoorNetworkConditions: {
    fromJSON(object: any): CMsgPoorNetworkConditions;
    toJSON(message: CMsgPoorNetworkConditions): unknown;
    create<I extends {
        detection_type?: EPoorNetworkConditionsType;
        players?: {
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        }[];
    } & {
        detection_type?: EPoorNetworkConditionsType;
        players?: {
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        }[] & ({
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        } & {
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        } & { [K in Exclude<keyof I["players"][number], keyof CMsgPoorNetworkConditions_Player>]: never; })[] & { [K_1 in Exclude<keyof I["players"], keyof {
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgPoorNetworkConditions>]: never; }>(base?: I): CMsgPoorNetworkConditions;
    fromPartial<I_1 extends {
        detection_type?: EPoorNetworkConditionsType;
        players?: {
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        }[];
    } & {
        detection_type?: EPoorNetworkConditionsType;
        players?: {
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        }[] & ({
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        } & {
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        } & { [K_3 in Exclude<keyof I_1["players"][number], keyof CMsgPoorNetworkConditions_Player>]: never; })[] & { [K_4 in Exclude<keyof I_1["players"], keyof {
            account_id?: number;
            disconnect_reason?: ENetworkDisconnectionReason;
            num_bad_intervals?: number;
            peak_loss_pct?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgPoorNetworkConditions>]: never; }>(object: I_1): CMsgPoorNetworkConditions;
};
export declare const CMsgPoorNetworkConditions_Player: {
    fromJSON(object: any): CMsgPoorNetworkConditions_Player;
    toJSON(message: CMsgPoorNetworkConditions_Player): unknown;
    create<I extends {
        account_id?: number;
        disconnect_reason?: ENetworkDisconnectionReason;
        num_bad_intervals?: number;
        peak_loss_pct?: number;
    } & {
        account_id?: number;
        disconnect_reason?: ENetworkDisconnectionReason;
        num_bad_intervals?: number;
        peak_loss_pct?: number;
    } & { [K in Exclude<keyof I, keyof CMsgPoorNetworkConditions_Player>]: never; }>(base?: I): CMsgPoorNetworkConditions_Player;
    fromPartial<I_1 extends {
        account_id?: number;
        disconnect_reason?: ENetworkDisconnectionReason;
        num_bad_intervals?: number;
        peak_loss_pct?: number;
    } & {
        account_id?: number;
        disconnect_reason?: ENetworkDisconnectionReason;
        num_bad_intervals?: number;
        peak_loss_pct?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgPoorNetworkConditions_Player>]: never; }>(object: I_1): CMsgPoorNetworkConditions_Player;
};
export declare const CMsgGameserverCrash: {
    fromJSON(object: any): CMsgGameserverCrash;
    toJSON(message: CMsgGameserverCrash): unknown;
    create<I extends {
        match_id?: string;
        lobby_id?: string;
        game_state?: DOTA_GameState;
        sentinel_save_time?: number;
        custom_game_id?: string;
        tournament_id?: number;
        server_steam_id?: string;
        server_public_ip_addr?: number;
        server_port?: number;
        server_cluster?: number;
        pid?: number;
        engine?: number;
    } & {
        match_id?: string;
        lobby_id?: string;
        game_state?: DOTA_GameState;
        sentinel_save_time?: number;
        custom_game_id?: string;
        tournament_id?: number;
        server_steam_id?: string;
        server_public_ip_addr?: number;
        server_port?: number;
        server_cluster?: number;
        pid?: number;
        engine?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGameserverCrash>]: never; }>(base?: I): CMsgGameserverCrash;
    fromPartial<I_1 extends {
        match_id?: string;
        lobby_id?: string;
        game_state?: DOTA_GameState;
        sentinel_save_time?: number;
        custom_game_id?: string;
        tournament_id?: number;
        server_steam_id?: string;
        server_public_ip_addr?: number;
        server_port?: number;
        server_cluster?: number;
        pid?: number;
        engine?: number;
    } & {
        match_id?: string;
        lobby_id?: string;
        game_state?: DOTA_GameState;
        sentinel_save_time?: number;
        custom_game_id?: string;
        tournament_id?: number;
        server_steam_id?: string;
        server_public_ip_addr?: number;
        server_port?: number;
        server_cluster?: number;
        pid?: number;
        engine?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameserverCrash>]: never; }>(object: I_1): CMsgGameserverCrash;
};
export declare const CMsgConnectedPlayers: {
    fromJSON(object: any): CMsgConnectedPlayers;
    toJSON(message: CMsgConnectedPlayers): unknown;
    create<I extends {
        connected_players?: {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[];
        disconnected_players?: {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[];
        game_state?: DOTA_GameState;
        first_blood_happened?: boolean;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        };
        send_reason?: CMsgConnectedPlayers_SendReason;
        radiant_kills?: number;
        dire_kills?: number;
        radiant_lead?: number;
        building_state?: number;
    } & {
        connected_players?: {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[] & ({
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        } & {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            } & {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            } & { [K in Exclude<keyof I["connected_players"][number]["leaver_state"], keyof CMsgLeaverState>]: never; };
            disconnect_reason?: ENetworkDisconnectionReason;
        } & { [K_1 in Exclude<keyof I["connected_players"][number], keyof CMsgConnectedPlayers_Player>]: never; })[] & { [K_2 in Exclude<keyof I["connected_players"], keyof {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[]>]: never; };
        disconnected_players?: {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[] & ({
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        } & {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            } & {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            } & { [K_3 in Exclude<keyof I["disconnected_players"][number]["leaver_state"], keyof CMsgLeaverState>]: never; };
            disconnect_reason?: ENetworkDisconnectionReason;
        } & { [K_4 in Exclude<keyof I["disconnected_players"][number], keyof CMsgConnectedPlayers_Player>]: never; })[] & { [K_5 in Exclude<keyof I["disconnected_players"], keyof {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[]>]: never; };
        game_state?: DOTA_GameState;
        first_blood_happened?: boolean;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        } & {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[] & ({
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & { [K_6 in Exclude<keyof I["poor_network_conditions"]["players"][number], keyof CMsgPoorNetworkConditions_Player>]: never; })[] & { [K_7 in Exclude<keyof I["poor_network_conditions"]["players"], keyof {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[]>]: never; };
        } & { [K_8 in Exclude<keyof I["poor_network_conditions"], keyof CMsgPoorNetworkConditions>]: never; };
        send_reason?: CMsgConnectedPlayers_SendReason;
        radiant_kills?: number;
        dire_kills?: number;
        radiant_lead?: number;
        building_state?: number;
    } & { [K_9 in Exclude<keyof I, keyof CMsgConnectedPlayers>]: never; }>(base?: I): CMsgConnectedPlayers;
    fromPartial<I_1 extends {
        connected_players?: {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[];
        disconnected_players?: {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[];
        game_state?: DOTA_GameState;
        first_blood_happened?: boolean;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        };
        send_reason?: CMsgConnectedPlayers_SendReason;
        radiant_kills?: number;
        dire_kills?: number;
        radiant_lead?: number;
        building_state?: number;
    } & {
        connected_players?: {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[] & ({
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        } & {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            } & {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            } & { [K_10 in Exclude<keyof I_1["connected_players"][number]["leaver_state"], keyof CMsgLeaverState>]: never; };
            disconnect_reason?: ENetworkDisconnectionReason;
        } & { [K_11 in Exclude<keyof I_1["connected_players"][number], keyof CMsgConnectedPlayers_Player>]: never; })[] & { [K_12 in Exclude<keyof I_1["connected_players"], keyof {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[]>]: never; };
        disconnected_players?: {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[] & ({
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        } & {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            } & {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            } & { [K_13 in Exclude<keyof I_1["disconnected_players"][number]["leaver_state"], keyof CMsgLeaverState>]: never; };
            disconnect_reason?: ENetworkDisconnectionReason;
        } & { [K_14 in Exclude<keyof I_1["disconnected_players"][number], keyof CMsgConnectedPlayers_Player>]: never; })[] & { [K_15 in Exclude<keyof I_1["disconnected_players"], keyof {
            steam_id?: string;
            hero_id?: number;
            leaver_state?: {
                lobby_state?: number;
                game_state?: DOTA_GameState;
                leaver_detected?: boolean;
                first_blood_happened?: boolean;
                discard_match_results?: boolean;
                mass_disconnect?: boolean;
            };
            disconnect_reason?: ENetworkDisconnectionReason;
        }[]>]: never; };
        game_state?: DOTA_GameState;
        first_blood_happened?: boolean;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        } & {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[] & ({
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & { [K_16 in Exclude<keyof I_1["poor_network_conditions"]["players"][number], keyof CMsgPoorNetworkConditions_Player>]: never; })[] & { [K_17 in Exclude<keyof I_1["poor_network_conditions"]["players"], keyof {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[]>]: never; };
        } & { [K_18 in Exclude<keyof I_1["poor_network_conditions"], keyof CMsgPoorNetworkConditions>]: never; };
        send_reason?: CMsgConnectedPlayers_SendReason;
        radiant_kills?: number;
        dire_kills?: number;
        radiant_lead?: number;
        building_state?: number;
    } & { [K_19 in Exclude<keyof I_1, keyof CMsgConnectedPlayers>]: never; }>(object: I_1): CMsgConnectedPlayers;
};
export declare const CMsgConnectedPlayers_Player: {
    fromJSON(object: any): CMsgConnectedPlayers_Player;
    toJSON(message: CMsgConnectedPlayers_Player): unknown;
    create<I extends {
        steam_id?: string;
        hero_id?: number;
        leaver_state?: {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        };
        disconnect_reason?: ENetworkDisconnectionReason;
    } & {
        steam_id?: string;
        hero_id?: number;
        leaver_state?: {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        } & {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        } & { [K in Exclude<keyof I["leaver_state"], keyof CMsgLeaverState>]: never; };
        disconnect_reason?: ENetworkDisconnectionReason;
    } & { [K_1 in Exclude<keyof I, keyof CMsgConnectedPlayers_Player>]: never; }>(base?: I): CMsgConnectedPlayers_Player;
    fromPartial<I_1 extends {
        steam_id?: string;
        hero_id?: number;
        leaver_state?: {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        };
        disconnect_reason?: ENetworkDisconnectionReason;
    } & {
        steam_id?: string;
        hero_id?: number;
        leaver_state?: {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        } & {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        } & { [K_2 in Exclude<keyof I_1["leaver_state"], keyof CMsgLeaverState>]: never; };
        disconnect_reason?: ENetworkDisconnectionReason;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgConnectedPlayers_Player>]: never; }>(object: I_1): CMsgConnectedPlayers_Player;
};
export declare const CMsgGameServerInfo: {
    fromJSON(object: any): CMsgGameServerInfo;
    toJSON(message: CMsgGameServerInfo): unknown;
    create<I extends {
        server_public_ip_addr?: number;
        server_private_ip_addr?: number;
        server_port?: number;
        server_tv_port?: number;
        assigned_server_tv_port?: number;
        legacy_server_steamdatagram_address?: string;
        server_key?: string;
        server_hibernation?: boolean;
        server_type?: CMsgGameServerInfo_ServerType;
        server_region?: number;
        server_loadavg?: number;
        server_tv_broadcast_time?: number;
        server_game_time?: number;
        server_relay_connected_steam_id?: string;
        relay_slots_max?: number;
        relays_connected?: number;
        relay_clients_connected?: number;
        relayed_game_server_steam_id?: string;
        parent_relay_count?: number;
        tv_secret_code?: string;
        server_version?: number;
        server_cluster?: number;
        allow_custom_games?: CMsgGameServerInfo_CustomGames;
        build_version?: number;
        tf_server_count?: number;
        srcds_instance?: number;
        dev_force_server_type?: boolean;
        is_recording_match_training_data?: boolean;
    } & {
        server_public_ip_addr?: number;
        server_private_ip_addr?: number;
        server_port?: number;
        server_tv_port?: number;
        assigned_server_tv_port?: number;
        legacy_server_steamdatagram_address?: string;
        server_key?: string;
        server_hibernation?: boolean;
        server_type?: CMsgGameServerInfo_ServerType;
        server_region?: number;
        server_loadavg?: number;
        server_tv_broadcast_time?: number;
        server_game_time?: number;
        server_relay_connected_steam_id?: string;
        relay_slots_max?: number;
        relays_connected?: number;
        relay_clients_connected?: number;
        relayed_game_server_steam_id?: string;
        parent_relay_count?: number;
        tv_secret_code?: string;
        server_version?: number;
        server_cluster?: number;
        allow_custom_games?: CMsgGameServerInfo_CustomGames;
        build_version?: number;
        tf_server_count?: number;
        srcds_instance?: number;
        dev_force_server_type?: boolean;
        is_recording_match_training_data?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgGameServerInfo>]: never; }>(base?: I): CMsgGameServerInfo;
    fromPartial<I_1 extends {
        server_public_ip_addr?: number;
        server_private_ip_addr?: number;
        server_port?: number;
        server_tv_port?: number;
        assigned_server_tv_port?: number;
        legacy_server_steamdatagram_address?: string;
        server_key?: string;
        server_hibernation?: boolean;
        server_type?: CMsgGameServerInfo_ServerType;
        server_region?: number;
        server_loadavg?: number;
        server_tv_broadcast_time?: number;
        server_game_time?: number;
        server_relay_connected_steam_id?: string;
        relay_slots_max?: number;
        relays_connected?: number;
        relay_clients_connected?: number;
        relayed_game_server_steam_id?: string;
        parent_relay_count?: number;
        tv_secret_code?: string;
        server_version?: number;
        server_cluster?: number;
        allow_custom_games?: CMsgGameServerInfo_CustomGames;
        build_version?: number;
        tf_server_count?: number;
        srcds_instance?: number;
        dev_force_server_type?: boolean;
        is_recording_match_training_data?: boolean;
    } & {
        server_public_ip_addr?: number;
        server_private_ip_addr?: number;
        server_port?: number;
        server_tv_port?: number;
        assigned_server_tv_port?: number;
        legacy_server_steamdatagram_address?: string;
        server_key?: string;
        server_hibernation?: boolean;
        server_type?: CMsgGameServerInfo_ServerType;
        server_region?: number;
        server_loadavg?: number;
        server_tv_broadcast_time?: number;
        server_game_time?: number;
        server_relay_connected_steam_id?: string;
        relay_slots_max?: number;
        relays_connected?: number;
        relay_clients_connected?: number;
        relayed_game_server_steam_id?: string;
        parent_relay_count?: number;
        tv_secret_code?: string;
        server_version?: number;
        server_cluster?: number;
        allow_custom_games?: CMsgGameServerInfo_CustomGames;
        build_version?: number;
        tf_server_count?: number;
        srcds_instance?: number;
        dev_force_server_type?: boolean;
        is_recording_match_training_data?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameServerInfo>]: never; }>(object: I_1): CMsgGameServerInfo;
};
export declare const CMsgLeaverDetected: {
    fromJSON(object: any): CMsgLeaverDetected;
    toJSON(message: CMsgLeaverDetected): unknown;
    create<I extends {
        steam_id?: string;
        leaver_status?: DOTALeaverStatus_t;
        leaver_state?: {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        };
        server_cluster?: number;
        disconnect_reason?: ENetworkDisconnectionReason;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        };
    } & {
        steam_id?: string;
        leaver_status?: DOTALeaverStatus_t;
        leaver_state?: {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        } & {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        } & { [K in Exclude<keyof I["leaver_state"], keyof CMsgLeaverState>]: never; };
        server_cluster?: number;
        disconnect_reason?: ENetworkDisconnectionReason;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        } & {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[] & ({
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & { [K_1 in Exclude<keyof I["poor_network_conditions"]["players"][number], keyof CMsgPoorNetworkConditions_Player>]: never; })[] & { [K_2 in Exclude<keyof I["poor_network_conditions"]["players"], keyof {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[]>]: never; };
        } & { [K_3 in Exclude<keyof I["poor_network_conditions"], keyof CMsgPoorNetworkConditions>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgLeaverDetected>]: never; }>(base?: I): CMsgLeaverDetected;
    fromPartial<I_1 extends {
        steam_id?: string;
        leaver_status?: DOTALeaverStatus_t;
        leaver_state?: {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        };
        server_cluster?: number;
        disconnect_reason?: ENetworkDisconnectionReason;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        };
    } & {
        steam_id?: string;
        leaver_status?: DOTALeaverStatus_t;
        leaver_state?: {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        } & {
            lobby_state?: number;
            game_state?: DOTA_GameState;
            leaver_detected?: boolean;
            first_blood_happened?: boolean;
            discard_match_results?: boolean;
            mass_disconnect?: boolean;
        } & { [K_5 in Exclude<keyof I_1["leaver_state"], keyof CMsgLeaverState>]: never; };
        server_cluster?: number;
        disconnect_reason?: ENetworkDisconnectionReason;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        } & {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[] & ({
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & { [K_6 in Exclude<keyof I_1["poor_network_conditions"]["players"][number], keyof CMsgPoorNetworkConditions_Player>]: never; })[] & { [K_7 in Exclude<keyof I_1["poor_network_conditions"]["players"], keyof {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[]>]: never; };
        } & { [K_8 in Exclude<keyof I_1["poor_network_conditions"], keyof CMsgPoorNetworkConditions>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgLeaverDetected>]: never; }>(object: I_1): CMsgLeaverDetected;
};
export declare const CMsgLeaverDetectedResponse: {
    fromJSON(object: any): CMsgLeaverDetectedResponse;
    toJSON(message: CMsgLeaverDetectedResponse): unknown;
    create<I extends {
        result?: number;
    } & {
        result?: number;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgLeaverDetectedResponse;
    fromPartial<I_1 extends {
        result?: number;
    } & {
        result?: number;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgLeaverDetectedResponse;
};
export declare const CMsgDOTAFantasyFinalPlayerStats: {
    fromJSON(object: any): CMsgDOTAFantasyFinalPlayerStats;
    toJSON(message: CMsgDOTAFantasyFinalPlayerStats): unknown;
    create<I extends {
        stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[];
    } & {
        stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[] & ({
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & { [K in Exclude<keyof I["stats"][number], keyof CMsgDOTAFantasyPlayerStats>]: never; })[] & { [K_1 in Exclude<keyof I["stats"], keyof {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "stats">]: never; }>(base?: I): CMsgDOTAFantasyFinalPlayerStats;
    fromPartial<I_1 extends {
        stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[];
    } & {
        stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[] & ({
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & { [K_3 in Exclude<keyof I_1["stats"][number], keyof CMsgDOTAFantasyPlayerStats>]: never; })[] & { [K_4 in Exclude<keyof I_1["stats"], keyof {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "stats">]: never; }>(object: I_1): CMsgDOTAFantasyFinalPlayerStats;
};
export declare const CMsgDOTAFantasyLivePlayerStats: {
    fromJSON(object: any): CMsgDOTAFantasyLivePlayerStats;
    toJSON(message: CMsgDOTAFantasyLivePlayerStats): unknown;
    create<I extends {
        stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[];
    } & {
        stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[] & ({
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & { [K in Exclude<keyof I["stats"][number], keyof CMsgDOTAFantasyPlayerStats>]: never; })[] & { [K_1 in Exclude<keyof I["stats"], keyof {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "stats">]: never; }>(base?: I): CMsgDOTAFantasyLivePlayerStats;
    fromPartial<I_1 extends {
        stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[];
    } & {
        stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[] & ({
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & { [K_3 in Exclude<keyof I_1["stats"][number], keyof CMsgDOTAFantasyPlayerStats>]: never; })[] & { [K_4 in Exclude<keyof I_1["stats"], keyof {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "stats">]: never; }>(object: I_1): CMsgDOTAFantasyLivePlayerStats;
};
export declare const CMsgServerToGCRealtimeStats: {
    fromJSON(object: any): CMsgServerToGCRealtimeStats;
    toJSON(message: CMsgServerToGCRealtimeStats): unknown;
    create<I extends {
        delayed?: {
            match?: {
                server_steam_id?: string;
                match_id?: string;
                timestamp?: number;
                game_time?: number;
                steam_broadcaster_account_ids?: number[];
                game_mode?: number;
                league_id?: number;
                league_node_id?: number;
                game_state?: number;
                picks?: {
                    hero?: number;
                    team?: number;
                }[];
                bans?: {
                    hero?: number;
                    team?: number;
                }[];
                lobby_type?: number;
                start_timestamp?: number;
            };
            teams?: {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            }[];
            buildings?: {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            }[];
            graph_data?: {
                graph_gold?: number[];
            };
            delta_frame?: boolean;
        };
    } & {
        delayed?: {
            match?: {
                server_steam_id?: string;
                match_id?: string;
                timestamp?: number;
                game_time?: number;
                steam_broadcaster_account_ids?: number[];
                game_mode?: number;
                league_id?: number;
                league_node_id?: number;
                game_state?: number;
                picks?: {
                    hero?: number;
                    team?: number;
                }[];
                bans?: {
                    hero?: number;
                    team?: number;
                }[];
                lobby_type?: number;
                start_timestamp?: number;
            };
            teams?: {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            }[];
            buildings?: {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            }[];
            graph_data?: {
                graph_gold?: number[];
            };
            delta_frame?: boolean;
        } & {
            match?: {
                server_steam_id?: string;
                match_id?: string;
                timestamp?: number;
                game_time?: number;
                steam_broadcaster_account_ids?: number[];
                game_mode?: number;
                league_id?: number;
                league_node_id?: number;
                game_state?: number;
                picks?: {
                    hero?: number;
                    team?: number;
                }[];
                bans?: {
                    hero?: number;
                    team?: number;
                }[];
                lobby_type?: number;
                start_timestamp?: number;
            } & {
                server_steam_id?: string;
                match_id?: string;
                timestamp?: number;
                game_time?: number;
                steam_broadcaster_account_ids?: number[] & number[] & { [K in Exclude<keyof I["delayed"]["match"]["steam_broadcaster_account_ids"], keyof number[]>]: never; };
                game_mode?: number;
                league_id?: number;
                league_node_id?: number;
                game_state?: number;
                picks?: {
                    hero?: number;
                    team?: number;
                }[] & ({
                    hero?: number;
                    team?: number;
                } & {
                    hero?: number;
                    team?: number;
                } & { [K_1 in Exclude<keyof I["delayed"]["match"]["picks"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_PickBanDetails>]: never; })[] & { [K_2 in Exclude<keyof I["delayed"]["match"]["picks"], keyof {
                    hero?: number;
                    team?: number;
                }[]>]: never; };
                bans?: {
                    hero?: number;
                    team?: number;
                }[] & ({
                    hero?: number;
                    team?: number;
                } & {
                    hero?: number;
                    team?: number;
                } & { [K_3 in Exclude<keyof I["delayed"]["match"]["bans"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_PickBanDetails>]: never; })[] & { [K_4 in Exclude<keyof I["delayed"]["match"]["bans"], keyof {
                    hero?: number;
                    team?: number;
                }[]>]: never; };
                lobby_type?: number;
                start_timestamp?: number;
            } & { [K_5 in Exclude<keyof I["delayed"]["match"], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_MatchDetails>]: never; };
            teams?: {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            }[] & ({
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            } & {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[] & ({
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                } & {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[] & number[] & { [K_6 in Exclude<keyof I["delayed"]["teams"][number]["players"][number]["abilities"], keyof number[]>]: never; };
                    items?: number[] & number[] & { [K_7 in Exclude<keyof I["delayed"]["teams"][number]["players"][number]["items"], keyof number[]>]: never; };
                } & { [K_8 in Exclude<keyof I["delayed"]["teams"][number]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_PlayerDetails>]: never; })[] & { [K_9 in Exclude<keyof I["delayed"]["teams"][number]["players"], keyof {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[]>]: never; };
            } & { [K_10 in Exclude<keyof I["delayed"]["teams"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_TeamDetails>]: never; })[] & { [K_11 in Exclude<keyof I["delayed"]["teams"], keyof {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            }[]>]: never; };
            buildings?: {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            }[] & ({
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            } & {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            } & { [K_12 in Exclude<keyof I["delayed"]["buildings"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_BuildingDetails>]: never; })[] & { [K_13 in Exclude<keyof I["delayed"]["buildings"], keyof {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            }[]>]: never; };
            graph_data?: {
                graph_gold?: number[];
            } & {
                graph_gold?: number[] & number[] & { [K_14 in Exclude<keyof I["delayed"]["graph_data"]["graph_gold"], keyof number[]>]: never; };
            } & { [K_15 in Exclude<keyof I["delayed"]["graph_data"], "graph_gold">]: never; };
            delta_frame?: boolean;
        } & { [K_16 in Exclude<keyof I["delayed"], keyof CMsgDOTARealtimeGameStatsTerse>]: never; };
    } & { [K_17 in Exclude<keyof I, "delayed">]: never; }>(base?: I): CMsgServerToGCRealtimeStats;
    fromPartial<I_1 extends {
        delayed?: {
            match?: {
                server_steam_id?: string;
                match_id?: string;
                timestamp?: number;
                game_time?: number;
                steam_broadcaster_account_ids?: number[];
                game_mode?: number;
                league_id?: number;
                league_node_id?: number;
                game_state?: number;
                picks?: {
                    hero?: number;
                    team?: number;
                }[];
                bans?: {
                    hero?: number;
                    team?: number;
                }[];
                lobby_type?: number;
                start_timestamp?: number;
            };
            teams?: {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            }[];
            buildings?: {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            }[];
            graph_data?: {
                graph_gold?: number[];
            };
            delta_frame?: boolean;
        };
    } & {
        delayed?: {
            match?: {
                server_steam_id?: string;
                match_id?: string;
                timestamp?: number;
                game_time?: number;
                steam_broadcaster_account_ids?: number[];
                game_mode?: number;
                league_id?: number;
                league_node_id?: number;
                game_state?: number;
                picks?: {
                    hero?: number;
                    team?: number;
                }[];
                bans?: {
                    hero?: number;
                    team?: number;
                }[];
                lobby_type?: number;
                start_timestamp?: number;
            };
            teams?: {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            }[];
            buildings?: {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            }[];
            graph_data?: {
                graph_gold?: number[];
            };
            delta_frame?: boolean;
        } & {
            match?: {
                server_steam_id?: string;
                match_id?: string;
                timestamp?: number;
                game_time?: number;
                steam_broadcaster_account_ids?: number[];
                game_mode?: number;
                league_id?: number;
                league_node_id?: number;
                game_state?: number;
                picks?: {
                    hero?: number;
                    team?: number;
                }[];
                bans?: {
                    hero?: number;
                    team?: number;
                }[];
                lobby_type?: number;
                start_timestamp?: number;
            } & {
                server_steam_id?: string;
                match_id?: string;
                timestamp?: number;
                game_time?: number;
                steam_broadcaster_account_ids?: number[] & number[] & { [K_18 in Exclude<keyof I_1["delayed"]["match"]["steam_broadcaster_account_ids"], keyof number[]>]: never; };
                game_mode?: number;
                league_id?: number;
                league_node_id?: number;
                game_state?: number;
                picks?: {
                    hero?: number;
                    team?: number;
                }[] & ({
                    hero?: number;
                    team?: number;
                } & {
                    hero?: number;
                    team?: number;
                } & { [K_19 in Exclude<keyof I_1["delayed"]["match"]["picks"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_PickBanDetails>]: never; })[] & { [K_20 in Exclude<keyof I_1["delayed"]["match"]["picks"], keyof {
                    hero?: number;
                    team?: number;
                }[]>]: never; };
                bans?: {
                    hero?: number;
                    team?: number;
                }[] & ({
                    hero?: number;
                    team?: number;
                } & {
                    hero?: number;
                    team?: number;
                } & { [K_21 in Exclude<keyof I_1["delayed"]["match"]["bans"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_PickBanDetails>]: never; })[] & { [K_22 in Exclude<keyof I_1["delayed"]["match"]["bans"], keyof {
                    hero?: number;
                    team?: number;
                }[]>]: never; };
                lobby_type?: number;
                start_timestamp?: number;
            } & { [K_23 in Exclude<keyof I_1["delayed"]["match"], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_MatchDetails>]: never; };
            teams?: {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            }[] & ({
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            } & {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[] & ({
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                } & {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[] & number[] & { [K_24 in Exclude<keyof I_1["delayed"]["teams"][number]["players"][number]["abilities"], keyof number[]>]: never; };
                    items?: number[] & number[] & { [K_25 in Exclude<keyof I_1["delayed"]["teams"][number]["players"][number]["items"], keyof number[]>]: never; };
                } & { [K_26 in Exclude<keyof I_1["delayed"]["teams"][number]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_PlayerDetails>]: never; })[] & { [K_27 in Exclude<keyof I_1["delayed"]["teams"][number]["players"], keyof {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[]>]: never; };
            } & { [K_28 in Exclude<keyof I_1["delayed"]["teams"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_TeamDetails>]: never; })[] & { [K_29 in Exclude<keyof I_1["delayed"]["teams"], keyof {
                team_number?: number;
                team_id?: number;
                team_name?: string;
                team_tag?: string;
                team_logo?: string;
                score?: number;
                net_worth?: number;
                team_logo_url?: string;
                players?: {
                    accountid?: number;
                    playerid?: number;
                    name?: string;
                    team?: number;
                    heroid?: number;
                    level?: number;
                    kill_count?: number;
                    death_count?: number;
                    assists_count?: number;
                    denies_count?: number;
                    lh_count?: number;
                    gold?: number;
                    x?: number;
                    y?: number;
                    net_worth?: number;
                    abilities?: number[];
                    items?: number[];
                }[];
            }[]>]: never; };
            buildings?: {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            }[] & ({
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            } & {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            } & { [K_30 in Exclude<keyof I_1["delayed"]["buildings"][number], keyof import("./dota_gcmessages_common").CMsgDOTARealtimeGameStatsTerse_BuildingDetails>]: never; })[] & { [K_31 in Exclude<keyof I_1["delayed"]["buildings"], keyof {
                team?: number;
                heading?: number;
                type?: number;
                lane?: number;
                tier?: number;
                x?: number;
                y?: number;
                destroyed?: boolean;
            }[]>]: never; };
            graph_data?: {
                graph_gold?: number[];
            } & {
                graph_gold?: number[] & number[] & { [K_32 in Exclude<keyof I_1["delayed"]["graph_data"]["graph_gold"], keyof number[]>]: never; };
            } & { [K_33 in Exclude<keyof I_1["delayed"]["graph_data"], "graph_gold">]: never; };
            delta_frame?: boolean;
        } & { [K_34 in Exclude<keyof I_1["delayed"], keyof CMsgDOTARealtimeGameStatsTerse>]: never; };
    } & { [K_35 in Exclude<keyof I_1, "delayed">]: never; }>(object: I_1): CMsgServerToGCRealtimeStats;
};
export declare const CMsgGCToServerRealtimeStatsStartStop: {
    fromJSON(object: any): CMsgGCToServerRealtimeStatsStartStop;
    toJSON(message: CMsgGCToServerRealtimeStatsStartStop): unknown;
    create<I extends {
        delayed?: boolean;
    } & {
        delayed?: boolean;
    } & { [K in Exclude<keyof I, "delayed">]: never; }>(base?: I): CMsgGCToServerRealtimeStatsStartStop;
    fromPartial<I_1 extends {
        delayed?: boolean;
    } & {
        delayed?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "delayed">]: never; }>(object: I_1): CMsgGCToServerRealtimeStatsStartStop;
};
export declare const CMsgGCToServerUpdateSteamBroadcasting: {
    fromJSON(object: any): CMsgGCToServerUpdateSteamBroadcasting;
    toJSON(message: CMsgGCToServerUpdateSteamBroadcasting): unknown;
    create<I extends {
        active?: boolean;
    } & {
        active?: boolean;
    } & { [K in Exclude<keyof I, "active">]: never; }>(base?: I): CMsgGCToServerUpdateSteamBroadcasting;
    fromPartial<I_1 extends {
        active?: boolean;
    } & {
        active?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "active">]: never; }>(object: I_1): CMsgGCToServerUpdateSteamBroadcasting;
};
export declare const CMsgSignOutGameplayStats: {
    fromJSON(object: any): CMsgSignOutGameplayStats;
    toJSON(message: CMsgSignOutGameplayStats): unknown;
    create<I extends {
        teams?: {
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[];
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[];
        }[];
    } & {
        teams?: {
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[];
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[];
        }[] & ({
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[];
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[];
        } & {
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[] & ({
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            } & {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            } & { [K in Exclude<keyof I["teams"][number]["timed_team_stats"][number], keyof CMatchTeamTimedStats>]: never; })[] & { [K_1 in Exclude<keyof I["teams"][number]["timed_team_stats"], keyof {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[]>]: never; };
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[] & ({
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            } & {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[] & ({
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_2 in Exclude<keyof I["teams"][number]["players"][number]["timed_player_stats"][number], keyof CMatchPlayerTimedStats>]: never; })[] & { [K_3 in Exclude<keyof I["teams"][number]["players"][number]["timed_player_stats"], keyof {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[]>]: never; };
            } & { [K_4 in Exclude<keyof I["teams"][number]["players"][number], keyof CMsgSignOutGameplayStats_CPlayer>]: never; })[] & { [K_5 in Exclude<keyof I["teams"][number]["players"], keyof {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I["teams"][number], keyof CMsgSignOutGameplayStats_CTeam>]: never; })[] & { [K_7 in Exclude<keyof I["teams"], keyof {
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[];
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[];
        }[]>]: never; };
    } & { [K_8 in Exclude<keyof I, "teams">]: never; }>(base?: I): CMsgSignOutGameplayStats;
    fromPartial<I_1 extends {
        teams?: {
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[];
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[];
        }[];
    } & {
        teams?: {
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[];
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[];
        }[] & ({
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[];
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[];
        } & {
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[] & ({
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            } & {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            } & { [K_9 in Exclude<keyof I_1["teams"][number]["timed_team_stats"][number], keyof CMatchTeamTimedStats>]: never; })[] & { [K_10 in Exclude<keyof I_1["teams"][number]["timed_team_stats"], keyof {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[]>]: never; };
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[] & ({
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            } & {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[] & ({
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_11 in Exclude<keyof I_1["teams"][number]["players"][number]["timed_player_stats"][number], keyof CMatchPlayerTimedStats>]: never; })[] & { [K_12 in Exclude<keyof I_1["teams"][number]["players"][number]["timed_player_stats"], keyof {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[]>]: never; };
            } & { [K_13 in Exclude<keyof I_1["teams"][number]["players"][number], keyof CMsgSignOutGameplayStats_CPlayer>]: never; })[] & { [K_14 in Exclude<keyof I_1["teams"][number]["players"], keyof {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[]>]: never; };
        } & { [K_15 in Exclude<keyof I_1["teams"][number], keyof CMsgSignOutGameplayStats_CTeam>]: never; })[] & { [K_16 in Exclude<keyof I_1["teams"], keyof {
            is_winning_team?: boolean;
            is_radiant_team?: boolean;
            timed_team_stats?: {
                time?: number;
                enemy_towers_killed?: number;
                enemy_barracks_killed?: number;
                enemy_towers_status?: number;
                enemy_barracks_status?: number;
            }[];
            players?: {
                steam_id?: string;
                player_slot?: number;
                hero_id?: number;
                timed_player_stats?: {
                    time?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    xp?: number;
                    last_hits?: number;
                    denies?: number;
                    bounty_rune_gold?: number;
                    range_creep_upgrade_gold?: number;
                    observer_wards_dewarded?: number;
                    reliable_gold_earned?: number;
                    gold_loss_prevented?: number;
                    hero_kill_gold?: number;
                    creep_kill_gold?: number;
                    building_gold?: number;
                    other_gold?: number;
                    comeback_gold?: number;
                    experimental_gold?: number;
                    experimental2_gold?: number;
                    creep_deny_gold?: number;
                    tp_scrolls_purchased_1?: number;
                    tp_scrolls_purchased_2?: number;
                    tp_scrolls_purchased_3?: number;
                    tp_scrolls_purchased_4?: number;
                    tp_scrolls_purchased_5?: number;
                    neutral_gold?: number;
                    courier_gold?: number;
                    roshan_gold?: number;
                    income_gold?: number;
                    custom_stats_1?: number;
                    custom_stats_2?: number;
                    custom_stats_3?: number;
                    custom_stats_4?: number;
                    custom_stats_5?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    triple_kills?: number;
                    rampages?: number;
                }[];
            }[];
        }[]>]: never; };
    } & { [K_17 in Exclude<keyof I_1, "teams">]: never; }>(object: I_1): CMsgSignOutGameplayStats;
};
export declare const CMsgSignOutGameplayStats_CPlayer: {
    fromJSON(object: any): CMsgSignOutGameplayStats_CPlayer;
    toJSON(message: CMsgSignOutGameplayStats_CPlayer): unknown;
    create<I extends {
        steam_id?: string;
        player_slot?: number;
        hero_id?: number;
        timed_player_stats?: {
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        }[];
    } & {
        steam_id?: string;
        player_slot?: number;
        hero_id?: number;
        timed_player_stats?: {
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        }[] & ({
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K in Exclude<keyof I["timed_player_stats"][number], keyof CMatchPlayerTimedStats>]: never; })[] & { [K_1 in Exclude<keyof I["timed_player_stats"], keyof {
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgSignOutGameplayStats_CPlayer>]: never; }>(base?: I): CMsgSignOutGameplayStats_CPlayer;
    fromPartial<I_1 extends {
        steam_id?: string;
        player_slot?: number;
        hero_id?: number;
        timed_player_stats?: {
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        }[];
    } & {
        steam_id?: string;
        player_slot?: number;
        hero_id?: number;
        timed_player_stats?: {
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        }[] & ({
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_3 in Exclude<keyof I_1["timed_player_stats"][number], keyof CMatchPlayerTimedStats>]: never; })[] & { [K_4 in Exclude<keyof I_1["timed_player_stats"], keyof {
            time?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            xp?: number;
            last_hits?: number;
            denies?: number;
            bounty_rune_gold?: number;
            range_creep_upgrade_gold?: number;
            observer_wards_dewarded?: number;
            reliable_gold_earned?: number;
            gold_loss_prevented?: number;
            hero_kill_gold?: number;
            creep_kill_gold?: number;
            building_gold?: number;
            other_gold?: number;
            comeback_gold?: number;
            experimental_gold?: number;
            experimental2_gold?: number;
            creep_deny_gold?: number;
            tp_scrolls_purchased_1?: number;
            tp_scrolls_purchased_2?: number;
            tp_scrolls_purchased_3?: number;
            tp_scrolls_purchased_4?: number;
            tp_scrolls_purchased_5?: number;
            neutral_gold?: number;
            courier_gold?: number;
            roshan_gold?: number;
            income_gold?: number;
            custom_stats_1?: number;
            custom_stats_2?: number;
            custom_stats_3?: number;
            custom_stats_4?: number;
            custom_stats_5?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            triple_kills?: number;
            rampages?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSignOutGameplayStats_CPlayer>]: never; }>(object: I_1): CMsgSignOutGameplayStats_CPlayer;
};
export declare const CMsgSignOutGameplayStats_CTeam: {
    fromJSON(object: any): CMsgSignOutGameplayStats_CTeam;
    toJSON(message: CMsgSignOutGameplayStats_CTeam): unknown;
    create<I extends {
        is_winning_team?: boolean;
        is_radiant_team?: boolean;
        timed_team_stats?: {
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        }[];
        players?: {
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[];
        }[];
    } & {
        is_winning_team?: boolean;
        is_radiant_team?: boolean;
        timed_team_stats?: {
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        }[] & ({
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        } & {
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        } & { [K in Exclude<keyof I["timed_team_stats"][number], keyof CMatchTeamTimedStats>]: never; })[] & { [K_1 in Exclude<keyof I["timed_team_stats"], keyof {
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        }[]>]: never; };
        players?: {
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[];
        }[] & ({
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[];
        } & {
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[] & ({
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_2 in Exclude<keyof I["players"][number]["timed_player_stats"][number], keyof CMatchPlayerTimedStats>]: never; })[] & { [K_3 in Exclude<keyof I["players"][number]["timed_player_stats"], keyof {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[]>]: never; };
        } & { [K_4 in Exclude<keyof I["players"][number], keyof CMsgSignOutGameplayStats_CPlayer>]: never; })[] & { [K_5 in Exclude<keyof I["players"], keyof {
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[];
        }[]>]: never; };
    } & { [K_6 in Exclude<keyof I, keyof CMsgSignOutGameplayStats_CTeam>]: never; }>(base?: I): CMsgSignOutGameplayStats_CTeam;
    fromPartial<I_1 extends {
        is_winning_team?: boolean;
        is_radiant_team?: boolean;
        timed_team_stats?: {
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        }[];
        players?: {
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[];
        }[];
    } & {
        is_winning_team?: boolean;
        is_radiant_team?: boolean;
        timed_team_stats?: {
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        }[] & ({
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        } & {
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        } & { [K_7 in Exclude<keyof I_1["timed_team_stats"][number], keyof CMatchTeamTimedStats>]: never; })[] & { [K_8 in Exclude<keyof I_1["timed_team_stats"], keyof {
            time?: number;
            enemy_towers_killed?: number;
            enemy_barracks_killed?: number;
            enemy_towers_status?: number;
            enemy_barracks_status?: number;
        }[]>]: never; };
        players?: {
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[];
        }[] & ({
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[];
        } & {
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[] & ({
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_9 in Exclude<keyof I_1["players"][number]["timed_player_stats"][number], keyof CMatchPlayerTimedStats>]: never; })[] & { [K_10 in Exclude<keyof I_1["players"][number]["timed_player_stats"], keyof {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[]>]: never; };
        } & { [K_11 in Exclude<keyof I_1["players"][number], keyof CMsgSignOutGameplayStats_CPlayer>]: never; })[] & { [K_12 in Exclude<keyof I_1["players"], keyof {
            steam_id?: string;
            player_slot?: number;
            hero_id?: number;
            timed_player_stats?: {
                time?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                xp?: number;
                last_hits?: number;
                denies?: number;
                bounty_rune_gold?: number;
                range_creep_upgrade_gold?: number;
                observer_wards_dewarded?: number;
                reliable_gold_earned?: number;
                gold_loss_prevented?: number;
                hero_kill_gold?: number;
                creep_kill_gold?: number;
                building_gold?: number;
                other_gold?: number;
                comeback_gold?: number;
                experimental_gold?: number;
                experimental2_gold?: number;
                creep_deny_gold?: number;
                tp_scrolls_purchased_1?: number;
                tp_scrolls_purchased_2?: number;
                tp_scrolls_purchased_3?: number;
                tp_scrolls_purchased_4?: number;
                tp_scrolls_purchased_5?: number;
                neutral_gold?: number;
                courier_gold?: number;
                roshan_gold?: number;
                income_gold?: number;
                custom_stats_1?: number;
                custom_stats_2?: number;
                custom_stats_3?: number;
                custom_stats_4?: number;
                custom_stats_5?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                triple_kills?: number;
                rampages?: number;
            }[];
        }[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, keyof CMsgSignOutGameplayStats_CTeam>]: never; }>(object: I_1): CMsgSignOutGameplayStats_CTeam;
};
export declare const CMsgGameMatchSignOut: {
    fromJSON(object: any): CMsgGameMatchSignOut;
    toJSON(message: CMsgGameMatchSignOut): unknown;
    create<I extends {
        match_id?: string;
        duration?: number;
        good_guys_win?: boolean;
        date?: number;
        num_players?: number[];
        teams?: {
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[];
        }[];
        tower_status?: number[];
        barracks_status?: number[];
        cluster?: number;
        server_addr?: string;
        first_blood_time?: number;
        event_score?: number;
        picks_bans?: {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[];
        fantasy_stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[];
        player_strange_count_adjustments?: {
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[];
            turbo_mode?: boolean;
        }[];
        automatic_surrender?: boolean;
        server_version?: number;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        };
        additional_msgs?: {
            id?: number;
            contents?: string;
        }[];
        social_feed_events?: {
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        }[];
        average_networth_delta?: number;
        custom_game_data?: {
            publish_timestamp?: number;
        };
        match_flags?: number;
        team_scores?: number[];
        pre_game_duration?: number;
        event_game_leaderboard_entries?: {
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        }[];
        ward_placements?: {
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        }[];
        gameplay_stats?: {
            teams?: {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            }[];
        };
        extra_messages?: {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[];
        training_data_recorded?: boolean;
        winning_team?: DOTA_GC_TEAM;
        normalized_win_probability_diff?: number;
    } & {
        match_id?: string;
        duration?: number;
        good_guys_win?: boolean;
        date?: number;
        num_players?: number[] & number[] & { [K in Exclude<keyof I["num_players"], keyof number[]>]: never; };
        teams?: {
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[];
        }[] & ({
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[];
        } & {
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[] & ({
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            } & {
                steam_id?: string;
                hero_id?: number;
                items?: number[] & number[] & { [K_1 in Exclude<keyof I["teams"][number]["players"][number]["items"], keyof number[]>]: never; };
                item_purchase_times?: number[] & number[] & { [K_2 in Exclude<keyof I["teams"][number]["players"][number]["item_purchase_times"], keyof number[]>]: never; };
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K_3 in Exclude<keyof I["teams"][number]["players"][number]["ability_upgrades"][number], keyof CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_4 in Exclude<keyof I["teams"][number]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_5 in Exclude<keyof I["teams"][number]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_6 in Exclude<keyof I["teams"][number]["players"][number]["additional_units_inventory"][number], keyof CMatchAdditionalUnitInventory>]: never; })[] & { [K_7 in Exclude<keyof I["teams"][number]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_8 in Exclude<keyof I["teams"][number]["players"][number]["permanent_buffs"][number], keyof CMatchPlayerPermanentBuff>]: never; })[] & { [K_9 in Exclude<keyof I["teams"][number]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_10 in Exclude<keyof I["teams"][number]["players"][number]["custom_game_data"], keyof CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>]: never; };
                match_player_flags?: number;
                talent_ability_ids?: number[] & number[] & { [K_11 in Exclude<keyof I["teams"][number]["players"][number]["talent_ability_ids"], keyof number[]>]: never; };
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                } & { [K_12 in Exclude<keyof I["teams"][number]["players"][number]["hero_damage_received"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_13 in Exclude<keyof I["teams"][number]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                } & { [K_14 in Exclude<keyof I["teams"][number]["players"][number]["hero_damage_dealt"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_15 in Exclude<keyof I["teams"][number]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[] & number[] & { [K_16 in Exclude<keyof I["teams"][number]["players"][number]["ability_draft_abilities"], keyof number[]>]: never; };
            } & { [K_17 in Exclude<keyof I["teams"][number]["players"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer>]: never; })[] & { [K_18 in Exclude<keyof I["teams"][number]["players"], keyof {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[]>]: never; };
        } & { [K_19 in Exclude<keyof I["teams"][number], "players">]: never; })[] & { [K_20 in Exclude<keyof I["teams"], keyof {
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[];
        }[]>]: never; };
        tower_status?: number[] & number[] & { [K_21 in Exclude<keyof I["tower_status"], keyof number[]>]: never; };
        barracks_status?: number[] & number[] & { [K_22 in Exclude<keyof I["barracks_status"], keyof number[]>]: never; };
        cluster?: number;
        server_addr?: string;
        first_blood_time?: number;
        event_score?: number;
        picks_bans?: {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[] & ({
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        } & {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        } & { [K_23 in Exclude<keyof I["picks_bans"][number], keyof CMatchHeroSelectEvent>]: never; })[] & { [K_24 in Exclude<keyof I["picks_bans"], keyof {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[]>]: never; };
        fantasy_stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[] & ({
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & { [K_25 in Exclude<keyof I["fantasy_stats"][number], keyof CMsgDOTAFantasyPlayerStats>]: never; })[] & { [K_26 in Exclude<keyof I["fantasy_stats"], keyof {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[]>]: never; };
        player_strange_count_adjustments?: {
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[];
            turbo_mode?: boolean;
        }[] & ({
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[];
            turbo_mode?: boolean;
        } & {
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[] & ({
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            } & {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            } & { [K_27 in Exclude<keyof I["player_strange_count_adjustments"][number]["strange_count_adjustments"][number], keyof import("./econ_gcmessages").CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>]: never; })[] & { [K_28 in Exclude<keyof I["player_strange_count_adjustments"][number]["strange_count_adjustments"], keyof {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[]>]: never; };
            turbo_mode?: boolean;
        } & { [K_29 in Exclude<keyof I["player_strange_count_adjustments"][number], keyof CMsgEconPlayerStrangeCountAdjustment>]: never; })[] & { [K_30 in Exclude<keyof I["player_strange_count_adjustments"], keyof {
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[];
            turbo_mode?: boolean;
        }[]>]: never; };
        automatic_surrender?: boolean;
        server_version?: number;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        } & {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[] & ({
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & { [K_31 in Exclude<keyof I["poor_network_conditions"]["players"][number], keyof CMsgPoorNetworkConditions_Player>]: never; })[] & { [K_32 in Exclude<keyof I["poor_network_conditions"]["players"], keyof {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[]>]: never; };
        } & { [K_33 in Exclude<keyof I["poor_network_conditions"], keyof CMsgPoorNetworkConditions>]: never; };
        additional_msgs?: {
            id?: number;
            contents?: string;
        }[] & ({
            id?: number;
            contents?: string;
        } & {
            id?: number;
            contents?: string;
        } & { [K_34 in Exclude<keyof I["additional_msgs"][number], keyof CMsgGameMatchSignOut_CAdditionalSignoutMsg>]: never; })[] & { [K_35 in Exclude<keyof I["additional_msgs"], keyof {
            id?: number;
            contents?: string;
        }[]>]: never; };
        social_feed_events?: {
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        }[] & ({
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        } & {
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        } & { [K_36 in Exclude<keyof I["social_feed_events"][number], keyof CMsgGameMatchSignOut_CSocialFeedMatchEvent>]: never; })[] & { [K_37 in Exclude<keyof I["social_feed_events"], keyof {
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        }[]>]: never; };
        average_networth_delta?: number;
        custom_game_data?: {
            publish_timestamp?: number;
        } & {
            publish_timestamp?: number;
        } & { [K_38 in Exclude<keyof I["custom_game_data"], "publish_timestamp">]: never; };
        match_flags?: number;
        team_scores?: number[] & number[] & { [K_39 in Exclude<keyof I["team_scores"], keyof number[]>]: never; };
        pre_game_duration?: number;
        event_game_leaderboard_entries?: {
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        }[] & ({
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        } & {
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        } & { [K_40 in Exclude<keyof I["event_game_leaderboard_entries"][number], keyof CMsgGameMatchSignOut_EventGameLeaderboardEntry>]: never; })[] & { [K_41 in Exclude<keyof I["event_game_leaderboard_entries"], keyof {
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        }[]>]: never; };
        ward_placements?: {
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        }[] & ({
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        } & {
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        } & { [K_42 in Exclude<keyof I["ward_placements"][number], keyof CMsgGameMatchSignOut_WardPlacement>]: never; })[] & { [K_43 in Exclude<keyof I["ward_placements"], keyof {
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        }[]>]: never; };
        gameplay_stats?: {
            teams?: {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            }[];
        } & {
            teams?: {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            }[] & ({
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            } & {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[] & ({
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                } & {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                } & { [K_44 in Exclude<keyof I["gameplay_stats"]["teams"][number]["timed_team_stats"][number], keyof CMatchTeamTimedStats>]: never; })[] & { [K_45 in Exclude<keyof I["gameplay_stats"]["teams"][number]["timed_team_stats"], keyof {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[]>]: never; };
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[] & ({
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                } & {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[] & ({
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    } & {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    } & { [K_46 in Exclude<keyof I["gameplay_stats"]["teams"][number]["players"][number]["timed_player_stats"][number], keyof CMatchPlayerTimedStats>]: never; })[] & { [K_47 in Exclude<keyof I["gameplay_stats"]["teams"][number]["players"][number]["timed_player_stats"], keyof {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[]>]: never; };
                } & { [K_48 in Exclude<keyof I["gameplay_stats"]["teams"][number]["players"][number], keyof CMsgSignOutGameplayStats_CPlayer>]: never; })[] & { [K_49 in Exclude<keyof I["gameplay_stats"]["teams"][number]["players"], keyof {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[]>]: never; };
            } & { [K_50 in Exclude<keyof I["gameplay_stats"]["teams"][number], keyof CMsgSignOutGameplayStats_CTeam>]: never; })[] & { [K_51 in Exclude<keyof I["gameplay_stats"]["teams"], keyof {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            }[]>]: never; };
        } & { [K_52 in Exclude<keyof I["gameplay_stats"], "teams">]: never; };
        extra_messages?: {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[] & ({
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        } & {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        } & { [K_53 in Exclude<keyof I["extra_messages"][number], keyof CExtraMsgBlock>]: never; })[] & { [K_54 in Exclude<keyof I["extra_messages"], keyof {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[]>]: never; };
        training_data_recorded?: boolean;
        winning_team?: DOTA_GC_TEAM;
        normalized_win_probability_diff?: number;
    } & { [K_55 in Exclude<keyof I, keyof CMsgGameMatchSignOut>]: never; }>(base?: I): CMsgGameMatchSignOut;
    fromPartial<I_1 extends {
        match_id?: string;
        duration?: number;
        good_guys_win?: boolean;
        date?: number;
        num_players?: number[];
        teams?: {
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[];
        }[];
        tower_status?: number[];
        barracks_status?: number[];
        cluster?: number;
        server_addr?: string;
        first_blood_time?: number;
        event_score?: number;
        picks_bans?: {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[];
        fantasy_stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[];
        player_strange_count_adjustments?: {
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[];
            turbo_mode?: boolean;
        }[];
        automatic_surrender?: boolean;
        server_version?: number;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        };
        additional_msgs?: {
            id?: number;
            contents?: string;
        }[];
        social_feed_events?: {
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        }[];
        average_networth_delta?: number;
        custom_game_data?: {
            publish_timestamp?: number;
        };
        match_flags?: number;
        team_scores?: number[];
        pre_game_duration?: number;
        event_game_leaderboard_entries?: {
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        }[];
        ward_placements?: {
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        }[];
        gameplay_stats?: {
            teams?: {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            }[];
        };
        extra_messages?: {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[];
        training_data_recorded?: boolean;
        winning_team?: DOTA_GC_TEAM;
        normalized_win_probability_diff?: number;
    } & {
        match_id?: string;
        duration?: number;
        good_guys_win?: boolean;
        date?: number;
        num_players?: number[] & number[] & { [K_56 in Exclude<keyof I_1["num_players"], keyof number[]>]: never; };
        teams?: {
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[];
        }[] & ({
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[];
        } & {
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[] & ({
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            } & {
                steam_id?: string;
                hero_id?: number;
                items?: number[] & number[] & { [K_57 in Exclude<keyof I_1["teams"][number]["players"][number]["items"], keyof number[]>]: never; };
                item_purchase_times?: number[] & number[] & { [K_58 in Exclude<keyof I_1["teams"][number]["players"][number]["item_purchase_times"], keyof number[]>]: never; };
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K_59 in Exclude<keyof I_1["teams"][number]["players"][number]["ability_upgrades"][number], keyof CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_60 in Exclude<keyof I_1["teams"][number]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_61 in Exclude<keyof I_1["teams"][number]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_62 in Exclude<keyof I_1["teams"][number]["players"][number]["additional_units_inventory"][number], keyof CMatchAdditionalUnitInventory>]: never; })[] & { [K_63 in Exclude<keyof I_1["teams"][number]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_64 in Exclude<keyof I_1["teams"][number]["players"][number]["permanent_buffs"][number], keyof CMatchPlayerPermanentBuff>]: never; })[] & { [K_65 in Exclude<keyof I_1["teams"][number]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_66 in Exclude<keyof I_1["teams"][number]["players"][number]["custom_game_data"], keyof CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>]: never; };
                match_player_flags?: number;
                talent_ability_ids?: number[] & number[] & { [K_67 in Exclude<keyof I_1["teams"][number]["players"][number]["talent_ability_ids"], keyof number[]>]: never; };
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                } & { [K_68 in Exclude<keyof I_1["teams"][number]["players"][number]["hero_damage_received"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_69 in Exclude<keyof I_1["teams"][number]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                } & { [K_70 in Exclude<keyof I_1["teams"][number]["players"][number]["hero_damage_dealt"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_71 in Exclude<keyof I_1["teams"][number]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[] & number[] & { [K_72 in Exclude<keyof I_1["teams"][number]["players"][number]["ability_draft_abilities"], keyof number[]>]: never; };
            } & { [K_73 in Exclude<keyof I_1["teams"][number]["players"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer>]: never; })[] & { [K_74 in Exclude<keyof I_1["teams"][number]["players"], keyof {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[]>]: never; };
        } & { [K_75 in Exclude<keyof I_1["teams"][number], "players">]: never; })[] & { [K_76 in Exclude<keyof I_1["teams"], keyof {
            players?: {
                steam_id?: string;
                hero_id?: number;
                items?: number[];
                item_purchase_times?: number[];
                gold?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_minute?: number;
                gold_spent?: number;
                level?: number;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                time_last_seen?: number;
                support_ability_value?: number;
                party_id?: string;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                net_worth?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                match_player_flags?: number;
                talent_ability_ids?: number[];
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                lane?: number;
                is_using_plus_guide?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                command_count?: number;
                mouse_click_cast_command_count?: number;
                teleports_used?: number;
                cavern_crawl_preferred_map_variant?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                dewards?: number;
                wards_placed?: number;
                camps_stacked?: number;
                player_slot?: number;
                predicted_position?: number;
                lane_outcomes?: number;
                friendly_t1_destroyed_time?: number;
                enemy_t1_destroyed_time?: number;
                friendly_roshan_kills?: number;
                enemy_roshan_kills?: number;
                power_runes?: number;
                water_runes?: number;
                stun_duration?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
                time_purchased_shard?: number;
                time_purchased_aghs?: number;
                ability_draft_abilities?: number[];
            }[];
        }[]>]: never; };
        tower_status?: number[] & number[] & { [K_77 in Exclude<keyof I_1["tower_status"], keyof number[]>]: never; };
        barracks_status?: number[] & number[] & { [K_78 in Exclude<keyof I_1["barracks_status"], keyof number[]>]: never; };
        cluster?: number;
        server_addr?: string;
        first_blood_time?: number;
        event_score?: number;
        picks_bans?: {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[] & ({
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        } & {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        } & { [K_79 in Exclude<keyof I_1["picks_bans"][number], keyof CMatchHeroSelectEvent>]: never; })[] & { [K_80 in Exclude<keyof I_1["picks_bans"], keyof {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[]>]: never; };
        fantasy_stats?: {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[] & ({
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        } & { [K_81 in Exclude<keyof I_1["fantasy_stats"][number], keyof CMsgDOTAFantasyPlayerStats>]: never; })[] & { [K_82 in Exclude<keyof I_1["fantasy_stats"], keyof {
            player_account_id?: number;
            match_id?: string;
            match_completed?: boolean;
            team_id?: number;
            league_id?: number;
            delay?: number;
            series_id?: number;
            series_type?: number;
            kills?: number;
            deaths?: number;
            cs?: number;
            gpm?: number;
            tower_kills?: number;
            roshan_kills?: number;
            teamfight_participation?: number;
            wards_placed?: number;
            camps_stacked?: number;
            runes_grabbed?: number;
            first_blood?: number;
            stuns?: number;
        }[]>]: never; };
        player_strange_count_adjustments?: {
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[];
            turbo_mode?: boolean;
        }[] & ({
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[];
            turbo_mode?: boolean;
        } & {
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[] & ({
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            } & {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            } & { [K_83 in Exclude<keyof I_1["player_strange_count_adjustments"][number]["strange_count_adjustments"][number], keyof import("./econ_gcmessages").CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>]: never; })[] & { [K_84 in Exclude<keyof I_1["player_strange_count_adjustments"][number]["strange_count_adjustments"], keyof {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[]>]: never; };
            turbo_mode?: boolean;
        } & { [K_85 in Exclude<keyof I_1["player_strange_count_adjustments"][number], keyof CMsgEconPlayerStrangeCountAdjustment>]: never; })[] & { [K_86 in Exclude<keyof I_1["player_strange_count_adjustments"], keyof {
            account_id?: number;
            strange_count_adjustments?: {
                event_type?: number;
                item_id?: string;
                adjustment?: number;
            }[];
            turbo_mode?: boolean;
        }[]>]: never; };
        automatic_surrender?: boolean;
        server_version?: number;
        poor_network_conditions?: {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[];
        } & {
            detection_type?: EPoorNetworkConditionsType;
            players?: {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[] & ({
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            } & { [K_87 in Exclude<keyof I_1["poor_network_conditions"]["players"][number], keyof CMsgPoorNetworkConditions_Player>]: never; })[] & { [K_88 in Exclude<keyof I_1["poor_network_conditions"]["players"], keyof {
                account_id?: number;
                disconnect_reason?: ENetworkDisconnectionReason;
                num_bad_intervals?: number;
                peak_loss_pct?: number;
            }[]>]: never; };
        } & { [K_89 in Exclude<keyof I_1["poor_network_conditions"], keyof CMsgPoorNetworkConditions>]: never; };
        additional_msgs?: {
            id?: number;
            contents?: string;
        }[] & ({
            id?: number;
            contents?: string;
        } & {
            id?: number;
            contents?: string;
        } & { [K_90 in Exclude<keyof I_1["additional_msgs"][number], keyof CMsgGameMatchSignOut_CAdditionalSignoutMsg>]: never; })[] & { [K_91 in Exclude<keyof I_1["additional_msgs"], keyof {
            id?: number;
            contents?: string;
        }[]>]: never; };
        social_feed_events?: {
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        }[] & ({
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        } & {
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        } & { [K_92 in Exclude<keyof I_1["social_feed_events"][number], keyof CMsgGameMatchSignOut_CSocialFeedMatchEvent>]: never; })[] & { [K_93 in Exclude<keyof I_1["social_feed_events"], keyof {
            account_id?: number;
            timestamp?: number;
            event_type?: number;
            game_time?: number;
            replay_time?: number;
        }[]>]: never; };
        average_networth_delta?: number;
        custom_game_data?: {
            publish_timestamp?: number;
        } & {
            publish_timestamp?: number;
        } & { [K_94 in Exclude<keyof I_1["custom_game_data"], "publish_timestamp">]: never; };
        match_flags?: number;
        team_scores?: number[] & number[] & { [K_95 in Exclude<keyof I_1["team_scores"], keyof number[]>]: never; };
        pre_game_duration?: number;
        event_game_leaderboard_entries?: {
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        }[] & ({
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        } & {
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        } & { [K_96 in Exclude<keyof I_1["event_game_leaderboard_entries"][number], keyof CMsgGameMatchSignOut_EventGameLeaderboardEntry>]: never; })[] & { [K_97 in Exclude<keyof I_1["event_game_leaderboard_entries"], keyof {
            name_suffix?: string;
            score?: number;
            extra_data_1?: number;
            extra_data_2?: number;
            extra_data_3?: number;
            extra_data_4?: number;
            extra_data_5?: number;
        }[]>]: never; };
        ward_placements?: {
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        }[] & ({
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        } & {
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        } & { [K_98 in Exclude<keyof I_1["ward_placements"][number], keyof CMsgGameMatchSignOut_WardPlacement>]: never; })[] & { [K_99 in Exclude<keyof I_1["ward_placements"], keyof {
            player_id?: number;
            team_id?: number;
            placed_time?: number;
            building_state?: number;
            creep_state?: number;
            roshan_alive?: boolean;
            position_x?: number;
            position_y?: number;
        }[]>]: never; };
        gameplay_stats?: {
            teams?: {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            }[];
        } & {
            teams?: {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            }[] & ({
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            } & {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[] & ({
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                } & {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                } & { [K_100 in Exclude<keyof I_1["gameplay_stats"]["teams"][number]["timed_team_stats"][number], keyof CMatchTeamTimedStats>]: never; })[] & { [K_101 in Exclude<keyof I_1["gameplay_stats"]["teams"][number]["timed_team_stats"], keyof {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[]>]: never; };
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[] & ({
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                } & {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[] & ({
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    } & {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    } & { [K_102 in Exclude<keyof I_1["gameplay_stats"]["teams"][number]["players"][number]["timed_player_stats"][number], keyof CMatchPlayerTimedStats>]: never; })[] & { [K_103 in Exclude<keyof I_1["gameplay_stats"]["teams"][number]["players"][number]["timed_player_stats"], keyof {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[]>]: never; };
                } & { [K_104 in Exclude<keyof I_1["gameplay_stats"]["teams"][number]["players"][number], keyof CMsgSignOutGameplayStats_CPlayer>]: never; })[] & { [K_105 in Exclude<keyof I_1["gameplay_stats"]["teams"][number]["players"], keyof {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[]>]: never; };
            } & { [K_106 in Exclude<keyof I_1["gameplay_stats"]["teams"][number], keyof CMsgSignOutGameplayStats_CTeam>]: never; })[] & { [K_107 in Exclude<keyof I_1["gameplay_stats"]["teams"], keyof {
                is_winning_team?: boolean;
                is_radiant_team?: boolean;
                timed_team_stats?: {
                    time?: number;
                    enemy_towers_killed?: number;
                    enemy_barracks_killed?: number;
                    enemy_towers_status?: number;
                    enemy_barracks_status?: number;
                }[];
                players?: {
                    steam_id?: string;
                    player_slot?: number;
                    hero_id?: number;
                    timed_player_stats?: {
                        time?: number;
                        kills?: number;
                        deaths?: number;
                        assists?: number;
                        net_worth?: number;
                        xp?: number;
                        last_hits?: number;
                        denies?: number;
                        bounty_rune_gold?: number;
                        range_creep_upgrade_gold?: number;
                        observer_wards_dewarded?: number;
                        reliable_gold_earned?: number;
                        gold_loss_prevented?: number;
                        hero_kill_gold?: number;
                        creep_kill_gold?: number;
                        building_gold?: number;
                        other_gold?: number;
                        comeback_gold?: number;
                        experimental_gold?: number;
                        experimental2_gold?: number;
                        creep_deny_gold?: number;
                        tp_scrolls_purchased_1?: number;
                        tp_scrolls_purchased_2?: number;
                        tp_scrolls_purchased_3?: number;
                        tp_scrolls_purchased_4?: number;
                        tp_scrolls_purchased_5?: number;
                        neutral_gold?: number;
                        courier_gold?: number;
                        roshan_gold?: number;
                        income_gold?: number;
                        custom_stats_1?: number;
                        custom_stats_2?: number;
                        custom_stats_3?: number;
                        custom_stats_4?: number;
                        custom_stats_5?: number;
                        item_value?: number;
                        support_gold_spent?: number;
                        camps_stacked?: number;
                        wards_placed?: number;
                        triple_kills?: number;
                        rampages?: number;
                    }[];
                }[];
            }[]>]: never; };
        } & { [K_108 in Exclude<keyof I_1["gameplay_stats"], "teams">]: never; };
        extra_messages?: {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[] & ({
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        } & {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        } & { [K_109 in Exclude<keyof I_1["extra_messages"][number], keyof CExtraMsgBlock>]: never; })[] & { [K_110 in Exclude<keyof I_1["extra_messages"], keyof {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[]>]: never; };
        training_data_recorded?: boolean;
        winning_team?: DOTA_GC_TEAM;
        normalized_win_probability_diff?: number;
    } & { [K_111 in Exclude<keyof I_1, keyof CMsgGameMatchSignOut>]: never; }>(object: I_1): CMsgGameMatchSignOut;
};
export declare const CMsgGameMatchSignOut_CTeam: {
    fromJSON(object: any): CMsgGameMatchSignOut_CTeam;
    toJSON(message: CMsgGameMatchSignOut_CTeam): unknown;
    create<I extends {
        players?: {
            steam_id?: string;
            hero_id?: number;
            items?: number[];
            item_purchase_times?: number[];
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[];
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[];
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[];
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            };
            match_player_flags?: number;
            talent_ability_ids?: number[];
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[];
        }[];
    } & {
        players?: {
            steam_id?: string;
            hero_id?: number;
            items?: number[];
            item_purchase_times?: number[];
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[];
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[];
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[];
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            };
            match_player_flags?: number;
            talent_ability_ids?: number[];
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[];
        }[] & ({
            steam_id?: string;
            hero_id?: number;
            items?: number[];
            item_purchase_times?: number[];
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[];
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[];
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[];
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            };
            match_player_flags?: number;
            talent_ability_ids?: number[];
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[];
        } & {
            steam_id?: string;
            hero_id?: number;
            items?: number[] & number[] & { [K in Exclude<keyof I["players"][number]["items"], keyof number[]>]: never; };
            item_purchase_times?: number[] & number[] & { [K_1 in Exclude<keyof I["players"][number]["item_purchase_times"], keyof number[]>]: never; };
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[] & ({
                ability?: number;
                time?: number;
            } & {
                ability?: number;
                time?: number;
            } & { [K_2 in Exclude<keyof I["players"][number]["ability_upgrades"][number], keyof CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_3 in Exclude<keyof I["players"][number]["ability_upgrades"], keyof {
                ability?: number;
                time?: number;
            }[]>]: never; };
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[] & ({
                unit_name?: string;
                items?: number[];
            } & {
                unit_name?: string;
                items?: number[] & number[] & { [K_4 in Exclude<keyof I["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
            } & { [K_5 in Exclude<keyof I["players"][number]["additional_units_inventory"][number], keyof CMatchAdditionalUnitInventory>]: never; })[] & { [K_6 in Exclude<keyof I["players"][number]["additional_units_inventory"], keyof {
                unit_name?: string;
                items?: number[];
            }[]>]: never; };
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[] & ({
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            } & {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            } & { [K_7 in Exclude<keyof I["players"][number]["permanent_buffs"][number], keyof CMatchPlayerPermanentBuff>]: never; })[] & { [K_8 in Exclude<keyof I["players"][number]["permanent_buffs"], keyof {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[]>]: never; };
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            } & {
                dota_team?: number;
                winner?: boolean;
            } & { [K_9 in Exclude<keyof I["players"][number]["custom_game_data"], keyof CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>]: never; };
            match_player_flags?: number;
            talent_ability_ids?: number[] & number[] & { [K_10 in Exclude<keyof I["players"][number]["talent_ability_ids"], keyof number[]>]: never; };
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[] & ({
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            } & {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            } & { [K_11 in Exclude<keyof I["players"][number]["hero_damage_received"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_12 in Exclude<keyof I["players"][number]["hero_damage_received"], keyof {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[]>]: never; };
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[] & ({
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            } & {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            } & { [K_13 in Exclude<keyof I["players"][number]["hero_damage_dealt"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_14 in Exclude<keyof I["players"][number]["hero_damage_dealt"], keyof {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[]>]: never; };
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[] & number[] & { [K_15 in Exclude<keyof I["players"][number]["ability_draft_abilities"], keyof number[]>]: never; };
        } & { [K_16 in Exclude<keyof I["players"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer>]: never; })[] & { [K_17 in Exclude<keyof I["players"], keyof {
            steam_id?: string;
            hero_id?: number;
            items?: number[];
            item_purchase_times?: number[];
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[];
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[];
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[];
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            };
            match_player_flags?: number;
            talent_ability_ids?: number[];
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[];
        }[]>]: never; };
    } & { [K_18 in Exclude<keyof I, "players">]: never; }>(base?: I): CMsgGameMatchSignOut_CTeam;
    fromPartial<I_1 extends {
        players?: {
            steam_id?: string;
            hero_id?: number;
            items?: number[];
            item_purchase_times?: number[];
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[];
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[];
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[];
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            };
            match_player_flags?: number;
            talent_ability_ids?: number[];
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[];
        }[];
    } & {
        players?: {
            steam_id?: string;
            hero_id?: number;
            items?: number[];
            item_purchase_times?: number[];
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[];
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[];
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[];
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            };
            match_player_flags?: number;
            talent_ability_ids?: number[];
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[];
        }[] & ({
            steam_id?: string;
            hero_id?: number;
            items?: number[];
            item_purchase_times?: number[];
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[];
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[];
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[];
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            };
            match_player_flags?: number;
            talent_ability_ids?: number[];
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[];
        } & {
            steam_id?: string;
            hero_id?: number;
            items?: number[] & number[] & { [K_19 in Exclude<keyof I_1["players"][number]["items"], keyof number[]>]: never; };
            item_purchase_times?: number[] & number[] & { [K_20 in Exclude<keyof I_1["players"][number]["item_purchase_times"], keyof number[]>]: never; };
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[] & ({
                ability?: number;
                time?: number;
            } & {
                ability?: number;
                time?: number;
            } & { [K_21 in Exclude<keyof I_1["players"][number]["ability_upgrades"][number], keyof CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_22 in Exclude<keyof I_1["players"][number]["ability_upgrades"], keyof {
                ability?: number;
                time?: number;
            }[]>]: never; };
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[] & ({
                unit_name?: string;
                items?: number[];
            } & {
                unit_name?: string;
                items?: number[] & number[] & { [K_23 in Exclude<keyof I_1["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
            } & { [K_24 in Exclude<keyof I_1["players"][number]["additional_units_inventory"][number], keyof CMatchAdditionalUnitInventory>]: never; })[] & { [K_25 in Exclude<keyof I_1["players"][number]["additional_units_inventory"], keyof {
                unit_name?: string;
                items?: number[];
            }[]>]: never; };
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[] & ({
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            } & {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            } & { [K_26 in Exclude<keyof I_1["players"][number]["permanent_buffs"][number], keyof CMatchPlayerPermanentBuff>]: never; })[] & { [K_27 in Exclude<keyof I_1["players"][number]["permanent_buffs"], keyof {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[]>]: never; };
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            } & {
                dota_team?: number;
                winner?: boolean;
            } & { [K_28 in Exclude<keyof I_1["players"][number]["custom_game_data"], keyof CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>]: never; };
            match_player_flags?: number;
            talent_ability_ids?: number[] & number[] & { [K_29 in Exclude<keyof I_1["players"][number]["talent_ability_ids"], keyof number[]>]: never; };
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[] & ({
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            } & {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            } & { [K_30 in Exclude<keyof I_1["players"][number]["hero_damage_received"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_31 in Exclude<keyof I_1["players"][number]["hero_damage_received"], keyof {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[]>]: never; };
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[] & ({
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            } & {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            } & { [K_32 in Exclude<keyof I_1["players"][number]["hero_damage_dealt"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_33 in Exclude<keyof I_1["players"][number]["hero_damage_dealt"], keyof {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[]>]: never; };
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[] & number[] & { [K_34 in Exclude<keyof I_1["players"][number]["ability_draft_abilities"], keyof number[]>]: never; };
        } & { [K_35 in Exclude<keyof I_1["players"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer>]: never; })[] & { [K_36 in Exclude<keyof I_1["players"], keyof {
            steam_id?: string;
            hero_id?: number;
            items?: number[];
            item_purchase_times?: number[];
            gold?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            leaver_status?: number;
            last_hits?: number;
            denies?: number;
            gold_per_min?: number;
            xp_per_minute?: number;
            gold_spent?: number;
            level?: number;
            scaled_hero_damage?: number;
            scaled_tower_damage?: number;
            scaled_hero_healing?: number;
            time_last_seen?: number;
            support_ability_value?: number;
            party_id?: string;
            claimed_farm_gold?: number;
            support_gold?: number;
            claimed_denies?: number;
            claimed_misses?: number;
            misses?: number;
            net_worth?: number;
            hero_damage?: number;
            tower_damage?: number;
            hero_healing?: number;
            ability_upgrades?: {
                ability?: number;
                time?: number;
            }[];
            additional_units_inventory?: {
                unit_name?: string;
                items?: number[];
            }[];
            permanent_buffs?: {
                permanent_buff?: number;
                stack_count?: number;
                grant_time?: number;
            }[];
            custom_game_data?: {
                dota_team?: number;
                winner?: boolean;
            };
            match_player_flags?: number;
            talent_ability_ids?: number[];
            hero_pick_order?: number;
            hero_was_randomed?: boolean;
            hero_was_dota_plus_suggestion?: boolean;
            lane?: number;
            is_using_plus_guide?: boolean;
            hero_damage_received?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            hero_damage_dealt?: {
                pre_reduction?: number;
                post_reduction?: number;
                damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
            }[];
            seconds_dead?: number;
            gold_lost_to_death?: number;
            command_count?: number;
            mouse_click_cast_command_count?: number;
            teleports_used?: number;
            cavern_crawl_preferred_map_variant?: number;
            bounty_runes?: number;
            outposts_captured?: number;
            dewards?: number;
            wards_placed?: number;
            camps_stacked?: number;
            player_slot?: number;
            predicted_position?: number;
            lane_outcomes?: number;
            friendly_t1_destroyed_time?: number;
            enemy_t1_destroyed_time?: number;
            friendly_roshan_kills?: number;
            enemy_roshan_kills?: number;
            power_runes?: number;
            water_runes?: number;
            stun_duration?: number;
            team_number?: DOTA_GC_TEAM;
            team_slot?: number;
            time_purchased_shard?: number;
            time_purchased_aghs?: number;
            ability_draft_abilities?: number[];
        }[]>]: never; };
    } & { [K_37 in Exclude<keyof I_1, "players">]: never; }>(object: I_1): CMsgGameMatchSignOut_CTeam;
};
export declare const CMsgGameMatchSignOut_CTeam_CPlayer: {
    fromJSON(object: any): CMsgGameMatchSignOut_CTeam_CPlayer;
    toJSON(message: CMsgGameMatchSignOut_CTeam_CPlayer): unknown;
    create<I extends {
        steam_id?: string;
        hero_id?: number;
        items?: number[];
        item_purchase_times?: number[];
        gold?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        leaver_status?: number;
        last_hits?: number;
        denies?: number;
        gold_per_min?: number;
        xp_per_minute?: number;
        gold_spent?: number;
        level?: number;
        scaled_hero_damage?: number;
        scaled_tower_damage?: number;
        scaled_hero_healing?: number;
        time_last_seen?: number;
        support_ability_value?: number;
        party_id?: string;
        claimed_farm_gold?: number;
        support_gold?: number;
        claimed_denies?: number;
        claimed_misses?: number;
        misses?: number;
        net_worth?: number;
        hero_damage?: number;
        tower_damage?: number;
        hero_healing?: number;
        ability_upgrades?: {
            ability?: number;
            time?: number;
        }[];
        additional_units_inventory?: {
            unit_name?: string;
            items?: number[];
        }[];
        permanent_buffs?: {
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        }[];
        custom_game_data?: {
            dota_team?: number;
            winner?: boolean;
        };
        match_player_flags?: number;
        talent_ability_ids?: number[];
        hero_pick_order?: number;
        hero_was_randomed?: boolean;
        hero_was_dota_plus_suggestion?: boolean;
        lane?: number;
        is_using_plus_guide?: boolean;
        hero_damage_received?: {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[];
        hero_damage_dealt?: {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[];
        seconds_dead?: number;
        gold_lost_to_death?: number;
        command_count?: number;
        mouse_click_cast_command_count?: number;
        teleports_used?: number;
        cavern_crawl_preferred_map_variant?: number;
        bounty_runes?: number;
        outposts_captured?: number;
        dewards?: number;
        wards_placed?: number;
        camps_stacked?: number;
        player_slot?: number;
        predicted_position?: number;
        lane_outcomes?: number;
        friendly_t1_destroyed_time?: number;
        enemy_t1_destroyed_time?: number;
        friendly_roshan_kills?: number;
        enemy_roshan_kills?: number;
        power_runes?: number;
        water_runes?: number;
        stun_duration?: number;
        team_number?: DOTA_GC_TEAM;
        team_slot?: number;
        time_purchased_shard?: number;
        time_purchased_aghs?: number;
        ability_draft_abilities?: number[];
    } & {
        steam_id?: string;
        hero_id?: number;
        items?: number[] & number[] & { [K in Exclude<keyof I["items"], keyof number[]>]: never; };
        item_purchase_times?: number[] & number[] & { [K_1 in Exclude<keyof I["item_purchase_times"], keyof number[]>]: never; };
        gold?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        leaver_status?: number;
        last_hits?: number;
        denies?: number;
        gold_per_min?: number;
        xp_per_minute?: number;
        gold_spent?: number;
        level?: number;
        scaled_hero_damage?: number;
        scaled_tower_damage?: number;
        scaled_hero_healing?: number;
        time_last_seen?: number;
        support_ability_value?: number;
        party_id?: string;
        claimed_farm_gold?: number;
        support_gold?: number;
        claimed_denies?: number;
        claimed_misses?: number;
        misses?: number;
        net_worth?: number;
        hero_damage?: number;
        tower_damage?: number;
        hero_healing?: number;
        ability_upgrades?: {
            ability?: number;
            time?: number;
        }[] & ({
            ability?: number;
            time?: number;
        } & {
            ability?: number;
            time?: number;
        } & { [K_2 in Exclude<keyof I["ability_upgrades"][number], keyof CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_3 in Exclude<keyof I["ability_upgrades"], keyof {
            ability?: number;
            time?: number;
        }[]>]: never; };
        additional_units_inventory?: {
            unit_name?: string;
            items?: number[];
        }[] & ({
            unit_name?: string;
            items?: number[];
        } & {
            unit_name?: string;
            items?: number[] & number[] & { [K_4 in Exclude<keyof I["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
        } & { [K_5 in Exclude<keyof I["additional_units_inventory"][number], keyof CMatchAdditionalUnitInventory>]: never; })[] & { [K_6 in Exclude<keyof I["additional_units_inventory"], keyof {
            unit_name?: string;
            items?: number[];
        }[]>]: never; };
        permanent_buffs?: {
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        }[] & ({
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        } & {
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        } & { [K_7 in Exclude<keyof I["permanent_buffs"][number], keyof CMatchPlayerPermanentBuff>]: never; })[] & { [K_8 in Exclude<keyof I["permanent_buffs"], keyof {
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        }[]>]: never; };
        custom_game_data?: {
            dota_team?: number;
            winner?: boolean;
        } & {
            dota_team?: number;
            winner?: boolean;
        } & { [K_9 in Exclude<keyof I["custom_game_data"], keyof CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>]: never; };
        match_player_flags?: number;
        talent_ability_ids?: number[] & number[] & { [K_10 in Exclude<keyof I["talent_ability_ids"], keyof number[]>]: never; };
        hero_pick_order?: number;
        hero_was_randomed?: boolean;
        hero_was_dota_plus_suggestion?: boolean;
        lane?: number;
        is_using_plus_guide?: boolean;
        hero_damage_received?: {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[] & ({
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        } & {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        } & { [K_11 in Exclude<keyof I["hero_damage_received"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_12 in Exclude<keyof I["hero_damage_received"], keyof {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[]>]: never; };
        hero_damage_dealt?: {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[] & ({
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        } & {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        } & { [K_13 in Exclude<keyof I["hero_damage_dealt"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_14 in Exclude<keyof I["hero_damage_dealt"], keyof {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[]>]: never; };
        seconds_dead?: number;
        gold_lost_to_death?: number;
        command_count?: number;
        mouse_click_cast_command_count?: number;
        teleports_used?: number;
        cavern_crawl_preferred_map_variant?: number;
        bounty_runes?: number;
        outposts_captured?: number;
        dewards?: number;
        wards_placed?: number;
        camps_stacked?: number;
        player_slot?: number;
        predicted_position?: number;
        lane_outcomes?: number;
        friendly_t1_destroyed_time?: number;
        enemy_t1_destroyed_time?: number;
        friendly_roshan_kills?: number;
        enemy_roshan_kills?: number;
        power_runes?: number;
        water_runes?: number;
        stun_duration?: number;
        team_number?: DOTA_GC_TEAM;
        team_slot?: number;
        time_purchased_shard?: number;
        time_purchased_aghs?: number;
        ability_draft_abilities?: number[] & number[] & { [K_15 in Exclude<keyof I["ability_draft_abilities"], keyof number[]>]: never; };
    } & { [K_16 in Exclude<keyof I, keyof CMsgGameMatchSignOut_CTeam_CPlayer>]: never; }>(base?: I): CMsgGameMatchSignOut_CTeam_CPlayer;
    fromPartial<I_1 extends {
        steam_id?: string;
        hero_id?: number;
        items?: number[];
        item_purchase_times?: number[];
        gold?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        leaver_status?: number;
        last_hits?: number;
        denies?: number;
        gold_per_min?: number;
        xp_per_minute?: number;
        gold_spent?: number;
        level?: number;
        scaled_hero_damage?: number;
        scaled_tower_damage?: number;
        scaled_hero_healing?: number;
        time_last_seen?: number;
        support_ability_value?: number;
        party_id?: string;
        claimed_farm_gold?: number;
        support_gold?: number;
        claimed_denies?: number;
        claimed_misses?: number;
        misses?: number;
        net_worth?: number;
        hero_damage?: number;
        tower_damage?: number;
        hero_healing?: number;
        ability_upgrades?: {
            ability?: number;
            time?: number;
        }[];
        additional_units_inventory?: {
            unit_name?: string;
            items?: number[];
        }[];
        permanent_buffs?: {
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        }[];
        custom_game_data?: {
            dota_team?: number;
            winner?: boolean;
        };
        match_player_flags?: number;
        talent_ability_ids?: number[];
        hero_pick_order?: number;
        hero_was_randomed?: boolean;
        hero_was_dota_plus_suggestion?: boolean;
        lane?: number;
        is_using_plus_guide?: boolean;
        hero_damage_received?: {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[];
        hero_damage_dealt?: {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[];
        seconds_dead?: number;
        gold_lost_to_death?: number;
        command_count?: number;
        mouse_click_cast_command_count?: number;
        teleports_used?: number;
        cavern_crawl_preferred_map_variant?: number;
        bounty_runes?: number;
        outposts_captured?: number;
        dewards?: number;
        wards_placed?: number;
        camps_stacked?: number;
        player_slot?: number;
        predicted_position?: number;
        lane_outcomes?: number;
        friendly_t1_destroyed_time?: number;
        enemy_t1_destroyed_time?: number;
        friendly_roshan_kills?: number;
        enemy_roshan_kills?: number;
        power_runes?: number;
        water_runes?: number;
        stun_duration?: number;
        team_number?: DOTA_GC_TEAM;
        team_slot?: number;
        time_purchased_shard?: number;
        time_purchased_aghs?: number;
        ability_draft_abilities?: number[];
    } & {
        steam_id?: string;
        hero_id?: number;
        items?: number[] & number[] & { [K_17 in Exclude<keyof I_1["items"], keyof number[]>]: never; };
        item_purchase_times?: number[] & number[] & { [K_18 in Exclude<keyof I_1["item_purchase_times"], keyof number[]>]: never; };
        gold?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        leaver_status?: number;
        last_hits?: number;
        denies?: number;
        gold_per_min?: number;
        xp_per_minute?: number;
        gold_spent?: number;
        level?: number;
        scaled_hero_damage?: number;
        scaled_tower_damage?: number;
        scaled_hero_healing?: number;
        time_last_seen?: number;
        support_ability_value?: number;
        party_id?: string;
        claimed_farm_gold?: number;
        support_gold?: number;
        claimed_denies?: number;
        claimed_misses?: number;
        misses?: number;
        net_worth?: number;
        hero_damage?: number;
        tower_damage?: number;
        hero_healing?: number;
        ability_upgrades?: {
            ability?: number;
            time?: number;
        }[] & ({
            ability?: number;
            time?: number;
        } & {
            ability?: number;
            time?: number;
        } & { [K_19 in Exclude<keyof I_1["ability_upgrades"][number], keyof CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_20 in Exclude<keyof I_1["ability_upgrades"], keyof {
            ability?: number;
            time?: number;
        }[]>]: never; };
        additional_units_inventory?: {
            unit_name?: string;
            items?: number[];
        }[] & ({
            unit_name?: string;
            items?: number[];
        } & {
            unit_name?: string;
            items?: number[] & number[] & { [K_21 in Exclude<keyof I_1["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
        } & { [K_22 in Exclude<keyof I_1["additional_units_inventory"][number], keyof CMatchAdditionalUnitInventory>]: never; })[] & { [K_23 in Exclude<keyof I_1["additional_units_inventory"], keyof {
            unit_name?: string;
            items?: number[];
        }[]>]: never; };
        permanent_buffs?: {
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        }[] & ({
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        } & {
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        } & { [K_24 in Exclude<keyof I_1["permanent_buffs"][number], keyof CMatchPlayerPermanentBuff>]: never; })[] & { [K_25 in Exclude<keyof I_1["permanent_buffs"], keyof {
            permanent_buff?: number;
            stack_count?: number;
            grant_time?: number;
        }[]>]: never; };
        custom_game_data?: {
            dota_team?: number;
            winner?: boolean;
        } & {
            dota_team?: number;
            winner?: boolean;
        } & { [K_26 in Exclude<keyof I_1["custom_game_data"], keyof CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>]: never; };
        match_player_flags?: number;
        talent_ability_ids?: number[] & number[] & { [K_27 in Exclude<keyof I_1["talent_ability_ids"], keyof number[]>]: never; };
        hero_pick_order?: number;
        hero_was_randomed?: boolean;
        hero_was_dota_plus_suggestion?: boolean;
        lane?: number;
        is_using_plus_guide?: boolean;
        hero_damage_received?: {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[] & ({
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        } & {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        } & { [K_28 in Exclude<keyof I_1["hero_damage_received"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_29 in Exclude<keyof I_1["hero_damage_received"], keyof {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[]>]: never; };
        hero_damage_dealt?: {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[] & ({
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        } & {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        } & { [K_30 in Exclude<keyof I_1["hero_damage_dealt"][number], keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; })[] & { [K_31 in Exclude<keyof I_1["hero_damage_dealt"], keyof {
            pre_reduction?: number;
            post_reduction?: number;
            damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
        }[]>]: never; };
        seconds_dead?: number;
        gold_lost_to_death?: number;
        command_count?: number;
        mouse_click_cast_command_count?: number;
        teleports_used?: number;
        cavern_crawl_preferred_map_variant?: number;
        bounty_runes?: number;
        outposts_captured?: number;
        dewards?: number;
        wards_placed?: number;
        camps_stacked?: number;
        player_slot?: number;
        predicted_position?: number;
        lane_outcomes?: number;
        friendly_t1_destroyed_time?: number;
        enemy_t1_destroyed_time?: number;
        friendly_roshan_kills?: number;
        enemy_roshan_kills?: number;
        power_runes?: number;
        water_runes?: number;
        stun_duration?: number;
        team_number?: DOTA_GC_TEAM;
        team_slot?: number;
        time_purchased_shard?: number;
        time_purchased_aghs?: number;
        ability_draft_abilities?: number[] & number[] & { [K_32 in Exclude<keyof I_1["ability_draft_abilities"], keyof number[]>]: never; };
    } & { [K_33 in Exclude<keyof I_1, keyof CMsgGameMatchSignOut_CTeam_CPlayer>]: never; }>(object: I_1): CMsgGameMatchSignOut_CTeam_CPlayer;
};
export declare const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData: {
    fromJSON(object: any): CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData;
    toJSON(message: CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData): unknown;
    create<I extends {
        dota_team?: number;
        winner?: boolean;
    } & {
        dota_team?: number;
        winner?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>]: never; }>(base?: I): CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData;
    fromPartial<I_1 extends {
        dota_team?: number;
        winner?: boolean;
    } & {
        dota_team?: number;
        winner?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>]: never; }>(object: I_1): CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData;
};
export declare const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived: {
    fromJSON(object: any): CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived;
    toJSON(message: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived): unknown;
    create<I extends {
        pre_reduction?: number;
        post_reduction?: number;
        damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
    } & {
        pre_reduction?: number;
        post_reduction?: number;
        damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; }>(base?: I): CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived;
    fromPartial<I_1 extends {
        pre_reduction?: number;
        post_reduction?: number;
        damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
    } & {
        pre_reduction?: number;
        post_reduction?: number;
        damage_type?: CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>]: never; }>(object: I_1): CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived;
};
export declare const CMsgGameMatchSignOut_CAdditionalSignoutMsg: {
    fromJSON(object: any): CMsgGameMatchSignOut_CAdditionalSignoutMsg;
    toJSON(message: CMsgGameMatchSignOut_CAdditionalSignoutMsg): unknown;
    create<I extends {
        id?: number;
        contents?: string;
    } & {
        id?: number;
        contents?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOut_CAdditionalSignoutMsg>]: never; }>(base?: I): CMsgGameMatchSignOut_CAdditionalSignoutMsg;
    fromPartial<I_1 extends {
        id?: number;
        contents?: string;
    } & {
        id?: number;
        contents?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOut_CAdditionalSignoutMsg>]: never; }>(object: I_1): CMsgGameMatchSignOut_CAdditionalSignoutMsg;
};
export declare const CMsgGameMatchSignOut_CSocialFeedMatchEvent: {
    fromJSON(object: any): CMsgGameMatchSignOut_CSocialFeedMatchEvent;
    toJSON(message: CMsgGameMatchSignOut_CSocialFeedMatchEvent): unknown;
    create<I extends {
        account_id?: number;
        timestamp?: number;
        event_type?: number;
        game_time?: number;
        replay_time?: number;
    } & {
        account_id?: number;
        timestamp?: number;
        event_type?: number;
        game_time?: number;
        replay_time?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOut_CSocialFeedMatchEvent>]: never; }>(base?: I): CMsgGameMatchSignOut_CSocialFeedMatchEvent;
    fromPartial<I_1 extends {
        account_id?: number;
        timestamp?: number;
        event_type?: number;
        game_time?: number;
        replay_time?: number;
    } & {
        account_id?: number;
        timestamp?: number;
        event_type?: number;
        game_time?: number;
        replay_time?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOut_CSocialFeedMatchEvent>]: never; }>(object: I_1): CMsgGameMatchSignOut_CSocialFeedMatchEvent;
};
export declare const CMsgGameMatchSignOut_CCustomGameData: {
    fromJSON(object: any): CMsgGameMatchSignOut_CCustomGameData;
    toJSON(message: CMsgGameMatchSignOut_CCustomGameData): unknown;
    create<I extends {
        publish_timestamp?: number;
    } & {
        publish_timestamp?: number;
    } & { [K in Exclude<keyof I, "publish_timestamp">]: never; }>(base?: I): CMsgGameMatchSignOut_CCustomGameData;
    fromPartial<I_1 extends {
        publish_timestamp?: number;
    } & {
        publish_timestamp?: number;
    } & { [K_1 in Exclude<keyof I_1, "publish_timestamp">]: never; }>(object: I_1): CMsgGameMatchSignOut_CCustomGameData;
};
export declare const CMsgGameMatchSignOut_EventGameLeaderboardEntry: {
    fromJSON(object: any): CMsgGameMatchSignOut_EventGameLeaderboardEntry;
    toJSON(message: CMsgGameMatchSignOut_EventGameLeaderboardEntry): unknown;
    create<I extends {
        name_suffix?: string;
        score?: number;
        extra_data_1?: number;
        extra_data_2?: number;
        extra_data_3?: number;
        extra_data_4?: number;
        extra_data_5?: number;
    } & {
        name_suffix?: string;
        score?: number;
        extra_data_1?: number;
        extra_data_2?: number;
        extra_data_3?: number;
        extra_data_4?: number;
        extra_data_5?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOut_EventGameLeaderboardEntry>]: never; }>(base?: I): CMsgGameMatchSignOut_EventGameLeaderboardEntry;
    fromPartial<I_1 extends {
        name_suffix?: string;
        score?: number;
        extra_data_1?: number;
        extra_data_2?: number;
        extra_data_3?: number;
        extra_data_4?: number;
        extra_data_5?: number;
    } & {
        name_suffix?: string;
        score?: number;
        extra_data_1?: number;
        extra_data_2?: number;
        extra_data_3?: number;
        extra_data_4?: number;
        extra_data_5?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOut_EventGameLeaderboardEntry>]: never; }>(object: I_1): CMsgGameMatchSignOut_EventGameLeaderboardEntry;
};
export declare const CMsgGameMatchSignOut_WardPlacement: {
    fromJSON(object: any): CMsgGameMatchSignOut_WardPlacement;
    toJSON(message: CMsgGameMatchSignOut_WardPlacement): unknown;
    create<I extends {
        player_id?: number;
        team_id?: number;
        placed_time?: number;
        building_state?: number;
        creep_state?: number;
        roshan_alive?: boolean;
        position_x?: number;
        position_y?: number;
    } & {
        player_id?: number;
        team_id?: number;
        placed_time?: number;
        building_state?: number;
        creep_state?: number;
        roshan_alive?: boolean;
        position_x?: number;
        position_y?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOut_WardPlacement>]: never; }>(base?: I): CMsgGameMatchSignOut_WardPlacement;
    fromPartial<I_1 extends {
        player_id?: number;
        team_id?: number;
        placed_time?: number;
        building_state?: number;
        creep_state?: number;
        roshan_alive?: boolean;
        position_x?: number;
        position_y?: number;
    } & {
        player_id?: number;
        team_id?: number;
        placed_time?: number;
        building_state?: number;
        creep_state?: number;
        roshan_alive?: boolean;
        position_x?: number;
        position_y?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOut_WardPlacement>]: never; }>(object: I_1): CMsgGameMatchSignOut_WardPlacement;
};
export declare const CMsgSignOutDraftInfo: {
    fromJSON(object: any): CMsgSignOutDraftInfo;
    toJSON(message: CMsgSignOutDraftInfo): unknown;
    create<I extends {
        radiant_captain_account_id?: number;
        dire_captain_account_id?: number;
        picks_bans?: {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[];
    } & {
        radiant_captain_account_id?: number;
        dire_captain_account_id?: number;
        picks_bans?: {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[] & ({
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        } & {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        } & { [K in Exclude<keyof I["picks_bans"][number], keyof CMatchHeroSelectEvent>]: never; })[] & { [K_1 in Exclude<keyof I["picks_bans"], keyof {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgSignOutDraftInfo>]: never; }>(base?: I): CMsgSignOutDraftInfo;
    fromPartial<I_1 extends {
        radiant_captain_account_id?: number;
        dire_captain_account_id?: number;
        picks_bans?: {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[];
    } & {
        radiant_captain_account_id?: number;
        dire_captain_account_id?: number;
        picks_bans?: {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[] & ({
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        } & {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        } & { [K_3 in Exclude<keyof I_1["picks_bans"][number], keyof CMatchHeroSelectEvent>]: never; })[] & { [K_4 in Exclude<keyof I_1["picks_bans"], keyof {
            is_pick?: boolean;
            team?: number;
            hero_id?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSignOutDraftInfo>]: never; }>(object: I_1): CMsgSignOutDraftInfo;
};
export declare const CMsgSignOutBotInfo: {
    fromJSON(object: any): CMsgSignOutBotInfo;
    toJSON(message: CMsgSignOutBotInfo): unknown;
    create<I extends {
        allow_cheats?: boolean;
        bot_difficulty_radiant?: DOTABotDifficulty;
        created_lobby?: boolean;
        bot_difficulty_dire?: DOTABotDifficulty;
    } & {
        allow_cheats?: boolean;
        bot_difficulty_radiant?: DOTABotDifficulty;
        created_lobby?: boolean;
        bot_difficulty_dire?: DOTABotDifficulty;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutBotInfo>]: never; }>(base?: I): CMsgSignOutBotInfo;
    fromPartial<I_1 extends {
        allow_cheats?: boolean;
        bot_difficulty_radiant?: DOTABotDifficulty;
        created_lobby?: boolean;
        bot_difficulty_dire?: DOTABotDifficulty;
    } & {
        allow_cheats?: boolean;
        bot_difficulty_radiant?: DOTABotDifficulty;
        created_lobby?: boolean;
        bot_difficulty_dire?: DOTABotDifficulty;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutBotInfo>]: never; }>(object: I_1): CMsgSignOutBotInfo;
};
export declare const CMsgSignOutTextMuteInfo: {
    fromJSON(object: any): CMsgSignOutTextMuteInfo;
    toJSON(message: CMsgSignOutTextMuteInfo): unknown;
    create<I extends {
        text_mute_messages?: {
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        }[];
    } & {
        text_mute_messages?: {
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        }[] & ({
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        } & {
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        } & { [K in Exclude<keyof I["text_mute_messages"][number], keyof CMsgSignOutTextMuteInfo_TextMuteMessage>]: never; })[] & { [K_1 in Exclude<keyof I["text_mute_messages"], keyof {
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "text_mute_messages">]: never; }>(base?: I): CMsgSignOutTextMuteInfo;
    fromPartial<I_1 extends {
        text_mute_messages?: {
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        }[];
    } & {
        text_mute_messages?: {
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        }[] & ({
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        } & {
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        } & { [K_3 in Exclude<keyof I_1["text_mute_messages"][number], keyof CMsgSignOutTextMuteInfo_TextMuteMessage>]: never; })[] & { [K_4 in Exclude<keyof I_1["text_mute_messages"], keyof {
            region?: number;
            caused_text_mute?: boolean;
            chat_message?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "text_mute_messages">]: never; }>(object: I_1): CMsgSignOutTextMuteInfo;
};
export declare const CMsgSignOutTextMuteInfo_TextMuteMessage: {
    fromJSON(object: any): CMsgSignOutTextMuteInfo_TextMuteMessage;
    toJSON(message: CMsgSignOutTextMuteInfo_TextMuteMessage): unknown;
    create<I extends {
        region?: number;
        caused_text_mute?: boolean;
        chat_message?: string;
    } & {
        region?: number;
        caused_text_mute?: boolean;
        chat_message?: string;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutTextMuteInfo_TextMuteMessage>]: never; }>(base?: I): CMsgSignOutTextMuteInfo_TextMuteMessage;
    fromPartial<I_1 extends {
        region?: number;
        caused_text_mute?: boolean;
        chat_message?: string;
    } & {
        region?: number;
        caused_text_mute?: boolean;
        chat_message?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutTextMuteInfo_TextMuteMessage>]: never; }>(object: I_1): CMsgSignOutTextMuteInfo_TextMuteMessage;
};
export declare const CMsgSignOutPlayerStats: {
    fromJSON(object: any): CMsgSignOutPlayerStats;
    toJSON(message: CMsgSignOutPlayerStats): unknown;
    create<I extends {
        account_id?: number;
        match_id?: string;
        rank?: number;
        hero_id?: number;
        rampages?: number;
        triple_kills?: number;
        first_blood_claimed?: number;
        first_blood_given?: number;
        couriers_killed?: number;
        aegises_snatched?: number;
        cheeses_eaten?: number;
        creeps_stacked?: number;
        fight_score?: number;
        farm_score?: number;
        support_score?: number;
        push_score?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        last_hits?: number;
        denies?: number;
        gpm?: number;
        xppm?: number;
        net_worth?: number;
        damage?: number;
        heals?: number;
        rapiers_purchased?: number;
        observer_wards_placed?: number;
        wards_destroyed?: number;
        lobby_type?: number;
    } & {
        account_id?: number;
        match_id?: string;
        rank?: number;
        hero_id?: number;
        rampages?: number;
        triple_kills?: number;
        first_blood_claimed?: number;
        first_blood_given?: number;
        couriers_killed?: number;
        aegises_snatched?: number;
        cheeses_eaten?: number;
        creeps_stacked?: number;
        fight_score?: number;
        farm_score?: number;
        support_score?: number;
        push_score?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        last_hits?: number;
        denies?: number;
        gpm?: number;
        xppm?: number;
        net_worth?: number;
        damage?: number;
        heals?: number;
        rapiers_purchased?: number;
        observer_wards_placed?: number;
        wards_destroyed?: number;
        lobby_type?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutPlayerStats>]: never; }>(base?: I): CMsgSignOutPlayerStats;
    fromPartial<I_1 extends {
        account_id?: number;
        match_id?: string;
        rank?: number;
        hero_id?: number;
        rampages?: number;
        triple_kills?: number;
        first_blood_claimed?: number;
        first_blood_given?: number;
        couriers_killed?: number;
        aegises_snatched?: number;
        cheeses_eaten?: number;
        creeps_stacked?: number;
        fight_score?: number;
        farm_score?: number;
        support_score?: number;
        push_score?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        last_hits?: number;
        denies?: number;
        gpm?: number;
        xppm?: number;
        net_worth?: number;
        damage?: number;
        heals?: number;
        rapiers_purchased?: number;
        observer_wards_placed?: number;
        wards_destroyed?: number;
        lobby_type?: number;
    } & {
        account_id?: number;
        match_id?: string;
        rank?: number;
        hero_id?: number;
        rampages?: number;
        triple_kills?: number;
        first_blood_claimed?: number;
        first_blood_given?: number;
        couriers_killed?: number;
        aegises_snatched?: number;
        cheeses_eaten?: number;
        creeps_stacked?: number;
        fight_score?: number;
        farm_score?: number;
        support_score?: number;
        push_score?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        last_hits?: number;
        denies?: number;
        gpm?: number;
        xppm?: number;
        net_worth?: number;
        damage?: number;
        heals?: number;
        rapiers_purchased?: number;
        observer_wards_placed?: number;
        wards_destroyed?: number;
        lobby_type?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutPlayerStats>]: never; }>(object: I_1): CMsgSignOutPlayerStats;
};
export declare const CMsgSignOutCommunicationSummary: {
    fromJSON(object: any): CMsgSignOutCommunicationSummary;
    toJSON(message: CMsgSignOutCommunicationSummary): unknown;
    create<I extends {
        players?: {
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[];
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        }[];
    } & {
        players?: {
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[];
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        }[] & ({
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[];
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        } & {
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[] & ({
                type?: number;
                count?: number;
            } & {
                type?: number;
                count?: number;
            } & { [K in Exclude<keyof I["players"][number]["ping_details"][number], keyof CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>]: never; })[] & { [K_1 in Exclude<keyof I["players"][number]["ping_details"], keyof {
                type?: number;
                count?: number;
            }[]>]: never; };
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        } & { [K_2 in Exclude<keyof I["players"][number], keyof CMsgSignOutCommunicationSummary_PlayerCommunication>]: never; })[] & { [K_3 in Exclude<keyof I["players"], keyof {
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[];
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, "players">]: never; }>(base?: I): CMsgSignOutCommunicationSummary;
    fromPartial<I_1 extends {
        players?: {
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[];
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        }[];
    } & {
        players?: {
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[];
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        }[] & ({
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[];
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        } & {
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[] & ({
                type?: number;
                count?: number;
            } & {
                type?: number;
                count?: number;
            } & { [K_5 in Exclude<keyof I_1["players"][number]["ping_details"][number], keyof CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>]: never; })[] & { [K_6 in Exclude<keyof I_1["players"][number]["ping_details"], keyof {
                type?: number;
                count?: number;
            }[]>]: never; };
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        } & { [K_7 in Exclude<keyof I_1["players"][number], keyof CMsgSignOutCommunicationSummary_PlayerCommunication>]: never; })[] & { [K_8 in Exclude<keyof I_1["players"], keyof {
            account_id?: number;
            pings?: number;
            max_pings_per_interval?: number;
            teammate_pings?: number;
            max_teammate_pings_per_interval?: number;
            team_chat_messages?: number;
            all_chat_messages?: number;
            chat_wheel_messages?: number;
            pauses?: number;
            unpauses?: number;
            lines_drawn?: number;
            voice_chat_seconds?: number;
            chat_mutes?: number;
            voice_mutes?: number;
            ping_details?: {
                type?: number;
                count?: number;
            }[];
            comms_blocks_solo?: number;
            comms_blocks_mass?: number;
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, "players">]: never; }>(object: I_1): CMsgSignOutCommunicationSummary;
};
export declare const CMsgSignOutCommunicationSummary_PlayerCommunication: {
    fromJSON(object: any): CMsgSignOutCommunicationSummary_PlayerCommunication;
    toJSON(message: CMsgSignOutCommunicationSummary_PlayerCommunication): unknown;
    create<I extends {
        account_id?: number;
        pings?: number;
        max_pings_per_interval?: number;
        teammate_pings?: number;
        max_teammate_pings_per_interval?: number;
        team_chat_messages?: number;
        all_chat_messages?: number;
        chat_wheel_messages?: number;
        pauses?: number;
        unpauses?: number;
        lines_drawn?: number;
        voice_chat_seconds?: number;
        chat_mutes?: number;
        voice_mutes?: number;
        ping_details?: {
            type?: number;
            count?: number;
        }[];
        comms_blocks_solo?: number;
        comms_blocks_mass?: number;
    } & {
        account_id?: number;
        pings?: number;
        max_pings_per_interval?: number;
        teammate_pings?: number;
        max_teammate_pings_per_interval?: number;
        team_chat_messages?: number;
        all_chat_messages?: number;
        chat_wheel_messages?: number;
        pauses?: number;
        unpauses?: number;
        lines_drawn?: number;
        voice_chat_seconds?: number;
        chat_mutes?: number;
        voice_mutes?: number;
        ping_details?: {
            type?: number;
            count?: number;
        }[] & ({
            type?: number;
            count?: number;
        } & {
            type?: number;
            count?: number;
        } & { [K in Exclude<keyof I["ping_details"][number], keyof CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>]: never; })[] & { [K_1 in Exclude<keyof I["ping_details"], keyof {
            type?: number;
            count?: number;
        }[]>]: never; };
        comms_blocks_solo?: number;
        comms_blocks_mass?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgSignOutCommunicationSummary_PlayerCommunication>]: never; }>(base?: I): CMsgSignOutCommunicationSummary_PlayerCommunication;
    fromPartial<I_1 extends {
        account_id?: number;
        pings?: number;
        max_pings_per_interval?: number;
        teammate_pings?: number;
        max_teammate_pings_per_interval?: number;
        team_chat_messages?: number;
        all_chat_messages?: number;
        chat_wheel_messages?: number;
        pauses?: number;
        unpauses?: number;
        lines_drawn?: number;
        voice_chat_seconds?: number;
        chat_mutes?: number;
        voice_mutes?: number;
        ping_details?: {
            type?: number;
            count?: number;
        }[];
        comms_blocks_solo?: number;
        comms_blocks_mass?: number;
    } & {
        account_id?: number;
        pings?: number;
        max_pings_per_interval?: number;
        teammate_pings?: number;
        max_teammate_pings_per_interval?: number;
        team_chat_messages?: number;
        all_chat_messages?: number;
        chat_wheel_messages?: number;
        pauses?: number;
        unpauses?: number;
        lines_drawn?: number;
        voice_chat_seconds?: number;
        chat_mutes?: number;
        voice_mutes?: number;
        ping_details?: {
            type?: number;
            count?: number;
        }[] & ({
            type?: number;
            count?: number;
        } & {
            type?: number;
            count?: number;
        } & { [K_3 in Exclude<keyof I_1["ping_details"][number], keyof CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>]: never; })[] & { [K_4 in Exclude<keyof I_1["ping_details"], keyof {
            type?: number;
            count?: number;
        }[]>]: never; };
        comms_blocks_solo?: number;
        comms_blocks_mass?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSignOutCommunicationSummary_PlayerCommunication>]: never; }>(object: I_1): CMsgSignOutCommunicationSummary_PlayerCommunication;
};
export declare const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail: {
    fromJSON(object: any): CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail;
    toJSON(message: CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail): unknown;
    create<I extends {
        type?: number;
        count?: number;
    } & {
        type?: number;
        count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>]: never; }>(base?: I): CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail;
    fromPartial<I_1 extends {
        type?: number;
        count?: number;
    } & {
        type?: number;
        count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>]: never; }>(object: I_1): CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail;
};
export declare const CMsgGameMatchSignoutResponse: {
    fromJSON(object: any): CMsgGameMatchSignoutResponse;
    toJSON(message: CMsgGameMatchSignoutResponse): unknown;
    create<I extends {
        match_id?: string;
        replay_salt?: number;
        timed_reward_details?: {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[];
        xp_reward_details?: {
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[];
            enabled_hero_id?: number[];
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[];
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[];
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[];
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        }[];
        leagueid?: number;
        metadata_private_key?: number;
        match_details?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: import("./dota_shared_enums").DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        };
        players_metadata?: {
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        }[];
        mvp_data?: {
            mvps?: {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            }[];
        };
        ow_private_key?: string;
        ow_salt?: number;
        ow_replay_id?: string;
    } & {
        match_id?: string;
        replay_salt?: number;
        timed_reward_details?: {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[] & ({
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        } & {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        } & { [K in Exclude<keyof I["timed_reward_details"][number], keyof CLobbyTimedRewardDetails>]: never; })[] & { [K_1 in Exclude<keyof I["timed_reward_details"], keyof {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[]>]: never; };
        xp_reward_details?: {
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[];
            enabled_hero_id?: number[];
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[];
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[];
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[];
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        }[] & ({
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[];
            enabled_hero_id?: number[];
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[];
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[];
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[];
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        } & {
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[] & number[] & { [K_2 in Exclude<keyof I["xp_reward_details"][number]["disabled_hero_id"], keyof number[]>]: never; };
            enabled_hero_id?: number[] & number[] & { [K_3 in Exclude<keyof I["xp_reward_details"][number]["enabled_hero_id"], keyof number[]>]: never; };
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[] & number[] & { [K_4 in Exclude<keyof I["xp_reward_details"][number]["coached_account_ids"], keyof number[]>]: never; };
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[] & number[] & { [K_5 in Exclude<keyof I["xp_reward_details"][number]["disabled_random_hero_bits"], keyof number[]>]: never; };
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[] & number[] & { [K_6 in Exclude<keyof I["xp_reward_details"][number]["custom_game_product_ids"], keyof number[]>]: never; };
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[] & ({
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            } & {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            } & { [K_7 in Exclude<keyof I["xp_reward_details"][number]["pending_awards"][number], keyof import("./dota_shared_enums").CMsgPendingEventAward>]: never; })[] & { [K_8 in Exclude<keyof I["xp_reward_details"][number]["pending_awards"], keyof {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[]>]: never; };
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[] & ({
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            } & {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            } & { [K_9 in Exclude<keyof I["xp_reward_details"][number]["pending_awards_on_victory"][number], keyof import("./dota_shared_enums").CMsgPendingEventAward>]: never; })[] & { [K_10 in Exclude<keyof I["xp_reward_details"][number]["pending_awards_on_victory"], keyof {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[]>]: never; };
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        } & { [K_11 in Exclude<keyof I["xp_reward_details"][number], keyof CSODOTALobbyMember>]: never; })[] & { [K_12 in Exclude<keyof I["xp_reward_details"], keyof {
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[];
            enabled_hero_id?: number[];
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[];
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[];
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[];
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        }[]>]: never; };
        leagueid?: number;
        metadata_private_key?: number;
        match_details?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: import("./dota_shared_enums").DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        } & {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            }[] & ({
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            } & {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K_13 in Exclude<keyof I["match_details"]["players"][number]["ability_upgrades"][number], keyof CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_14 in Exclude<keyof I["match_details"]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_15 in Exclude<keyof I["match_details"]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_16 in Exclude<keyof I["match_details"]["players"][number]["additional_units_inventory"][number], keyof CMatchAdditionalUnitInventory>]: never; })[] & { [K_17 in Exclude<keyof I["match_details"]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_18 in Exclude<keyof I["match_details"]["players"][number]["permanent_buffs"][number], keyof CMatchPlayerPermanentBuff>]: never; })[] & { [K_19 in Exclude<keyof I["match_details"]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_20 in Exclude<keyof I["match_details"]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_21 in Exclude<keyof I["match_details"]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_22 in Exclude<keyof I["match_details"]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_23 in Exclude<keyof I["match_details"]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_24 in Exclude<keyof I["match_details"]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            } & { [K_25 in Exclude<keyof I["match_details"]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_26 in Exclude<keyof I["match_details"]["players"], keyof {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            }[]>]: never; };
            match_id?: string;
            tower_status?: number[] & number[] & { [K_27 in Exclude<keyof I["match_details"]["tower_status"], keyof number[]>]: never; };
            barracks_status?: number[] & number[] & { [K_28 in Exclude<keyof I["match_details"]["barracks_status"], keyof number[]>]: never; };
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: import("./dota_shared_enums").DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[] & ({
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & { [K_29 in Exclude<keyof I["match_details"]["picks_bans"][number], keyof CMatchHeroSelectEvent>]: never; })[] & { [K_30 in Exclude<keyof I["match_details"]["picks_bans"], keyof {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[]>]: never; };
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[] & ({
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            } & {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[] & ({
                    account_id?: number;
                    name?: string;
                } & {
                    account_id?: number;
                    name?: string;
                } & { [K_31 in Exclude<keyof I["match_details"]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_32 in Exclude<keyof I["match_details"]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                    account_id?: number;
                    name?: string;
                }[]>]: never; };
                language_code?: string;
            } & { [K_33 in Exclude<keyof I["match_details"]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_34 in Exclude<keyof I["match_details"]["broadcaster_channels"], keyof {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[]>]: never; };
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            } & {
                custom_game_id?: string;
                map_name?: string;
            } & { [K_35 in Exclude<keyof I["match_details"]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[] & ({
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & { [K_36 in Exclude<keyof I["match_details"]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_37 in Exclude<keyof I["match_details"]["coaches"], keyof {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[]>]: never; };
        } & { [K_38 in Exclude<keyof I["match_details"], keyof CMsgDOTAMatch>]: never; };
        players_metadata?: {
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        }[] & ({
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        } & {
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        } & { [K_39 in Exclude<keyof I["players_metadata"][number], keyof CMsgGameMatchSignoutResponse_PlayerMetadata>]: never; })[] & { [K_40 in Exclude<keyof I["players_metadata"], keyof {
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        }[]>]: never; };
        mvp_data?: {
            mvps?: {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            }[];
        } & {
            mvps?: {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            }[] & ({
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            } & {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[] & ({
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                } & {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                } & { [K_41 in Exclude<keyof I["mvp_data"]["mvps"][number]["accolades"][number], keyof import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade>]: never; })[] & { [K_42 in Exclude<keyof I["mvp_data"]["mvps"][number]["accolades"], keyof {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[]>]: never; };
            } & { [K_43 in Exclude<keyof I["mvp_data"]["mvps"][number], keyof import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum>]: never; })[] & { [K_44 in Exclude<keyof I["mvp_data"]["mvps"], keyof {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            }[]>]: never; };
        } & { [K_45 in Exclude<keyof I["mvp_data"], "mvps">]: never; };
        ow_private_key?: string;
        ow_salt?: number;
        ow_replay_id?: string;
    } & { [K_46 in Exclude<keyof I, keyof CMsgGameMatchSignoutResponse>]: never; }>(base?: I): CMsgGameMatchSignoutResponse;
    fromPartial<I_1 extends {
        match_id?: string;
        replay_salt?: number;
        timed_reward_details?: {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[];
        xp_reward_details?: {
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[];
            enabled_hero_id?: number[];
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[];
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[];
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[];
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        }[];
        leagueid?: number;
        metadata_private_key?: number;
        match_details?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: import("./dota_shared_enums").DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        };
        players_metadata?: {
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        }[];
        mvp_data?: {
            mvps?: {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            }[];
        };
        ow_private_key?: string;
        ow_salt?: number;
        ow_replay_id?: string;
    } & {
        match_id?: string;
        replay_salt?: number;
        timed_reward_details?: {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[] & ({
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        } & {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        } & { [K_47 in Exclude<keyof I_1["timed_reward_details"][number], keyof CLobbyTimedRewardDetails>]: never; })[] & { [K_48 in Exclude<keyof I_1["timed_reward_details"], keyof {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[]>]: never; };
        xp_reward_details?: {
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[];
            enabled_hero_id?: number[];
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[];
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[];
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[];
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        }[] & ({
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[];
            enabled_hero_id?: number[];
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[];
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[];
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[];
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        } & {
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[] & number[] & { [K_49 in Exclude<keyof I_1["xp_reward_details"][number]["disabled_hero_id"], keyof number[]>]: never; };
            enabled_hero_id?: number[] & number[] & { [K_50 in Exclude<keyof I_1["xp_reward_details"][number]["enabled_hero_id"], keyof number[]>]: never; };
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[] & number[] & { [K_51 in Exclude<keyof I_1["xp_reward_details"][number]["coached_account_ids"], keyof number[]>]: never; };
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[] & number[] & { [K_52 in Exclude<keyof I_1["xp_reward_details"][number]["disabled_random_hero_bits"], keyof number[]>]: never; };
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[] & number[] & { [K_53 in Exclude<keyof I_1["xp_reward_details"][number]["custom_game_product_ids"], keyof number[]>]: never; };
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[] & ({
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            } & {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            } & { [K_54 in Exclude<keyof I_1["xp_reward_details"][number]["pending_awards"][number], keyof import("./dota_shared_enums").CMsgPendingEventAward>]: never; })[] & { [K_55 in Exclude<keyof I_1["xp_reward_details"][number]["pending_awards"], keyof {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[]>]: never; };
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[] & ({
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            } & {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            } & { [K_56 in Exclude<keyof I_1["xp_reward_details"][number]["pending_awards_on_victory"][number], keyof import("./dota_shared_enums").CMsgPendingEventAward>]: never; })[] & { [K_57 in Exclude<keyof I_1["xp_reward_details"][number]["pending_awards_on_victory"], keyof {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[]>]: never; };
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        } & { [K_58 in Exclude<keyof I_1["xp_reward_details"][number], keyof CSODOTALobbyMember>]: never; })[] & { [K_59 in Exclude<keyof I_1["xp_reward_details"], keyof {
            id?: string;
            hero_id?: number;
            team?: DOTA_GC_TEAM;
            name?: string;
            slot?: number;
            party_id?: string;
            meta_level?: number;
            meta_xp?: number;
            meta_xp_awarded?: number;
            leaver_status?: DOTALeaverStatus_t;
            leaver_actions?: number;
            channel?: number;
            disabled_hero_id?: number[];
            enabled_hero_id?: number[];
            coach_team?: DOTA_GC_TEAM;
            coached_account_ids?: number[];
            coach_rating?: number;
            pwrd_cyber_cafe_id?: number;
            pwrd_cyber_cafe_name?: string;
            disabled_random_hero_bits?: number[];
            rank_change?: number;
            cameraman?: boolean;
            custom_game_product_ids?: number[];
            search_match_type?: import("./dota_shared_enums").MatchType;
            favorite_team_packed?: string;
            is_plus_subscriber?: boolean;
            lane_selection_flags?: number;
            can_earn_rewards?: boolean;
            live_spectator_team?: DOTA_GC_TEAM;
            was_mvp_last_game?: boolean;
            pending_awards?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            pending_awards_on_victory?: {
                event_id?: EEvent;
                action_id?: number;
                num_to_grant?: number;
                score_mode?: import("./dota_shared_enums").EEventActionScoreMode;
                audit_action?: number;
                audit_data?: string;
            }[];
            rank_mmr_boost_type?: import("./dota_shared_enums").EDOTAMMRBoostType;
            queue_point_adjustment?: number;
            rank_tier?: number;
            title?: number;
            guild_id?: number;
            reports_available?: number;
            is_steam_china?: boolean;
            live_spectator_account_id?: number;
            comms_reports_available?: number;
        }[]>]: never; };
        leagueid?: number;
        metadata_private_key?: number;
        match_details?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: import("./dota_shared_enums").DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        } & {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            }[] & ({
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            } & {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K_60 in Exclude<keyof I_1["match_details"]["players"][number]["ability_upgrades"][number], keyof CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_61 in Exclude<keyof I_1["match_details"]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_62 in Exclude<keyof I_1["match_details"]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_63 in Exclude<keyof I_1["match_details"]["players"][number]["additional_units_inventory"][number], keyof CMatchAdditionalUnitInventory>]: never; })[] & { [K_64 in Exclude<keyof I_1["match_details"]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_65 in Exclude<keyof I_1["match_details"]["players"][number]["permanent_buffs"][number], keyof CMatchPlayerPermanentBuff>]: never; })[] & { [K_66 in Exclude<keyof I_1["match_details"]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_67 in Exclude<keyof I_1["match_details"]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_68 in Exclude<keyof I_1["match_details"]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_69 in Exclude<keyof I_1["match_details"]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_70 in Exclude<keyof I_1["match_details"]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_71 in Exclude<keyof I_1["match_details"]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            } & { [K_72 in Exclude<keyof I_1["match_details"]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_73 in Exclude<keyof I_1["match_details"]["players"], keyof {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: DOTA_GC_TEAM;
                team_slot?: number;
            }[]>]: never; };
            match_id?: string;
            tower_status?: number[] & number[] & { [K_74 in Exclude<keyof I_1["match_details"]["tower_status"], keyof number[]>]: never; };
            barracks_status?: number[] & number[] & { [K_75 in Exclude<keyof I_1["match_details"]["barracks_status"], keyof number[]>]: never; };
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: import("./dota_shared_enums").DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[] & ({
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & { [K_76 in Exclude<keyof I_1["match_details"]["picks_bans"][number], keyof CMatchHeroSelectEvent>]: never; })[] & { [K_77 in Exclude<keyof I_1["match_details"]["picks_bans"], keyof {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[]>]: never; };
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[] & ({
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            } & {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[] & ({
                    account_id?: number;
                    name?: string;
                } & {
                    account_id?: number;
                    name?: string;
                } & { [K_78 in Exclude<keyof I_1["match_details"]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_79 in Exclude<keyof I_1["match_details"]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                    account_id?: number;
                    name?: string;
                }[]>]: never; };
                language_code?: string;
            } & { [K_80 in Exclude<keyof I_1["match_details"]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_81 in Exclude<keyof I_1["match_details"]["broadcaster_channels"], keyof {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[]>]: never; };
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            } & {
                custom_game_id?: string;
                map_name?: string;
            } & { [K_82 in Exclude<keyof I_1["match_details"]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[] & ({
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & { [K_83 in Exclude<keyof I_1["match_details"]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_84 in Exclude<keyof I_1["match_details"]["coaches"], keyof {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[]>]: never; };
        } & { [K_85 in Exclude<keyof I_1["match_details"], keyof CMsgDOTAMatch>]: never; };
        players_metadata?: {
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        }[] & ({
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        } & {
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        } & { [K_86 in Exclude<keyof I_1["players_metadata"][number], keyof CMsgGameMatchSignoutResponse_PlayerMetadata>]: never; })[] & { [K_87 in Exclude<keyof I_1["players_metadata"], keyof {
            hero_id?: number;
            avg_kills_x16?: number;
            avg_deaths_x16?: number;
            avg_assists_x16?: number;
            avg_gpm_x16?: number;
            avg_xpm_x16?: number;
            best_kills_x16?: number;
            best_assists_x16?: number;
            best_gpm_x16?: number;
            best_xpm_x16?: number;
            win_streak?: number;
            best_win_streak?: number;
            games_played?: number;
        }[]>]: never; };
        mvp_data?: {
            mvps?: {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            }[];
        } & {
            mvps?: {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            }[] & ({
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            } & {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[] & ({
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                } & {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                } & { [K_88 in Exclude<keyof I_1["mvp_data"]["mvps"][number]["accolades"][number], keyof import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade>]: never; })[] & { [K_89 in Exclude<keyof I_1["mvp_data"]["mvps"][number]["accolades"], keyof {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[]>]: never; };
            } & { [K_90 in Exclude<keyof I_1["mvp_data"]["mvps"][number], keyof import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum>]: never; })[] & { [K_91 in Exclude<keyof I_1["mvp_data"]["mvps"], keyof {
                player_slot?: number;
                accolades?: {
                    type?: import("./dota_gcmessages_common_match_management").CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType;
                    detail_value?: number;
                }[];
            }[]>]: never; };
        } & { [K_92 in Exclude<keyof I_1["mvp_data"], "mvps">]: never; };
        ow_private_key?: string;
        ow_salt?: number;
        ow_replay_id?: string;
    } & { [K_93 in Exclude<keyof I_1, keyof CMsgGameMatchSignoutResponse>]: never; }>(object: I_1): CMsgGameMatchSignoutResponse;
};
export declare const CMsgGameMatchSignoutResponse_PlayerMetadata: {
    fromJSON(object: any): CMsgGameMatchSignoutResponse_PlayerMetadata;
    toJSON(message: CMsgGameMatchSignoutResponse_PlayerMetadata): unknown;
    create<I extends {
        hero_id?: number;
        avg_kills_x16?: number;
        avg_deaths_x16?: number;
        avg_assists_x16?: number;
        avg_gpm_x16?: number;
        avg_xpm_x16?: number;
        best_kills_x16?: number;
        best_assists_x16?: number;
        best_gpm_x16?: number;
        best_xpm_x16?: number;
        win_streak?: number;
        best_win_streak?: number;
        games_played?: number;
    } & {
        hero_id?: number;
        avg_kills_x16?: number;
        avg_deaths_x16?: number;
        avg_assists_x16?: number;
        avg_gpm_x16?: number;
        avg_xpm_x16?: number;
        best_kills_x16?: number;
        best_assists_x16?: number;
        best_gpm_x16?: number;
        best_xpm_x16?: number;
        win_streak?: number;
        best_win_streak?: number;
        games_played?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignoutResponse_PlayerMetadata>]: never; }>(base?: I): CMsgGameMatchSignoutResponse_PlayerMetadata;
    fromPartial<I_1 extends {
        hero_id?: number;
        avg_kills_x16?: number;
        avg_deaths_x16?: number;
        avg_assists_x16?: number;
        avg_gpm_x16?: number;
        avg_xpm_x16?: number;
        best_kills_x16?: number;
        best_assists_x16?: number;
        best_gpm_x16?: number;
        best_xpm_x16?: number;
        win_streak?: number;
        best_win_streak?: number;
        games_played?: number;
    } & {
        hero_id?: number;
        avg_kills_x16?: number;
        avg_deaths_x16?: number;
        avg_assists_x16?: number;
        avg_gpm_x16?: number;
        avg_xpm_x16?: number;
        best_kills_x16?: number;
        best_assists_x16?: number;
        best_gpm_x16?: number;
        best_xpm_x16?: number;
        win_streak?: number;
        best_win_streak?: number;
        games_played?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignoutResponse_PlayerMetadata>]: never; }>(object: I_1): CMsgGameMatchSignoutResponse_PlayerMetadata;
};
export declare const CMsgTimedRewardContainer: {
    fromJSON(object: any): CMsgTimedRewardContainer;
    toJSON(message: CMsgTimedRewardContainer): unknown;
    create<I extends {
        timed_reward_details?: {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[];
    } & {
        timed_reward_details?: {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[] & ({
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        } & {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        } & { [K in Exclude<keyof I["timed_reward_details"][number], keyof CLobbyTimedRewardDetails>]: never; })[] & { [K_1 in Exclude<keyof I["timed_reward_details"], keyof {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "timed_reward_details">]: never; }>(base?: I): CMsgTimedRewardContainer;
    fromPartial<I_1 extends {
        timed_reward_details?: {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[];
    } & {
        timed_reward_details?: {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[] & ({
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        } & {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        } & { [K_3 in Exclude<keyof I_1["timed_reward_details"][number], keyof CLobbyTimedRewardDetails>]: never; })[] & { [K_4 in Exclude<keyof I_1["timed_reward_details"], keyof {
            item_def_index?: number;
            is_supply_crate?: boolean;
            is_timed_drop?: boolean;
            account_id?: number;
            origin?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "timed_reward_details">]: never; }>(object: I_1): CMsgTimedRewardContainer;
};
export declare const CMsgGameMatchSignOutPermissionRequest: {
    fromJSON(object: any): CMsgGameMatchSignOutPermissionRequest;
    toJSON(message: CMsgGameMatchSignOutPermissionRequest): unknown;
    create<I extends {
        server_version?: number;
        local_attempt?: number;
        total_attempt?: number;
        seconds_waited?: number;
    } & {
        server_version?: number;
        local_attempt?: number;
        total_attempt?: number;
        seconds_waited?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOutPermissionRequest>]: never; }>(base?: I): CMsgGameMatchSignOutPermissionRequest;
    fromPartial<I_1 extends {
        server_version?: number;
        local_attempt?: number;
        total_attempt?: number;
        seconds_waited?: number;
    } & {
        server_version?: number;
        local_attempt?: number;
        total_attempt?: number;
        seconds_waited?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOutPermissionRequest>]: never; }>(object: I_1): CMsgGameMatchSignOutPermissionRequest;
};
export declare const CMsgGameMatchSignOutPermissionResponse: {
    fromJSON(object: any): CMsgGameMatchSignOutPermissionResponse;
    toJSON(message: CMsgGameMatchSignOutPermissionResponse): unknown;
    create<I extends {
        permission_granted?: boolean;
        abandon_signout?: boolean;
        retry_delay_seconds?: number;
    } & {
        permission_granted?: boolean;
        abandon_signout?: boolean;
        retry_delay_seconds?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOutPermissionResponse>]: never; }>(base?: I): CMsgGameMatchSignOutPermissionResponse;
    fromPartial<I_1 extends {
        permission_granted?: boolean;
        abandon_signout?: boolean;
        retry_delay_seconds?: number;
    } & {
        permission_granted?: boolean;
        abandon_signout?: boolean;
        retry_delay_seconds?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOutPermissionResponse>]: never; }>(object: I_1): CMsgGameMatchSignOutPermissionResponse;
};
export declare const CMsgGameMatchSignOutEventGameData: {
    fromJSON(object: any): CMsgGameMatchSignOutEventGameData;
    toJSON(message: CMsgGameMatchSignOutEventGameData): unknown;
    create<I extends {
        event_id?: EEvent;
        game_name?: string;
        map_name?: string;
        event_game_data?: string;
        start_time?: number;
    } & {
        event_id?: EEvent;
        game_name?: string;
        map_name?: string;
        event_game_data?: string;
        start_time?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGameMatchSignOutEventGameData>]: never; }>(base?: I): CMsgGameMatchSignOutEventGameData;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        game_name?: string;
        map_name?: string;
        event_game_data?: string;
        start_time?: number;
    } & {
        event_id?: EEvent;
        game_name?: string;
        map_name?: string;
        event_game_data?: string;
        start_time?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGameMatchSignOutEventGameData>]: never; }>(object: I_1): CMsgGameMatchSignOutEventGameData;
};
export declare const CMsgGameMatchSignOutPerfData: {
    fromJSON(object: any): CMsgGameMatchSignOutPerfData;
    toJSON(message: CMsgGameMatchSignOutPerfData): unknown;
    create<I extends {
        average_frame_time?: number[];
        max_frame_time?: number[];
        server_average_frame_time?: number;
        server_max_frame_time?: number;
        average_compute_time?: number[];
        max_compute_time?: number[];
        average_client_tick_time?: number[];
        max_client_tick_time?: number[];
        average_client_simulate_time?: number[];
        max_client_simulate_time?: number[];
        average_output_time?: number[];
        max_output_time?: number[];
        average_wait_for_rendering_to_complete_time?: number[];
        max_wait_for_rendering_to_complete_time?: number[];
        average_swap_time?: number[];
        max_swap_time?: number[];
        average_frame_update_time?: number[];
        max_frame_update_time?: number[];
        average_idle_time?: number[];
        max_idle_time?: number[];
        average_input_processing_time?: number[];
        max_input_processing_time?: number[];
    } & {
        average_frame_time?: number[] & number[] & { [K in Exclude<keyof I["average_frame_time"], keyof number[]>]: never; };
        max_frame_time?: number[] & number[] & { [K_1 in Exclude<keyof I["max_frame_time"], keyof number[]>]: never; };
        server_average_frame_time?: number;
        server_max_frame_time?: number;
        average_compute_time?: number[] & number[] & { [K_2 in Exclude<keyof I["average_compute_time"], keyof number[]>]: never; };
        max_compute_time?: number[] & number[] & { [K_3 in Exclude<keyof I["max_compute_time"], keyof number[]>]: never; };
        average_client_tick_time?: number[] & number[] & { [K_4 in Exclude<keyof I["average_client_tick_time"], keyof number[]>]: never; };
        max_client_tick_time?: number[] & number[] & { [K_5 in Exclude<keyof I["max_client_tick_time"], keyof number[]>]: never; };
        average_client_simulate_time?: number[] & number[] & { [K_6 in Exclude<keyof I["average_client_simulate_time"], keyof number[]>]: never; };
        max_client_simulate_time?: number[] & number[] & { [K_7 in Exclude<keyof I["max_client_simulate_time"], keyof number[]>]: never; };
        average_output_time?: number[] & number[] & { [K_8 in Exclude<keyof I["average_output_time"], keyof number[]>]: never; };
        max_output_time?: number[] & number[] & { [K_9 in Exclude<keyof I["max_output_time"], keyof number[]>]: never; };
        average_wait_for_rendering_to_complete_time?: number[] & number[] & { [K_10 in Exclude<keyof I["average_wait_for_rendering_to_complete_time"], keyof number[]>]: never; };
        max_wait_for_rendering_to_complete_time?: number[] & number[] & { [K_11 in Exclude<keyof I["max_wait_for_rendering_to_complete_time"], keyof number[]>]: never; };
        average_swap_time?: number[] & number[] & { [K_12 in Exclude<keyof I["average_swap_time"], keyof number[]>]: never; };
        max_swap_time?: number[] & number[] & { [K_13 in Exclude<keyof I["max_swap_time"], keyof number[]>]: never; };
        average_frame_update_time?: number[] & number[] & { [K_14 in Exclude<keyof I["average_frame_update_time"], keyof number[]>]: never; };
        max_frame_update_time?: number[] & number[] & { [K_15 in Exclude<keyof I["max_frame_update_time"], keyof number[]>]: never; };
        average_idle_time?: number[] & number[] & { [K_16 in Exclude<keyof I["average_idle_time"], keyof number[]>]: never; };
        max_idle_time?: number[] & number[] & { [K_17 in Exclude<keyof I["max_idle_time"], keyof number[]>]: never; };
        average_input_processing_time?: number[] & number[] & { [K_18 in Exclude<keyof I["average_input_processing_time"], keyof number[]>]: never; };
        max_input_processing_time?: number[] & number[] & { [K_19 in Exclude<keyof I["max_input_processing_time"], keyof number[]>]: never; };
    } & { [K_20 in Exclude<keyof I, keyof CMsgGameMatchSignOutPerfData>]: never; }>(base?: I): CMsgGameMatchSignOutPerfData;
    fromPartial<I_1 extends {
        average_frame_time?: number[];
        max_frame_time?: number[];
        server_average_frame_time?: number;
        server_max_frame_time?: number;
        average_compute_time?: number[];
        max_compute_time?: number[];
        average_client_tick_time?: number[];
        max_client_tick_time?: number[];
        average_client_simulate_time?: number[];
        max_client_simulate_time?: number[];
        average_output_time?: number[];
        max_output_time?: number[];
        average_wait_for_rendering_to_complete_time?: number[];
        max_wait_for_rendering_to_complete_time?: number[];
        average_swap_time?: number[];
        max_swap_time?: number[];
        average_frame_update_time?: number[];
        max_frame_update_time?: number[];
        average_idle_time?: number[];
        max_idle_time?: number[];
        average_input_processing_time?: number[];
        max_input_processing_time?: number[];
    } & {
        average_frame_time?: number[] & number[] & { [K_21 in Exclude<keyof I_1["average_frame_time"], keyof number[]>]: never; };
        max_frame_time?: number[] & number[] & { [K_22 in Exclude<keyof I_1["max_frame_time"], keyof number[]>]: never; };
        server_average_frame_time?: number;
        server_max_frame_time?: number;
        average_compute_time?: number[] & number[] & { [K_23 in Exclude<keyof I_1["average_compute_time"], keyof number[]>]: never; };
        max_compute_time?: number[] & number[] & { [K_24 in Exclude<keyof I_1["max_compute_time"], keyof number[]>]: never; };
        average_client_tick_time?: number[] & number[] & { [K_25 in Exclude<keyof I_1["average_client_tick_time"], keyof number[]>]: never; };
        max_client_tick_time?: number[] & number[] & { [K_26 in Exclude<keyof I_1["max_client_tick_time"], keyof number[]>]: never; };
        average_client_simulate_time?: number[] & number[] & { [K_27 in Exclude<keyof I_1["average_client_simulate_time"], keyof number[]>]: never; };
        max_client_simulate_time?: number[] & number[] & { [K_28 in Exclude<keyof I_1["max_client_simulate_time"], keyof number[]>]: never; };
        average_output_time?: number[] & number[] & { [K_29 in Exclude<keyof I_1["average_output_time"], keyof number[]>]: never; };
        max_output_time?: number[] & number[] & { [K_30 in Exclude<keyof I_1["max_output_time"], keyof number[]>]: never; };
        average_wait_for_rendering_to_complete_time?: number[] & number[] & { [K_31 in Exclude<keyof I_1["average_wait_for_rendering_to_complete_time"], keyof number[]>]: never; };
        max_wait_for_rendering_to_complete_time?: number[] & number[] & { [K_32 in Exclude<keyof I_1["max_wait_for_rendering_to_complete_time"], keyof number[]>]: never; };
        average_swap_time?: number[] & number[] & { [K_33 in Exclude<keyof I_1["average_swap_time"], keyof number[]>]: never; };
        max_swap_time?: number[] & number[] & { [K_34 in Exclude<keyof I_1["max_swap_time"], keyof number[]>]: never; };
        average_frame_update_time?: number[] & number[] & { [K_35 in Exclude<keyof I_1["average_frame_update_time"], keyof number[]>]: never; };
        max_frame_update_time?: number[] & number[] & { [K_36 in Exclude<keyof I_1["max_frame_update_time"], keyof number[]>]: never; };
        average_idle_time?: number[] & number[] & { [K_37 in Exclude<keyof I_1["average_idle_time"], keyof number[]>]: never; };
        max_idle_time?: number[] & number[] & { [K_38 in Exclude<keyof I_1["max_idle_time"], keyof number[]>]: never; };
        average_input_processing_time?: number[] & number[] & { [K_39 in Exclude<keyof I_1["average_input_processing_time"], keyof number[]>]: never; };
        max_input_processing_time?: number[] & number[] & { [K_40 in Exclude<keyof I_1["max_input_processing_time"], keyof number[]>]: never; };
    } & { [K_41 in Exclude<keyof I_1, keyof CMsgGameMatchSignOutPerfData>]: never; }>(object: I_1): CMsgGameMatchSignOutPerfData;
};
export declare const CMsgGameMatchSignOutBanData: {
    fromJSON(object: any): CMsgGameMatchSignOutBanData;
    toJSON(message: CMsgGameMatchSignOutBanData): unknown;
    create<I extends {
        hero_bans?: number[];
        hero_ban_votes?: number[];
    } & {
        hero_bans?: number[] & number[] & { [K in Exclude<keyof I["hero_bans"], keyof number[]>]: never; };
        hero_ban_votes?: number[] & number[] & { [K_1 in Exclude<keyof I["hero_ban_votes"], keyof number[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgGameMatchSignOutBanData>]: never; }>(base?: I): CMsgGameMatchSignOutBanData;
    fromPartial<I_1 extends {
        hero_bans?: number[];
        hero_ban_votes?: number[];
    } & {
        hero_bans?: number[] & number[] & { [K_3 in Exclude<keyof I_1["hero_bans"], keyof number[]>]: never; };
        hero_ban_votes?: number[] & number[] & { [K_4 in Exclude<keyof I_1["hero_ban_votes"], keyof number[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgGameMatchSignOutBanData>]: never; }>(object: I_1): CMsgGameMatchSignOutBanData;
};
export declare const CMsgDOTALiveScoreboardUpdate: {
    fromJSON(object: any): CMsgDOTALiveScoreboardUpdate;
    toJSON(message: CMsgDOTALiveScoreboardUpdate): unknown;
    create<I extends {
        tournament_id?: number;
        tournament_game_id?: number;
        duration?: number;
        hltv_delay?: number;
        team_good?: {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[];
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[];
            hero_bans?: number[];
        };
        team_bad?: {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[];
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[];
            hero_bans?: number[];
        };
        roshan_respawn_timer?: number;
        league_id?: number;
        match_id?: string;
    } & {
        tournament_id?: number;
        tournament_game_id?: number;
        duration?: number;
        hltv_delay?: number;
        team_good?: {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[];
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[];
            hero_bans?: number[];
        } & {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[] & ({
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            } & {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[] & ({
                    ability_id?: number;
                    ability_level?: number;
                } & {
                    ability_id?: number;
                    ability_level?: number;
                } & { [K in Exclude<keyof I["team_good"]["players"][number]["abilities"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; })[] & { [K_1 in Exclude<keyof I["team_good"]["players"][number]["abilities"], keyof {
                    ability_id?: number;
                    ability_level?: number;
                }[]>]: never; };
            } & { [K_2 in Exclude<keyof I["team_good"]["players"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player>]: never; })[] & { [K_3 in Exclude<keyof I["team_good"]["players"], keyof {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[]>]: never; };
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[] & number[] & { [K_4 in Exclude<keyof I["team_good"]["hero_picks"], keyof number[]>]: never; };
            hero_bans?: number[] & number[] & { [K_5 in Exclude<keyof I["team_good"]["hero_bans"], keyof number[]>]: never; };
        } & { [K_6 in Exclude<keyof I["team_good"], keyof CMsgDOTALiveScoreboardUpdate_Team>]: never; };
        team_bad?: {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[];
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[];
            hero_bans?: number[];
        } & {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[] & ({
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            } & {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[] & ({
                    ability_id?: number;
                    ability_level?: number;
                } & {
                    ability_id?: number;
                    ability_level?: number;
                } & { [K_7 in Exclude<keyof I["team_bad"]["players"][number]["abilities"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; })[] & { [K_8 in Exclude<keyof I["team_bad"]["players"][number]["abilities"], keyof {
                    ability_id?: number;
                    ability_level?: number;
                }[]>]: never; };
            } & { [K_9 in Exclude<keyof I["team_bad"]["players"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player>]: never; })[] & { [K_10 in Exclude<keyof I["team_bad"]["players"], keyof {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[]>]: never; };
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[] & number[] & { [K_11 in Exclude<keyof I["team_bad"]["hero_picks"], keyof number[]>]: never; };
            hero_bans?: number[] & number[] & { [K_12 in Exclude<keyof I["team_bad"]["hero_bans"], keyof number[]>]: never; };
        } & { [K_13 in Exclude<keyof I["team_bad"], keyof CMsgDOTALiveScoreboardUpdate_Team>]: never; };
        roshan_respawn_timer?: number;
        league_id?: number;
        match_id?: string;
    } & { [K_14 in Exclude<keyof I, keyof CMsgDOTALiveScoreboardUpdate>]: never; }>(base?: I): CMsgDOTALiveScoreboardUpdate;
    fromPartial<I_1 extends {
        tournament_id?: number;
        tournament_game_id?: number;
        duration?: number;
        hltv_delay?: number;
        team_good?: {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[];
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[];
            hero_bans?: number[];
        };
        team_bad?: {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[];
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[];
            hero_bans?: number[];
        };
        roshan_respawn_timer?: number;
        league_id?: number;
        match_id?: string;
    } & {
        tournament_id?: number;
        tournament_game_id?: number;
        duration?: number;
        hltv_delay?: number;
        team_good?: {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[];
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[];
            hero_bans?: number[];
        } & {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[] & ({
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            } & {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[] & ({
                    ability_id?: number;
                    ability_level?: number;
                } & {
                    ability_id?: number;
                    ability_level?: number;
                } & { [K_15 in Exclude<keyof I_1["team_good"]["players"][number]["abilities"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; })[] & { [K_16 in Exclude<keyof I_1["team_good"]["players"][number]["abilities"], keyof {
                    ability_id?: number;
                    ability_level?: number;
                }[]>]: never; };
            } & { [K_17 in Exclude<keyof I_1["team_good"]["players"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player>]: never; })[] & { [K_18 in Exclude<keyof I_1["team_good"]["players"], keyof {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[]>]: never; };
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[] & number[] & { [K_19 in Exclude<keyof I_1["team_good"]["hero_picks"], keyof number[]>]: never; };
            hero_bans?: number[] & number[] & { [K_20 in Exclude<keyof I_1["team_good"]["hero_bans"], keyof number[]>]: never; };
        } & { [K_21 in Exclude<keyof I_1["team_good"], keyof CMsgDOTALiveScoreboardUpdate_Team>]: never; };
        team_bad?: {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[];
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[];
            hero_bans?: number[];
        } & {
            players?: {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[] & ({
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            } & {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[] & ({
                    ability_id?: number;
                    ability_level?: number;
                } & {
                    ability_id?: number;
                    ability_level?: number;
                } & { [K_22 in Exclude<keyof I_1["team_bad"]["players"][number]["abilities"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; })[] & { [K_23 in Exclude<keyof I_1["team_bad"]["players"][number]["abilities"], keyof {
                    ability_id?: number;
                    ability_level?: number;
                }[]>]: never; };
            } & { [K_24 in Exclude<keyof I_1["team_bad"]["players"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player>]: never; })[] & { [K_25 in Exclude<keyof I_1["team_bad"]["players"], keyof {
                player_slot?: number;
                player_name?: string;
                hero_name?: string;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                last_hits?: number;
                denies?: number;
                gold?: number;
                level?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
                ultimate_cooldown?: number;
                item0?: number;
                item1?: number;
                item2?: number;
                item3?: number;
                item4?: number;
                item5?: number;
                respawn_timer?: number;
                account_id?: number;
                position_x?: number;
                position_y?: number;
                net_worth?: number;
                abilities?: {
                    ability_id?: number;
                    ability_level?: number;
                }[];
            }[]>]: never; };
            score?: number;
            tower_state?: number;
            barracks_state?: number;
            hero_picks?: number[] & number[] & { [K_26 in Exclude<keyof I_1["team_bad"]["hero_picks"], keyof number[]>]: never; };
            hero_bans?: number[] & number[] & { [K_27 in Exclude<keyof I_1["team_bad"]["hero_bans"], keyof number[]>]: never; };
        } & { [K_28 in Exclude<keyof I_1["team_bad"], keyof CMsgDOTALiveScoreboardUpdate_Team>]: never; };
        roshan_respawn_timer?: number;
        league_id?: number;
        match_id?: string;
    } & { [K_29 in Exclude<keyof I_1, keyof CMsgDOTALiveScoreboardUpdate>]: never; }>(object: I_1): CMsgDOTALiveScoreboardUpdate;
};
export declare const CMsgDOTALiveScoreboardUpdate_Team: {
    fromJSON(object: any): CMsgDOTALiveScoreboardUpdate_Team;
    toJSON(message: CMsgDOTALiveScoreboardUpdate_Team): unknown;
    create<I extends {
        players?: {
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[];
        }[];
        score?: number;
        tower_state?: number;
        barracks_state?: number;
        hero_picks?: number[];
        hero_bans?: number[];
    } & {
        players?: {
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[];
        }[] & ({
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[];
        } & {
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[] & ({
                ability_id?: number;
                ability_level?: number;
            } & {
                ability_id?: number;
                ability_level?: number;
            } & { [K in Exclude<keyof I["players"][number]["abilities"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; })[] & { [K_1 in Exclude<keyof I["players"][number]["abilities"], keyof {
                ability_id?: number;
                ability_level?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["players"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player>]: never; })[] & { [K_3 in Exclude<keyof I["players"], keyof {
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[];
        }[]>]: never; };
        score?: number;
        tower_state?: number;
        barracks_state?: number;
        hero_picks?: number[] & number[] & { [K_4 in Exclude<keyof I["hero_picks"], keyof number[]>]: never; };
        hero_bans?: number[] & number[] & { [K_5 in Exclude<keyof I["hero_bans"], keyof number[]>]: never; };
    } & { [K_6 in Exclude<keyof I, keyof CMsgDOTALiveScoreboardUpdate_Team>]: never; }>(base?: I): CMsgDOTALiveScoreboardUpdate_Team;
    fromPartial<I_1 extends {
        players?: {
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[];
        }[];
        score?: number;
        tower_state?: number;
        barracks_state?: number;
        hero_picks?: number[];
        hero_bans?: number[];
    } & {
        players?: {
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[];
        }[] & ({
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[];
        } & {
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[] & ({
                ability_id?: number;
                ability_level?: number;
            } & {
                ability_id?: number;
                ability_level?: number;
            } & { [K_7 in Exclude<keyof I_1["players"][number]["abilities"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; })[] & { [K_8 in Exclude<keyof I_1["players"][number]["abilities"], keyof {
                ability_id?: number;
                ability_level?: number;
            }[]>]: never; };
        } & { [K_9 in Exclude<keyof I_1["players"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player>]: never; })[] & { [K_10 in Exclude<keyof I_1["players"], keyof {
            player_slot?: number;
            player_name?: string;
            hero_name?: string;
            hero_id?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            last_hits?: number;
            denies?: number;
            gold?: number;
            level?: number;
            gold_per_min?: number;
            xp_per_min?: number;
            ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
            ultimate_cooldown?: number;
            item0?: number;
            item1?: number;
            item2?: number;
            item3?: number;
            item4?: number;
            item5?: number;
            respawn_timer?: number;
            account_id?: number;
            position_x?: number;
            position_y?: number;
            net_worth?: number;
            abilities?: {
                ability_id?: number;
                ability_level?: number;
            }[];
        }[]>]: never; };
        score?: number;
        tower_state?: number;
        barracks_state?: number;
        hero_picks?: number[] & number[] & { [K_11 in Exclude<keyof I_1["hero_picks"], keyof number[]>]: never; };
        hero_bans?: number[] & number[] & { [K_12 in Exclude<keyof I_1["hero_bans"], keyof number[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, keyof CMsgDOTALiveScoreboardUpdate_Team>]: never; }>(object: I_1): CMsgDOTALiveScoreboardUpdate_Team;
};
export declare const CMsgDOTALiveScoreboardUpdate_Team_Player: {
    fromJSON(object: any): CMsgDOTALiveScoreboardUpdate_Team_Player;
    toJSON(message: CMsgDOTALiveScoreboardUpdate_Team_Player): unknown;
    create<I extends {
        player_slot?: number;
        player_name?: string;
        hero_name?: string;
        hero_id?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        last_hits?: number;
        denies?: number;
        gold?: number;
        level?: number;
        gold_per_min?: number;
        xp_per_min?: number;
        ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
        ultimate_cooldown?: number;
        item0?: number;
        item1?: number;
        item2?: number;
        item3?: number;
        item4?: number;
        item5?: number;
        respawn_timer?: number;
        account_id?: number;
        position_x?: number;
        position_y?: number;
        net_worth?: number;
        abilities?: {
            ability_id?: number;
            ability_level?: number;
        }[];
    } & {
        player_slot?: number;
        player_name?: string;
        hero_name?: string;
        hero_id?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        last_hits?: number;
        denies?: number;
        gold?: number;
        level?: number;
        gold_per_min?: number;
        xp_per_min?: number;
        ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
        ultimate_cooldown?: number;
        item0?: number;
        item1?: number;
        item2?: number;
        item3?: number;
        item4?: number;
        item5?: number;
        respawn_timer?: number;
        account_id?: number;
        position_x?: number;
        position_y?: number;
        net_worth?: number;
        abilities?: {
            ability_id?: number;
            ability_level?: number;
        }[] & ({
            ability_id?: number;
            ability_level?: number;
        } & {
            ability_id?: number;
            ability_level?: number;
        } & { [K in Exclude<keyof I["abilities"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; })[] & { [K_1 in Exclude<keyof I["abilities"], keyof {
            ability_id?: number;
            ability_level?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTALiveScoreboardUpdate_Team_Player>]: never; }>(base?: I): CMsgDOTALiveScoreboardUpdate_Team_Player;
    fromPartial<I_1 extends {
        player_slot?: number;
        player_name?: string;
        hero_name?: string;
        hero_id?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        last_hits?: number;
        denies?: number;
        gold?: number;
        level?: number;
        gold_per_min?: number;
        xp_per_min?: number;
        ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
        ultimate_cooldown?: number;
        item0?: number;
        item1?: number;
        item2?: number;
        item3?: number;
        item4?: number;
        item5?: number;
        respawn_timer?: number;
        account_id?: number;
        position_x?: number;
        position_y?: number;
        net_worth?: number;
        abilities?: {
            ability_id?: number;
            ability_level?: number;
        }[];
    } & {
        player_slot?: number;
        player_name?: string;
        hero_name?: string;
        hero_id?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        last_hits?: number;
        denies?: number;
        gold?: number;
        level?: number;
        gold_per_min?: number;
        xp_per_min?: number;
        ultimate_state?: CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState;
        ultimate_cooldown?: number;
        item0?: number;
        item1?: number;
        item2?: number;
        item3?: number;
        item4?: number;
        item5?: number;
        respawn_timer?: number;
        account_id?: number;
        position_x?: number;
        position_y?: number;
        net_worth?: number;
        abilities?: {
            ability_id?: number;
            ability_level?: number;
        }[] & ({
            ability_id?: number;
            ability_level?: number;
        } & {
            ability_id?: number;
            ability_level?: number;
        } & { [K_3 in Exclude<keyof I_1["abilities"][number], keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; })[] & { [K_4 in Exclude<keyof I_1["abilities"], keyof {
            ability_id?: number;
            ability_level?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTALiveScoreboardUpdate_Team_Player>]: never; }>(object: I_1): CMsgDOTALiveScoreboardUpdate_Team_Player;
};
export declare const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility: {
    fromJSON(object: any): CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility;
    toJSON(message: CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility): unknown;
    create<I extends {
        ability_id?: number;
        ability_level?: number;
    } & {
        ability_id?: number;
        ability_level?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; }>(base?: I): CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility;
    fromPartial<I_1 extends {
        ability_id?: number;
        ability_level?: number;
    } & {
        ability_id?: number;
        ability_level?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>]: never; }>(object: I_1): CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility;
};
export declare const CMsgServerToGCRequestBatchPlayerResources: {
    fromJSON(object: any): CMsgServerToGCRequestBatchPlayerResources;
    toJSON(message: CMsgServerToGCRequestBatchPlayerResources): unknown;
    create<I extends {
        account_ids?: number[];
        rank_types?: number[];
    } & {
        account_ids?: number[] & number[] & { [K in Exclude<keyof I["account_ids"], keyof number[]>]: never; };
        rank_types?: number[] & number[] & { [K_1 in Exclude<keyof I["rank_types"], keyof number[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCRequestBatchPlayerResources>]: never; }>(base?: I): CMsgServerToGCRequestBatchPlayerResources;
    fromPartial<I_1 extends {
        account_ids?: number[];
        rank_types?: number[];
    } & {
        account_ids?: number[] & number[] & { [K_3 in Exclude<keyof I_1["account_ids"], keyof number[]>]: never; };
        rank_types?: number[] & number[] & { [K_4 in Exclude<keyof I_1["rank_types"], keyof number[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCRequestBatchPlayerResources>]: never; }>(object: I_1): CMsgServerToGCRequestBatchPlayerResources;
};
export declare const CMsgServerToGCRequestBatchPlayerResourcesResponse: {
    fromJSON(object: any): CMsgServerToGCRequestBatchPlayerResourcesResponse;
    toJSON(message: CMsgServerToGCRequestBatchPlayerResourcesResponse): unknown;
    create<I extends {
        results?: {
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        }[];
    } & {
        results?: {
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        }[] & ({
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        } & {
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        } & { [K in Exclude<keyof I["results"][number], keyof CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>]: never; })[] & { [K_1 in Exclude<keyof I["results"], keyof {
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "results">]: never; }>(base?: I): CMsgServerToGCRequestBatchPlayerResourcesResponse;
    fromPartial<I_1 extends {
        results?: {
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        }[];
    } & {
        results?: {
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        }[] & ({
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        } & {
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        } & { [K_3 in Exclude<keyof I_1["results"][number], keyof CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>]: never; })[] & { [K_4 in Exclude<keyof I_1["results"], keyof {
            account_id?: number;
            prevent_text_chat?: boolean;
            prevent_voice_chat?: boolean;
            rank?: number;
            rank_calibrated?: boolean;
            low_priority?: boolean;
            is_new_player?: boolean;
            is_guide_player?: boolean;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "results">]: never; }>(object: I_1): CMsgServerToGCRequestBatchPlayerResourcesResponse;
};
export declare const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result: {
    fromJSON(object: any): CMsgServerToGCRequestBatchPlayerResourcesResponse_Result;
    toJSON(message: CMsgServerToGCRequestBatchPlayerResourcesResponse_Result): unknown;
    create<I extends {
        account_id?: number;
        prevent_text_chat?: boolean;
        prevent_voice_chat?: boolean;
        rank?: number;
        rank_calibrated?: boolean;
        low_priority?: boolean;
        is_new_player?: boolean;
        is_guide_player?: boolean;
    } & {
        account_id?: number;
        prevent_text_chat?: boolean;
        prevent_voice_chat?: boolean;
        rank?: number;
        rank_calibrated?: boolean;
        low_priority?: boolean;
        is_new_player?: boolean;
        is_guide_player?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>]: never; }>(base?: I): CMsgServerToGCRequestBatchPlayerResourcesResponse_Result;
    fromPartial<I_1 extends {
        account_id?: number;
        prevent_text_chat?: boolean;
        prevent_voice_chat?: boolean;
        rank?: number;
        rank_calibrated?: boolean;
        low_priority?: boolean;
        is_new_player?: boolean;
        is_guide_player?: boolean;
    } & {
        account_id?: number;
        prevent_text_chat?: boolean;
        prevent_voice_chat?: boolean;
        rank?: number;
        rank_calibrated?: boolean;
        low_priority?: boolean;
        is_new_player?: boolean;
        is_guide_player?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>]: never; }>(object: I_1): CMsgServerToGCRequestBatchPlayerResourcesResponse_Result;
};
export declare const CMsgDOTAPlayerFailedToConnect: {
    fromJSON(object: any): CMsgDOTAPlayerFailedToConnect;
    toJSON(message: CMsgDOTAPlayerFailedToConnect): unknown;
    create<I extends {
        failed_loaders?: string[];
        abandoned_loaders?: string[];
    } & {
        failed_loaders?: string[] & string[] & { [K in Exclude<keyof I["failed_loaders"], keyof string[]>]: never; };
        abandoned_loaders?: string[] & string[] & { [K_1 in Exclude<keyof I["abandoned_loaders"], keyof string[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAPlayerFailedToConnect>]: never; }>(base?: I): CMsgDOTAPlayerFailedToConnect;
    fromPartial<I_1 extends {
        failed_loaders?: string[];
        abandoned_loaders?: string[];
    } & {
        failed_loaders?: string[] & string[] & { [K_3 in Exclude<keyof I_1["failed_loaders"], keyof string[]>]: never; };
        abandoned_loaders?: string[] & string[] & { [K_4 in Exclude<keyof I_1["abandoned_loaders"], keyof string[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAPlayerFailedToConnect>]: never; }>(object: I_1): CMsgDOTAPlayerFailedToConnect;
};
export declare const CMsgGCToRelayConnect: {
    fromJSON(object: any): CMsgGCToRelayConnect;
    toJSON(message: CMsgGCToRelayConnect): unknown;
    create<I extends {
        source_tv_public_addr?: number;
        source_tv_private_addr?: number;
        source_tv_port?: number;
        game_server_steam_id?: string;
        parent_count?: number;
        tv_unique_secret_code?: string;
        source_tv_steamid?: string;
    } & {
        source_tv_public_addr?: number;
        source_tv_private_addr?: number;
        source_tv_port?: number;
        game_server_steam_id?: string;
        parent_count?: number;
        tv_unique_secret_code?: string;
        source_tv_steamid?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGCToRelayConnect>]: never; }>(base?: I): CMsgGCToRelayConnect;
    fromPartial<I_1 extends {
        source_tv_public_addr?: number;
        source_tv_private_addr?: number;
        source_tv_port?: number;
        game_server_steam_id?: string;
        parent_count?: number;
        tv_unique_secret_code?: string;
        source_tv_steamid?: string;
    } & {
        source_tv_public_addr?: number;
        source_tv_private_addr?: number;
        source_tv_port?: number;
        game_server_steam_id?: string;
        parent_count?: number;
        tv_unique_secret_code?: string;
        source_tv_steamid?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToRelayConnect>]: never; }>(object: I_1): CMsgGCToRelayConnect;
};
export declare const CMsgGCGCToLANServerRelayConnect: {
    fromJSON(object: any): CMsgGCGCToLANServerRelayConnect;
    toJSON(message: CMsgGCGCToLANServerRelayConnect): unknown;
    create<I extends {
        relay_steamid?: string;
    } & {
        relay_steamid?: string;
    } & { [K in Exclude<keyof I, "relay_steamid">]: never; }>(base?: I): CMsgGCGCToLANServerRelayConnect;
    fromPartial<I_1 extends {
        relay_steamid?: string;
    } & {
        relay_steamid?: string;
    } & { [K_1 in Exclude<keyof I_1, "relay_steamid">]: never; }>(object: I_1): CMsgGCGCToLANServerRelayConnect;
};
export declare const CMsgGCBanStatusRequest: {
    fromJSON(object: any): CMsgGCBanStatusRequest;
    toJSON(message: CMsgGCBanStatusRequest): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgGCBanStatusRequest;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgGCBanStatusRequest;
};
export declare const CMsgGCBanStatusResponse: {
    fromJSON(object: any): CMsgGCBanStatusResponse;
    toJSON(message: CMsgGCBanStatusResponse): unknown;
    create<I extends {
        result?: number;
        low_priority?: boolean;
        text_chat_banned?: boolean;
        voice_chat_banned?: boolean;
    } & {
        result?: number;
        low_priority?: boolean;
        text_chat_banned?: boolean;
        voice_chat_banned?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgGCBanStatusResponse>]: never; }>(base?: I): CMsgGCBanStatusResponse;
    fromPartial<I_1 extends {
        result?: number;
        low_priority?: boolean;
        text_chat_banned?: boolean;
        voice_chat_banned?: boolean;
    } & {
        result?: number;
        low_priority?: boolean;
        text_chat_banned?: boolean;
        voice_chat_banned?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCBanStatusResponse>]: never; }>(object: I_1): CMsgGCBanStatusResponse;
};
export declare const CMsgTournamentItemEvent: {
    fromJSON(object: any): CMsgTournamentItemEvent;
    toJSON(message: CMsgTournamentItemEvent): unknown;
    create<I extends {
        killer_account_id?: number;
        victim_account_id?: number;
        event_type?: DOTA_TournamentEvents;
        tv_delay?: number;
        dota_time?: number;
        replay_time?: number;
        loot_list?: string;
        event_team?: number;
        multi_kill_count?: number;
        winner_score?: number;
        loser_score?: number;
        hero_statues?: {
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[];
            inscription?: string;
            style?: number[];
            tournament_drop?: boolean;
        }[];
    } & {
        killer_account_id?: number;
        victim_account_id?: number;
        event_type?: DOTA_TournamentEvents;
        tv_delay?: number;
        dota_time?: number;
        replay_time?: number;
        loot_list?: string;
        event_team?: number;
        multi_kill_count?: number;
        winner_score?: number;
        loser_score?: number;
        hero_statues?: {
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[];
            inscription?: string;
            style?: number[];
            tournament_drop?: boolean;
        }[] & ({
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[];
            inscription?: string;
            style?: number[];
            tournament_drop?: boolean;
        } & {
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[] & number[] & { [K in Exclude<keyof I["hero_statues"][number]["wearable"], keyof number[]>]: never; };
            inscription?: string;
            style?: number[] & number[] & { [K_1 in Exclude<keyof I["hero_statues"][number]["style"], keyof number[]>]: never; };
            tournament_drop?: boolean;
        } & { [K_2 in Exclude<keyof I["hero_statues"][number], keyof CProtoItemHeroStatue>]: never; })[] & { [K_3 in Exclude<keyof I["hero_statues"], keyof {
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[];
            inscription?: string;
            style?: number[];
            tournament_drop?: boolean;
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgTournamentItemEvent>]: never; }>(base?: I): CMsgTournamentItemEvent;
    fromPartial<I_1 extends {
        killer_account_id?: number;
        victim_account_id?: number;
        event_type?: DOTA_TournamentEvents;
        tv_delay?: number;
        dota_time?: number;
        replay_time?: number;
        loot_list?: string;
        event_team?: number;
        multi_kill_count?: number;
        winner_score?: number;
        loser_score?: number;
        hero_statues?: {
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[];
            inscription?: string;
            style?: number[];
            tournament_drop?: boolean;
        }[];
    } & {
        killer_account_id?: number;
        victim_account_id?: number;
        event_type?: DOTA_TournamentEvents;
        tv_delay?: number;
        dota_time?: number;
        replay_time?: number;
        loot_list?: string;
        event_team?: number;
        multi_kill_count?: number;
        winner_score?: number;
        loser_score?: number;
        hero_statues?: {
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[];
            inscription?: string;
            style?: number[];
            tournament_drop?: boolean;
        }[] & ({
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[];
            inscription?: string;
            style?: number[];
            tournament_drop?: boolean;
        } & {
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[] & number[] & { [K_5 in Exclude<keyof I_1["hero_statues"][number]["wearable"], keyof number[]>]: never; };
            inscription?: string;
            style?: number[] & number[] & { [K_6 in Exclude<keyof I_1["hero_statues"][number]["style"], keyof number[]>]: never; };
            tournament_drop?: boolean;
        } & { [K_7 in Exclude<keyof I_1["hero_statues"][number], keyof CProtoItemHeroStatue>]: never; })[] & { [K_8 in Exclude<keyof I_1["hero_statues"], keyof {
            hero_id?: number;
            status_effect_index?: number;
            sequence_name?: string;
            cycle?: number;
            wearable?: number[];
            inscription?: string;
            style?: number[];
            tournament_drop?: boolean;
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgTournamentItemEvent>]: never; }>(object: I_1): CMsgTournamentItemEvent;
};
export declare const CMsgTournamentItemEventResponse: {
    fromJSON(object: any): CMsgTournamentItemEventResponse;
    toJSON(message: CMsgTournamentItemEventResponse): unknown;
    create<I extends {
        event_type?: DOTA_TournamentEvents;
        viewers_granted?: number;
    } & {
        event_type?: DOTA_TournamentEvents;
        viewers_granted?: number;
    } & { [K in Exclude<keyof I, keyof CMsgTournamentItemEventResponse>]: never; }>(base?: I): CMsgTournamentItemEventResponse;
    fromPartial<I_1 extends {
        event_type?: DOTA_TournamentEvents;
        viewers_granted?: number;
    } & {
        event_type?: DOTA_TournamentEvents;
        viewers_granted?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgTournamentItemEventResponse>]: never; }>(object: I_1): CMsgTournamentItemEventResponse;
};
export declare const CMsgTeamFanfare: {
    fromJSON(object: any): CMsgTeamFanfare;
    toJSON(message: CMsgTeamFanfare): unknown;
    create<I extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K in Exclude<keyof I, "match_id">]: never; }>(base?: I): CMsgTeamFanfare;
    fromPartial<I_1 extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "match_id">]: never; }>(object: I_1): CMsgTeamFanfare;
};
export declare const CMsgResponseTeamFanfare: {
    fromJSON(object: any): CMsgResponseTeamFanfare;
    toJSON(message: CMsgResponseTeamFanfare): unknown;
    create<I extends {
        fanfare_goodguys?: number;
        fanfare_badguys?: number;
    } & {
        fanfare_goodguys?: number;
        fanfare_badguys?: number;
    } & { [K in Exclude<keyof I, keyof CMsgResponseTeamFanfare>]: never; }>(base?: I): CMsgResponseTeamFanfare;
    fromPartial<I_1 extends {
        fanfare_goodguys?: number;
        fanfare_badguys?: number;
    } & {
        fanfare_goodguys?: number;
        fanfare_badguys?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgResponseTeamFanfare>]: never; }>(object: I_1): CMsgResponseTeamFanfare;
};
export declare const CMsgGameServerUploadSaveGame: {
    fromJSON(object: any): CMsgGameServerUploadSaveGame;
    toJSON(message: CMsgGameServerUploadSaveGame): unknown;
    create<I extends {
        game_time?: number;
        save_game_data?: string;
        lobby_id?: string;
        player_steam_ids?: string[];
    } & {
        game_time?: number;
        save_game_data?: string;
        lobby_id?: string;
        player_steam_ids?: string[] & string[] & { [K in Exclude<keyof I["player_steam_ids"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgGameServerUploadSaveGame>]: never; }>(base?: I): CMsgGameServerUploadSaveGame;
    fromPartial<I_1 extends {
        game_time?: number;
        save_game_data?: string;
        lobby_id?: string;
        player_steam_ids?: string[];
    } & {
        game_time?: number;
        save_game_data?: string;
        lobby_id?: string;
        player_steam_ids?: string[] & string[] & { [K_2 in Exclude<keyof I_1["player_steam_ids"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgGameServerUploadSaveGame>]: never; }>(object: I_1): CMsgGameServerUploadSaveGame;
};
export declare const CMsgGameServerSaveGameResult: {
    fromJSON(object: any): CMsgGameServerSaveGameResult;
    toJSON(message: CMsgGameServerSaveGameResult): unknown;
    create<I extends {
        result?: CMsgGameServerSaveGameResult_Result;
    } & {
        result?: CMsgGameServerSaveGameResult_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgGameServerSaveGameResult;
    fromPartial<I_1 extends {
        result?: CMsgGameServerSaveGameResult_Result;
    } & {
        result?: CMsgGameServerSaveGameResult_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgGameServerSaveGameResult;
};
export declare const CMsgGameServerGetLoadGame: {
    fromJSON(object: any): CMsgGameServerGetLoadGame;
    toJSON(message: CMsgGameServerGetLoadGame): unknown;
    create<I extends {
        save_id?: number;
    } & {
        save_id?: number;
    } & { [K in Exclude<keyof I, "save_id">]: never; }>(base?: I): CMsgGameServerGetLoadGame;
    fromPartial<I_1 extends {
        save_id?: number;
    } & {
        save_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "save_id">]: never; }>(object: I_1): CMsgGameServerGetLoadGame;
};
export declare const CMsgGameServerGetLoadGameResult: {
    fromJSON(object: any): CMsgGameServerGetLoadGameResult;
    toJSON(message: CMsgGameServerGetLoadGameResult): unknown;
    create<I extends {
        save_game_data?: string;
    } & {
        save_game_data?: string;
    } & { [K in Exclude<keyof I, "save_game_data">]: never; }>(base?: I): CMsgGameServerGetLoadGameResult;
    fromPartial<I_1 extends {
        save_game_data?: string;
    } & {
        save_game_data?: string;
    } & { [K_1 in Exclude<keyof I_1, "save_game_data">]: never; }>(object: I_1): CMsgGameServerGetLoadGameResult;
};
export declare const CMsgDOTAAwardEventPoints: {
    fromJSON(object: any): CMsgDOTAAwardEventPoints;
    toJSON(message: CMsgDOTAAwardEventPoints): unknown;
    create<I extends {
        award_points?: {
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        }[];
        match_id?: string;
        event_id?: EEvent;
        timestamp?: number;
        audit_action?: number;
    } & {
        award_points?: {
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        }[] & ({
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        } & {
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        } & { [K in Exclude<keyof I["award_points"][number], keyof CMsgDOTAAwardEventPoints_AwardPoints>]: never; })[] & { [K_1 in Exclude<keyof I["award_points"], keyof {
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        }[]>]: never; };
        match_id?: string;
        event_id?: EEvent;
        timestamp?: number;
        audit_action?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAAwardEventPoints>]: never; }>(base?: I): CMsgDOTAAwardEventPoints;
    fromPartial<I_1 extends {
        award_points?: {
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        }[];
        match_id?: string;
        event_id?: EEvent;
        timestamp?: number;
        audit_action?: number;
    } & {
        award_points?: {
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        }[] & ({
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        } & {
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        } & { [K_3 in Exclude<keyof I_1["award_points"][number], keyof CMsgDOTAAwardEventPoints_AwardPoints>]: never; })[] & { [K_4 in Exclude<keyof I_1["award_points"], keyof {
            account_id?: number;
            points?: number;
            premium_points?: number;
            trade_ban_time?: number;
            eligible_for_periodic_adjustment?: boolean;
            point_cap_periodic_resource_id?: number;
        }[]>]: never; };
        match_id?: string;
        event_id?: EEvent;
        timestamp?: number;
        audit_action?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAAwardEventPoints>]: never; }>(object: I_1): CMsgDOTAAwardEventPoints;
};
export declare const CMsgDOTAAwardEventPoints_AwardPoints: {
    fromJSON(object: any): CMsgDOTAAwardEventPoints_AwardPoints;
    toJSON(message: CMsgDOTAAwardEventPoints_AwardPoints): unknown;
    create<I extends {
        account_id?: number;
        points?: number;
        premium_points?: number;
        trade_ban_time?: number;
        eligible_for_periodic_adjustment?: boolean;
        point_cap_periodic_resource_id?: number;
    } & {
        account_id?: number;
        points?: number;
        premium_points?: number;
        trade_ban_time?: number;
        eligible_for_periodic_adjustment?: boolean;
        point_cap_periodic_resource_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAAwardEventPoints_AwardPoints>]: never; }>(base?: I): CMsgDOTAAwardEventPoints_AwardPoints;
    fromPartial<I_1 extends {
        account_id?: number;
        points?: number;
        premium_points?: number;
        trade_ban_time?: number;
        eligible_for_periodic_adjustment?: boolean;
        point_cap_periodic_resource_id?: number;
    } & {
        account_id?: number;
        points?: number;
        premium_points?: number;
        trade_ban_time?: number;
        eligible_for_periodic_adjustment?: boolean;
        point_cap_periodic_resource_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAAwardEventPoints_AwardPoints>]: never; }>(object: I_1): CMsgDOTAAwardEventPoints_AwardPoints;
};
export declare const CMsgGCToServerPingRequest: {
    fromJSON(object: any): CMsgGCToServerPingRequest;
    toJSON(message: CMsgGCToServerPingRequest): unknown;
    create<I extends {
        request_id?: string;
        request_time?: string;
    } & {
        request_id?: string;
        request_time?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGCToServerPingRequest>]: never; }>(base?: I): CMsgGCToServerPingRequest;
    fromPartial<I_1 extends {
        request_id?: string;
        request_time?: string;
    } & {
        request_id?: string;
        request_time?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToServerPingRequest>]: never; }>(object: I_1): CMsgGCToServerPingRequest;
};
export declare const CMsgGCToServerPingResponse: {
    fromJSON(object: any): CMsgGCToServerPingResponse;
    toJSON(message: CMsgGCToServerPingResponse): unknown;
    create<I extends {
        request_id?: string;
        request_time?: string;
        cluster?: number;
    } & {
        request_id?: string;
        request_time?: string;
        cluster?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToServerPingResponse>]: never; }>(base?: I): CMsgGCToServerPingResponse;
    fromPartial<I_1 extends {
        request_id?: string;
        request_time?: string;
        cluster?: number;
    } & {
        request_id?: string;
        request_time?: string;
        cluster?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToServerPingResponse>]: never; }>(object: I_1): CMsgGCToServerPingResponse;
};
export declare const CMsgServerToGCMatchConnectionStats: {
    fromJSON(object: any): CMsgServerToGCMatchConnectionStats;
    toJSON(message: CMsgServerToGCMatchConnectionStats): unknown;
    create<I extends {
        match_id?: string;
        region_id?: number;
        league_id?: number;
        players?: {
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        }[];
        cluster_id?: number;
    } & {
        match_id?: string;
        region_id?: number;
        league_id?: number;
        players?: {
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        }[] & ({
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        } & {
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        } & { [K in Exclude<keyof I["players"][number], keyof CMsgServerToGCMatchConnectionStats_Player>]: never; })[] & { [K_1 in Exclude<keyof I["players"], keyof {
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        }[]>]: never; };
        cluster_id?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCMatchConnectionStats>]: never; }>(base?: I): CMsgServerToGCMatchConnectionStats;
    fromPartial<I_1 extends {
        match_id?: string;
        region_id?: number;
        league_id?: number;
        players?: {
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        }[];
        cluster_id?: number;
    } & {
        match_id?: string;
        region_id?: number;
        league_id?: number;
        players?: {
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        }[] & ({
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        } & {
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        } & { [K_3 in Exclude<keyof I_1["players"][number], keyof CMsgServerToGCMatchConnectionStats_Player>]: never; })[] & { [K_4 in Exclude<keyof I_1["players"], keyof {
            account_id?: number;
            ip?: number;
            avg_ping_ms?: number;
            packet_loss?: number;
            ping_deviation?: number;
            full_resends?: number;
        }[]>]: never; };
        cluster_id?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCMatchConnectionStats>]: never; }>(object: I_1): CMsgServerToGCMatchConnectionStats;
};
export declare const CMsgServerToGCMatchConnectionStats_Player: {
    fromJSON(object: any): CMsgServerToGCMatchConnectionStats_Player;
    toJSON(message: CMsgServerToGCMatchConnectionStats_Player): unknown;
    create<I extends {
        account_id?: number;
        ip?: number;
        avg_ping_ms?: number;
        packet_loss?: number;
        ping_deviation?: number;
        full_resends?: number;
    } & {
        account_id?: number;
        ip?: number;
        avg_ping_ms?: number;
        packet_loss?: number;
        ping_deviation?: number;
        full_resends?: number;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCMatchConnectionStats_Player>]: never; }>(base?: I): CMsgServerToGCMatchConnectionStats_Player;
    fromPartial<I_1 extends {
        account_id?: number;
        ip?: number;
        avg_ping_ms?: number;
        packet_loss?: number;
        ping_deviation?: number;
        full_resends?: number;
    } & {
        account_id?: number;
        ip?: number;
        avg_ping_ms?: number;
        packet_loss?: number;
        ping_deviation?: number;
        full_resends?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCMatchConnectionStats_Player>]: never; }>(object: I_1): CMsgServerToGCMatchConnectionStats_Player;
};
export declare const CMsgServerGCUpdateSpectatorCount: {
    fromJSON(object: any): CMsgServerGCUpdateSpectatorCount;
    toJSON(message: CMsgServerGCUpdateSpectatorCount): unknown;
    create<I extends {
        spectator_count?: number;
    } & {
        spectator_count?: number;
    } & { [K in Exclude<keyof I, "spectator_count">]: never; }>(base?: I): CMsgServerGCUpdateSpectatorCount;
    fromPartial<I_1 extends {
        spectator_count?: number;
    } & {
        spectator_count?: number;
    } & { [K_1 in Exclude<keyof I_1, "spectator_count">]: never; }>(object: I_1): CMsgServerGCUpdateSpectatorCount;
};
export declare const CSerializedCombatLog: {
    fromJSON(object: any): CSerializedCombatLog;
    toJSON(message: CSerializedCombatLog): unknown;
    create<I extends {
        version?: number;
        dictionary?: {
            strings?: {
                id?: number;
                value?: string;
            }[];
        };
        entries?: {
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[];
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        }[];
    } & {
        version?: number;
        dictionary?: {
            strings?: {
                id?: number;
                value?: string;
            }[];
        } & {
            strings?: {
                id?: number;
                value?: string;
            }[] & ({
                id?: number;
                value?: string;
            } & {
                id?: number;
                value?: string;
            } & { [K in Exclude<keyof I["dictionary"]["strings"][number], keyof CSerializedCombatLog_Dictionary_DictString>]: never; })[] & { [K_1 in Exclude<keyof I["dictionary"]["strings"], keyof {
                id?: number;
                value?: string;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["dictionary"], "strings">]: never; };
        entries?: {
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[];
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        }[] & ({
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[];
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        } & {
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[] & number[] & { [K_3 in Exclude<keyof I["entries"][number]["assist_players"], keyof number[]>]: never; };
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        } & { [K_4 in Exclude<keyof I["entries"][number], keyof CMsgDOTACombatLogEntry>]: never; })[] & { [K_5 in Exclude<keyof I["entries"], keyof {
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[];
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        }[]>]: never; };
    } & { [K_6 in Exclude<keyof I, keyof CSerializedCombatLog>]: never; }>(base?: I): CSerializedCombatLog;
    fromPartial<I_1 extends {
        version?: number;
        dictionary?: {
            strings?: {
                id?: number;
                value?: string;
            }[];
        };
        entries?: {
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[];
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        }[];
    } & {
        version?: number;
        dictionary?: {
            strings?: {
                id?: number;
                value?: string;
            }[];
        } & {
            strings?: {
                id?: number;
                value?: string;
            }[] & ({
                id?: number;
                value?: string;
            } & {
                id?: number;
                value?: string;
            } & { [K_7 in Exclude<keyof I_1["dictionary"]["strings"][number], keyof CSerializedCombatLog_Dictionary_DictString>]: never; })[] & { [K_8 in Exclude<keyof I_1["dictionary"]["strings"], keyof {
                id?: number;
                value?: string;
            }[]>]: never; };
        } & { [K_9 in Exclude<keyof I_1["dictionary"], "strings">]: never; };
        entries?: {
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[];
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        }[] & ({
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[];
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        } & {
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[] & number[] & { [K_10 in Exclude<keyof I_1["entries"][number]["assist_players"], keyof number[]>]: never; };
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        } & { [K_11 in Exclude<keyof I_1["entries"][number], keyof CMsgDOTACombatLogEntry>]: never; })[] & { [K_12 in Exclude<keyof I_1["entries"], keyof {
            type?: import("./dota_shared_enums").DOTA_COMBATLOG_TYPES;
            target_name?: number;
            target_source_name?: number;
            attacker_name?: number;
            damage_source_name?: number;
            inflictor_name?: number;
            is_attacker_illusion?: boolean;
            is_attacker_hero?: boolean;
            is_target_illusion?: boolean;
            is_target_hero?: boolean;
            is_visible_radiant?: boolean;
            is_visible_dire?: boolean;
            value?: number;
            health?: number;
            timestamp?: number;
            stun_duration?: number;
            slow_duration?: number;
            is_ability_toggle_on?: boolean;
            is_ability_toggle_off?: boolean;
            ability_level?: number;
            location_x?: number;
            location_y?: number;
            gold_reason?: number;
            timestamp_raw?: number;
            modifier_duration?: number;
            xp_reason?: number;
            last_hits?: number;
            attacker_team?: number;
            target_team?: number;
            obs_wards_placed?: number;
            assist_player0?: number;
            assist_player1?: number;
            assist_player2?: number;
            assist_player3?: number;
            stack_count?: number;
            hidden_modifier?: boolean;
            is_target_building?: boolean;
            neutral_camp_type?: number;
            rune_type?: number;
            assist_players?: number[];
            is_heal_save?: boolean;
            is_ultimate_ability?: boolean;
            attacker_hero_level?: number;
            target_hero_level?: number;
            xpm?: number;
            gpm?: number;
            event_location?: number;
            target_is_self?: boolean;
            damage_type?: number;
            invisibility_modifier?: boolean;
            damage_category?: number;
            networth?: number;
            building_type?: number;
            modifier_elapsed_duration?: number;
            silence_modifier?: boolean;
            heal_from_lifesteal?: boolean;
            modifier_purged?: boolean;
            spell_evaded?: boolean;
            motion_controller_modifier?: boolean;
            long_range_kill?: boolean;
            modifier_purge_ability?: number;
            modifier_purge_npc?: number;
            root_modifier?: boolean;
            total_unit_death_count?: number;
            aura_modifier?: boolean;
            armor_debuff_modifier?: boolean;
            no_physical_damage_modifier?: boolean;
            modifier_ability?: number;
            modifier_hidden?: boolean;
            inflictor_is_stolen_ability?: boolean;
            kill_eater_event?: number;
            unit_status_label?: number;
            spell_generated_attack?: boolean;
            at_night_time?: boolean;
            attacker_has_scepter?: boolean;
            neutral_camp_team?: number;
            regenerated_health?: number;
            will_reincarnate?: boolean;
            uses_charges?: boolean;
        }[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, keyof CSerializedCombatLog>]: never; }>(object: I_1): CSerializedCombatLog;
};
export declare const CSerializedCombatLog_Dictionary: {
    fromJSON(object: any): CSerializedCombatLog_Dictionary;
    toJSON(message: CSerializedCombatLog_Dictionary): unknown;
    create<I extends {
        strings?: {
            id?: number;
            value?: string;
        }[];
    } & {
        strings?: {
            id?: number;
            value?: string;
        }[] & ({
            id?: number;
            value?: string;
        } & {
            id?: number;
            value?: string;
        } & { [K in Exclude<keyof I["strings"][number], keyof CSerializedCombatLog_Dictionary_DictString>]: never; })[] & { [K_1 in Exclude<keyof I["strings"], keyof {
            id?: number;
            value?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "strings">]: never; }>(base?: I): CSerializedCombatLog_Dictionary;
    fromPartial<I_1 extends {
        strings?: {
            id?: number;
            value?: string;
        }[];
    } & {
        strings?: {
            id?: number;
            value?: string;
        }[] & ({
            id?: number;
            value?: string;
        } & {
            id?: number;
            value?: string;
        } & { [K_3 in Exclude<keyof I_1["strings"][number], keyof CSerializedCombatLog_Dictionary_DictString>]: never; })[] & { [K_4 in Exclude<keyof I_1["strings"], keyof {
            id?: number;
            value?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "strings">]: never; }>(object: I_1): CSerializedCombatLog_Dictionary;
};
export declare const CSerializedCombatLog_Dictionary_DictString: {
    fromJSON(object: any): CSerializedCombatLog_Dictionary_DictString;
    toJSON(message: CSerializedCombatLog_Dictionary_DictString): unknown;
    create<I extends {
        id?: number;
        value?: string;
    } & {
        id?: number;
        value?: string;
    } & { [K in Exclude<keyof I, keyof CSerializedCombatLog_Dictionary_DictString>]: never; }>(base?: I): CSerializedCombatLog_Dictionary_DictString;
    fromPartial<I_1 extends {
        id?: number;
        value?: string;
    } & {
        id?: number;
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CSerializedCombatLog_Dictionary_DictString>]: never; }>(object: I_1): CSerializedCombatLog_Dictionary_DictString;
};
export declare const CMsgServerToGCVictoryPredictions: {
    fromJSON(object: any): CMsgServerToGCVictoryPredictions;
    toJSON(message: CMsgServerToGCVictoryPredictions): unknown;
    create<I extends {
        records?: {
            account_id?: number;
            item_id?: string;
            item_ids?: string[];
        }[];
    } & {
        records?: {
            account_id?: number;
            item_id?: string;
            item_ids?: string[];
        }[] & ({
            account_id?: number;
            item_id?: string;
            item_ids?: string[];
        } & {
            account_id?: number;
            item_id?: string;
            item_ids?: string[] & string[] & { [K in Exclude<keyof I["records"][number]["item_ids"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["records"][number], keyof CMsgServerToGCVictoryPredictions_Record>]: never; })[] & { [K_2 in Exclude<keyof I["records"], keyof {
            account_id?: number;
            item_id?: string;
            item_ids?: string[];
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, "records">]: never; }>(base?: I): CMsgServerToGCVictoryPredictions;
    fromPartial<I_1 extends {
        records?: {
            account_id?: number;
            item_id?: string;
            item_ids?: string[];
        }[];
    } & {
        records?: {
            account_id?: number;
            item_id?: string;
            item_ids?: string[];
        }[] & ({
            account_id?: number;
            item_id?: string;
            item_ids?: string[];
        } & {
            account_id?: number;
            item_id?: string;
            item_ids?: string[] & string[] & { [K_4 in Exclude<keyof I_1["records"][number]["item_ids"], keyof string[]>]: never; };
        } & { [K_5 in Exclude<keyof I_1["records"][number], keyof CMsgServerToGCVictoryPredictions_Record>]: never; })[] & { [K_6 in Exclude<keyof I_1["records"], keyof {
            account_id?: number;
            item_id?: string;
            item_ids?: string[];
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "records">]: never; }>(object: I_1): CMsgServerToGCVictoryPredictions;
};
export declare const CMsgServerToGCVictoryPredictions_Record: {
    fromJSON(object: any): CMsgServerToGCVictoryPredictions_Record;
    toJSON(message: CMsgServerToGCVictoryPredictions_Record): unknown;
    create<I extends {
        account_id?: number;
        item_id?: string;
        item_ids?: string[];
    } & {
        account_id?: number;
        item_id?: string;
        item_ids?: string[] & string[] & { [K in Exclude<keyof I["item_ids"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgServerToGCVictoryPredictions_Record>]: never; }>(base?: I): CMsgServerToGCVictoryPredictions_Record;
    fromPartial<I_1 extends {
        account_id?: number;
        item_id?: string;
        item_ids?: string[];
    } & {
        account_id?: number;
        item_id?: string;
        item_ids?: string[] & string[] & { [K_2 in Exclude<keyof I_1["item_ids"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgServerToGCVictoryPredictions_Record>]: never; }>(object: I_1): CMsgServerToGCVictoryPredictions_Record;
};
export declare const CMsgServerToGCRequestStatus: {
    fromJSON(_: any): CMsgServerToGCRequestStatus;
    toJSON(_: CMsgServerToGCRequestStatus): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgServerToGCRequestStatus;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgServerToGCRequestStatus;
};
export declare const CMsgServerToGCRequestStatus_Response: {
    fromJSON(object: any): CMsgServerToGCRequestStatus_Response;
    toJSON(message: CMsgServerToGCRequestStatus_Response): unknown;
    create<I extends {
        response?: number;
    } & {
        response?: number;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgServerToGCRequestStatus_Response;
    fromPartial<I_1 extends {
        response?: number;
    } & {
        response?: number;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgServerToGCRequestStatus_Response;
};
export declare const CMsgSignOutAssassinMiniGameInfo: {
    fromJSON(object: any): CMsgSignOutAssassinMiniGameInfo;
    toJSON(message: CMsgSignOutAssassinMiniGameInfo): unknown;
    create<I extends {
        winning_players?: string[];
        losing_players?: string[];
        arcana_owners?: string[];
        assassin_won?: boolean;
        target_hero_id?: number;
        contract_completed?: boolean;
        contract_complete_time?: number;
        pa_is_radiant?: boolean;
    } & {
        winning_players?: string[] & string[] & { [K in Exclude<keyof I["winning_players"], keyof string[]>]: never; };
        losing_players?: string[] & string[] & { [K_1 in Exclude<keyof I["losing_players"], keyof string[]>]: never; };
        arcana_owners?: string[] & string[] & { [K_2 in Exclude<keyof I["arcana_owners"], keyof string[]>]: never; };
        assassin_won?: boolean;
        target_hero_id?: number;
        contract_completed?: boolean;
        contract_complete_time?: number;
        pa_is_radiant?: boolean;
    } & { [K_3 in Exclude<keyof I, keyof CMsgSignOutAssassinMiniGameInfo>]: never; }>(base?: I): CMsgSignOutAssassinMiniGameInfo;
    fromPartial<I_1 extends {
        winning_players?: string[];
        losing_players?: string[];
        arcana_owners?: string[];
        assassin_won?: boolean;
        target_hero_id?: number;
        contract_completed?: boolean;
        contract_complete_time?: number;
        pa_is_radiant?: boolean;
    } & {
        winning_players?: string[] & string[] & { [K_4 in Exclude<keyof I_1["winning_players"], keyof string[]>]: never; };
        losing_players?: string[] & string[] & { [K_5 in Exclude<keyof I_1["losing_players"], keyof string[]>]: never; };
        arcana_owners?: string[] & string[] & { [K_6 in Exclude<keyof I_1["arcana_owners"], keyof string[]>]: never; };
        assassin_won?: boolean;
        target_hero_id?: number;
        contract_completed?: boolean;
        contract_complete_time?: number;
        pa_is_radiant?: boolean;
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgSignOutAssassinMiniGameInfo>]: never; }>(object: I_1): CMsgSignOutAssassinMiniGameInfo;
};
export declare const CMsgServerToGCKillSummaries: {
    fromJSON(object: any): CMsgServerToGCKillSummaries;
    toJSON(message: CMsgServerToGCKillSummaries): unknown;
    create<I extends {
        ingameevent_id?: number;
        summaries?: {
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        }[];
    } & {
        ingameevent_id?: number;
        summaries?: {
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        }[] & ({
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        } & {
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        } & { [K in Exclude<keyof I["summaries"][number], keyof CMsgServerToGCKillSummaries_KillSummary>]: never; })[] & { [K_1 in Exclude<keyof I["summaries"], keyof {
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCKillSummaries>]: never; }>(base?: I): CMsgServerToGCKillSummaries;
    fromPartial<I_1 extends {
        ingameevent_id?: number;
        summaries?: {
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        }[];
    } & {
        ingameevent_id?: number;
        summaries?: {
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        }[] & ({
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        } & {
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        } & { [K_3 in Exclude<keyof I_1["summaries"][number], keyof CMsgServerToGCKillSummaries_KillSummary>]: never; })[] & { [K_4 in Exclude<keyof I_1["summaries"], keyof {
            killer_hero_id?: number;
            victim_hero_id?: number;
            kill_count?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCKillSummaries>]: never; }>(object: I_1): CMsgServerToGCKillSummaries;
};
export declare const CMsgServerToGCKillSummaries_KillSummary: {
    fromJSON(object: any): CMsgServerToGCKillSummaries_KillSummary;
    toJSON(message: CMsgServerToGCKillSummaries_KillSummary): unknown;
    create<I extends {
        killer_hero_id?: number;
        victim_hero_id?: number;
        kill_count?: number;
    } & {
        killer_hero_id?: number;
        victim_hero_id?: number;
        kill_count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCKillSummaries_KillSummary>]: never; }>(base?: I): CMsgServerToGCKillSummaries_KillSummary;
    fromPartial<I_1 extends {
        killer_hero_id?: number;
        victim_hero_id?: number;
        kill_count?: number;
    } & {
        killer_hero_id?: number;
        victim_hero_id?: number;
        kill_count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCKillSummaries_KillSummary>]: never; }>(object: I_1): CMsgServerToGCKillSummaries_KillSummary;
};
export declare const CMsgGCToServerPredictionResult: {
    fromJSON(object: any): CMsgGCToServerPredictionResult;
    toJSON(message: CMsgGCToServerPredictionResult): unknown;
    create<I extends {
        account_id?: number;
        match_id?: string;
        correct?: boolean;
        predictions?: {
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[];
        }[];
    } & {
        account_id?: number;
        match_id?: string;
        correct?: boolean;
        predictions?: {
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[];
        }[] & ({
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[];
        } & {
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[] & number[] & { [K in Exclude<keyof I["predictions"][number]["granted_item_defs"], keyof number[]>]: never; };
        } & { [K_1 in Exclude<keyof I["predictions"][number], keyof CMsgGCToServerPredictionResult_Prediction>]: never; })[] & { [K_2 in Exclude<keyof I["predictions"], keyof {
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[];
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgGCToServerPredictionResult>]: never; }>(base?: I): CMsgGCToServerPredictionResult;
    fromPartial<I_1 extends {
        account_id?: number;
        match_id?: string;
        correct?: boolean;
        predictions?: {
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[];
        }[];
    } & {
        account_id?: number;
        match_id?: string;
        correct?: boolean;
        predictions?: {
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[];
        }[] & ({
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[];
        } & {
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[] & number[] & { [K_4 in Exclude<keyof I_1["predictions"][number]["granted_item_defs"], keyof number[]>]: never; };
        } & { [K_5 in Exclude<keyof I_1["predictions"][number], keyof CMsgGCToServerPredictionResult_Prediction>]: never; })[] & { [K_6 in Exclude<keyof I_1["predictions"], keyof {
            item_def?: number;
            num_correct?: number;
            num_fails?: number;
            result?: CMsgGCToServerPredictionResult_Prediction_EResult;
            granted_item_defs?: number[];
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgGCToServerPredictionResult>]: never; }>(object: I_1): CMsgGCToServerPredictionResult;
};
export declare const CMsgGCToServerPredictionResult_Prediction: {
    fromJSON(object: any): CMsgGCToServerPredictionResult_Prediction;
    toJSON(message: CMsgGCToServerPredictionResult_Prediction): unknown;
    create<I extends {
        item_def?: number;
        num_correct?: number;
        num_fails?: number;
        result?: CMsgGCToServerPredictionResult_Prediction_EResult;
        granted_item_defs?: number[];
    } & {
        item_def?: number;
        num_correct?: number;
        num_fails?: number;
        result?: CMsgGCToServerPredictionResult_Prediction_EResult;
        granted_item_defs?: number[] & number[] & { [K in Exclude<keyof I["granted_item_defs"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgGCToServerPredictionResult_Prediction>]: never; }>(base?: I): CMsgGCToServerPredictionResult_Prediction;
    fromPartial<I_1 extends {
        item_def?: number;
        num_correct?: number;
        num_fails?: number;
        result?: CMsgGCToServerPredictionResult_Prediction_EResult;
        granted_item_defs?: number[];
    } & {
        item_def?: number;
        num_correct?: number;
        num_fails?: number;
        result?: CMsgGCToServerPredictionResult_Prediction_EResult;
        granted_item_defs?: number[] & number[] & { [K_2 in Exclude<keyof I_1["granted_item_defs"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgGCToServerPredictionResult_Prediction>]: never; }>(object: I_1): CMsgGCToServerPredictionResult_Prediction;
};
export declare const CMsgServerToGCLockCharmTrading: {
    fromJSON(object: any): CMsgServerToGCLockCharmTrading;
    toJSON(message: CMsgServerToGCLockCharmTrading): unknown;
    create<I extends {
        account_id?: number;
        item_id?: string;
    } & {
        account_id?: number;
        item_id?: string;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCLockCharmTrading>]: never; }>(base?: I): CMsgServerToGCLockCharmTrading;
    fromPartial<I_1 extends {
        account_id?: number;
        item_id?: string;
    } & {
        account_id?: number;
        item_id?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCLockCharmTrading>]: never; }>(object: I_1): CMsgServerToGCLockCharmTrading;
};
export declare const CMsgSignOutUpdatePlayerChallenge: {
    fromJSON(object: any): CMsgSignOutUpdatePlayerChallenge;
    toJSON(message: CMsgSignOutUpdatePlayerChallenge): unknown;
    create<I extends {
        account_id?: number;
        completed?: {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[];
        rerolled?: {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[];
        match_id?: string;
        hero_id?: number;
    } & {
        account_id?: number;
        completed?: {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[] & ({
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        } & {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        } & { [K in Exclude<keyof I["completed"][number], keyof CMsgSignOutUpdatePlayerChallenge_Challenge>]: never; })[] & { [K_1 in Exclude<keyof I["completed"], keyof {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[]>]: never; };
        rerolled?: {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[] & ({
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        } & {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        } & { [K_2 in Exclude<keyof I["rerolled"][number], keyof CMsgSignOutUpdatePlayerChallenge_Challenge>]: never; })[] & { [K_3 in Exclude<keyof I["rerolled"], keyof {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[]>]: never; };
        match_id?: string;
        hero_id?: number;
    } & { [K_4 in Exclude<keyof I, keyof CMsgSignOutUpdatePlayerChallenge>]: never; }>(base?: I): CMsgSignOutUpdatePlayerChallenge;
    fromPartial<I_1 extends {
        account_id?: number;
        completed?: {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[];
        rerolled?: {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[];
        match_id?: string;
        hero_id?: number;
    } & {
        account_id?: number;
        completed?: {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[] & ({
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        } & {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        } & { [K_5 in Exclude<keyof I_1["completed"][number], keyof CMsgSignOutUpdatePlayerChallenge_Challenge>]: never; })[] & { [K_6 in Exclude<keyof I_1["completed"], keyof {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[]>]: never; };
        rerolled?: {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[] & ({
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        } & {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        } & { [K_7 in Exclude<keyof I_1["rerolled"][number], keyof CMsgSignOutUpdatePlayerChallenge_Challenge>]: never; })[] & { [K_8 in Exclude<keyof I_1["rerolled"], keyof {
            event_id?: EEvent;
            slot_id?: number;
            sequence_id?: number;
            progress?: number;
            challenge_rank?: number;
        }[]>]: never; };
        match_id?: string;
        hero_id?: number;
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgSignOutUpdatePlayerChallenge>]: never; }>(object: I_1): CMsgSignOutUpdatePlayerChallenge;
};
export declare const CMsgSignOutUpdatePlayerChallenge_Challenge: {
    fromJSON(object: any): CMsgSignOutUpdatePlayerChallenge_Challenge;
    toJSON(message: CMsgSignOutUpdatePlayerChallenge_Challenge): unknown;
    create<I extends {
        event_id?: EEvent;
        slot_id?: number;
        sequence_id?: number;
        progress?: number;
        challenge_rank?: number;
    } & {
        event_id?: EEvent;
        slot_id?: number;
        sequence_id?: number;
        progress?: number;
        challenge_rank?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutUpdatePlayerChallenge_Challenge>]: never; }>(base?: I): CMsgSignOutUpdatePlayerChallenge_Challenge;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        slot_id?: number;
        sequence_id?: number;
        progress?: number;
        challenge_rank?: number;
    } & {
        event_id?: EEvent;
        slot_id?: number;
        sequence_id?: number;
        progress?: number;
        challenge_rank?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutUpdatePlayerChallenge_Challenge>]: never; }>(object: I_1): CMsgSignOutUpdatePlayerChallenge_Challenge;
};
export declare const CMsgServerToGCRerollPlayerChallenge: {
    fromJSON(object: any): CMsgServerToGCRerollPlayerChallenge;
    toJSON(message: CMsgServerToGCRerollPlayerChallenge): unknown;
    create<I extends {
        account_id?: number;
        reroll_msg?: {
            event_id?: EEvent;
            sequence_id?: number;
            hero_id?: number;
        };
    } & {
        account_id?: number;
        reroll_msg?: {
            event_id?: EEvent;
            sequence_id?: number;
            hero_id?: number;
        } & {
            event_id?: EEvent;
            sequence_id?: number;
            hero_id?: number;
        } & { [K in Exclude<keyof I["reroll_msg"], keyof CMsgClientToGCRerollPlayerChallenge>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgServerToGCRerollPlayerChallenge>]: never; }>(base?: I): CMsgServerToGCRerollPlayerChallenge;
    fromPartial<I_1 extends {
        account_id?: number;
        reroll_msg?: {
            event_id?: EEvent;
            sequence_id?: number;
            hero_id?: number;
        };
    } & {
        account_id?: number;
        reroll_msg?: {
            event_id?: EEvent;
            sequence_id?: number;
            hero_id?: number;
        } & {
            event_id?: EEvent;
            sequence_id?: number;
            hero_id?: number;
        } & { [K_2 in Exclude<keyof I_1["reroll_msg"], keyof CMsgClientToGCRerollPlayerChallenge>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgServerToGCRerollPlayerChallenge>]: never; }>(object: I_1): CMsgServerToGCRerollPlayerChallenge;
};
export declare const CMsgSpendWager: {
    fromJSON(object: any): CMsgSpendWager;
    toJSON(message: CMsgSpendWager): unknown;
    create<I extends {
        players?: {
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        }[];
        event_id?: EEvent;
        timestamp?: number;
        match_id?: string;
        server_steam_id?: string;
    } & {
        players?: {
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        }[] & ({
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        } & {
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        } & { [K in Exclude<keyof I["players"][number], keyof CMsgSpendWager_Player>]: never; })[] & { [K_1 in Exclude<keyof I["players"], keyof {
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        }[]>]: never; };
        event_id?: EEvent;
        timestamp?: number;
        match_id?: string;
        server_steam_id?: string;
    } & { [K_2 in Exclude<keyof I, keyof CMsgSpendWager>]: never; }>(base?: I): CMsgSpendWager;
    fromPartial<I_1 extends {
        players?: {
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        }[];
        event_id?: EEvent;
        timestamp?: number;
        match_id?: string;
        server_steam_id?: string;
    } & {
        players?: {
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        }[] & ({
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        } & {
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        } & { [K_3 in Exclude<keyof I_1["players"][number], keyof CMsgSpendWager_Player>]: never; })[] & { [K_4 in Exclude<keyof I_1["players"], keyof {
            account_id?: number;
            wager?: number;
            wager_token_item_id?: string;
        }[]>]: never; };
        event_id?: EEvent;
        timestamp?: number;
        match_id?: string;
        server_steam_id?: string;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSpendWager>]: never; }>(object: I_1): CMsgSpendWager;
};
export declare const CMsgSpendWager_Player: {
    fromJSON(object: any): CMsgSpendWager_Player;
    toJSON(message: CMsgSpendWager_Player): unknown;
    create<I extends {
        account_id?: number;
        wager?: number;
        wager_token_item_id?: string;
    } & {
        account_id?: number;
        wager?: number;
        wager_token_item_id?: string;
    } & { [K in Exclude<keyof I, keyof CMsgSpendWager_Player>]: never; }>(base?: I): CMsgSpendWager_Player;
    fromPartial<I_1 extends {
        account_id?: number;
        wager?: number;
        wager_token_item_id?: string;
    } & {
        account_id?: number;
        wager?: number;
        wager_token_item_id?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSpendWager_Player>]: never; }>(object: I_1): CMsgSpendWager_Player;
};
export declare const CMsgSignOutXPCoins: {
    fromJSON(object: any): CMsgSignOutXPCoins;
    toJSON(message: CMsgSignOutXPCoins): unknown;
    create<I extends {
        players?: {
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        }[];
        event_id?: EEvent;
        match_id?: string;
        timestamp?: number;
    } & {
        players?: {
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        }[] & ({
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        } & {
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        } & { [K in Exclude<keyof I["players"][number], keyof CMsgSignOutXPCoins_Player>]: never; })[] & { [K_1 in Exclude<keyof I["players"], keyof {
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        }[]>]: never; };
        event_id?: EEvent;
        match_id?: string;
        timestamp?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgSignOutXPCoins>]: never; }>(base?: I): CMsgSignOutXPCoins;
    fromPartial<I_1 extends {
        players?: {
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        }[];
        event_id?: EEvent;
        match_id?: string;
        timestamp?: number;
    } & {
        players?: {
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        }[] & ({
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        } & {
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        } & { [K_3 in Exclude<keyof I_1["players"][number], keyof CMsgSignOutXPCoins_Player>]: never; })[] & { [K_4 in Exclude<keyof I_1["players"], keyof {
            account_id?: number;
            xp_gained?: number;
            coins_spent?: number;
            wager_token_item_id?: string;
            rank_wager?: number;
            wager_streak?: number;
        }[]>]: never; };
        event_id?: EEvent;
        match_id?: string;
        timestamp?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSignOutXPCoins>]: never; }>(object: I_1): CMsgSignOutXPCoins;
};
export declare const CMsgSignOutXPCoins_Player: {
    fromJSON(object: any): CMsgSignOutXPCoins_Player;
    toJSON(message: CMsgSignOutXPCoins_Player): unknown;
    create<I extends {
        account_id?: number;
        xp_gained?: number;
        coins_spent?: number;
        wager_token_item_id?: string;
        rank_wager?: number;
        wager_streak?: number;
    } & {
        account_id?: number;
        xp_gained?: number;
        coins_spent?: number;
        wager_token_item_id?: string;
        rank_wager?: number;
        wager_streak?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutXPCoins_Player>]: never; }>(base?: I): CMsgSignOutXPCoins_Player;
    fromPartial<I_1 extends {
        account_id?: number;
        xp_gained?: number;
        coins_spent?: number;
        wager_token_item_id?: string;
        rank_wager?: number;
        wager_streak?: number;
    } & {
        account_id?: number;
        xp_gained?: number;
        coins_spent?: number;
        wager_token_item_id?: string;
        rank_wager?: number;
        wager_streak?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutXPCoins_Player>]: never; }>(object: I_1): CMsgSignOutXPCoins_Player;
};
export declare const CMsgSignOutBounties: {
    fromJSON(object: any): CMsgSignOutBounties;
    toJSON(message: CMsgSignOutBounties): unknown;
    create<I extends {
        bounties?: {
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        }[];
        event_id?: EEvent;
        match_id?: string;
        timestamp?: number;
    } & {
        bounties?: {
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        }[] & ({
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        } & {
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        } & { [K in Exclude<keyof I["bounties"][number], keyof CMsgSignOutBounties_Bounty>]: never; })[] & { [K_1 in Exclude<keyof I["bounties"], keyof {
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        }[]>]: never; };
        event_id?: EEvent;
        match_id?: string;
        timestamp?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgSignOutBounties>]: never; }>(base?: I): CMsgSignOutBounties;
    fromPartial<I_1 extends {
        bounties?: {
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        }[];
        event_id?: EEvent;
        match_id?: string;
        timestamp?: number;
    } & {
        bounties?: {
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        }[] & ({
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        } & {
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        } & { [K_3 in Exclude<keyof I_1["bounties"][number], keyof CMsgSignOutBounties_Bounty>]: never; })[] & { [K_4 in Exclude<keyof I_1["bounties"], keyof {
            issuer_account_id?: number;
            completer_account_id?: number;
            target_account_id?: number;
        }[]>]: never; };
        event_id?: EEvent;
        match_id?: string;
        timestamp?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSignOutBounties>]: never; }>(object: I_1): CMsgSignOutBounties;
};
export declare const CMsgSignOutBounties_Bounty: {
    fromJSON(object: any): CMsgSignOutBounties_Bounty;
    toJSON(message: CMsgSignOutBounties_Bounty): unknown;
    create<I extends {
        issuer_account_id?: number;
        completer_account_id?: number;
        target_account_id?: number;
    } & {
        issuer_account_id?: number;
        completer_account_id?: number;
        target_account_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutBounties_Bounty>]: never; }>(base?: I): CMsgSignOutBounties_Bounty;
    fromPartial<I_1 extends {
        issuer_account_id?: number;
        completer_account_id?: number;
        target_account_id?: number;
    } & {
        issuer_account_id?: number;
        completer_account_id?: number;
        target_account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutBounties_Bounty>]: never; }>(object: I_1): CMsgSignOutBounties_Bounty;
};
export declare const CMsgSignOutCommunityGoalProgress: {
    fromJSON(object: any): CMsgSignOutCommunityGoalProgress;
    toJSON(message: CMsgSignOutCommunityGoalProgress): unknown;
    create<I extends {
        event_id?: EEvent;
        event_increments?: {
            event_goal_id?: number;
            increment_amount?: number;
        }[];
    } & {
        event_id?: EEvent;
        event_increments?: {
            event_goal_id?: number;
            increment_amount?: number;
        }[] & ({
            event_goal_id?: number;
            increment_amount?: number;
        } & {
            event_goal_id?: number;
            increment_amount?: number;
        } & { [K in Exclude<keyof I["event_increments"][number], keyof CMsgSignOutCommunityGoalProgress_EventGoalIncrement>]: never; })[] & { [K_1 in Exclude<keyof I["event_increments"], keyof {
            event_goal_id?: number;
            increment_amount?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgSignOutCommunityGoalProgress>]: never; }>(base?: I): CMsgSignOutCommunityGoalProgress;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        event_increments?: {
            event_goal_id?: number;
            increment_amount?: number;
        }[];
    } & {
        event_id?: EEvent;
        event_increments?: {
            event_goal_id?: number;
            increment_amount?: number;
        }[] & ({
            event_goal_id?: number;
            increment_amount?: number;
        } & {
            event_goal_id?: number;
            increment_amount?: number;
        } & { [K_3 in Exclude<keyof I_1["event_increments"][number], keyof CMsgSignOutCommunityGoalProgress_EventGoalIncrement>]: never; })[] & { [K_4 in Exclude<keyof I_1["event_increments"], keyof {
            event_goal_id?: number;
            increment_amount?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSignOutCommunityGoalProgress>]: never; }>(object: I_1): CMsgSignOutCommunityGoalProgress;
};
export declare const CMsgSignOutCommunityGoalProgress_EventGoalIncrement: {
    fromJSON(object: any): CMsgSignOutCommunityGoalProgress_EventGoalIncrement;
    toJSON(message: CMsgSignOutCommunityGoalProgress_EventGoalIncrement): unknown;
    create<I extends {
        event_goal_id?: number;
        increment_amount?: number;
    } & {
        event_goal_id?: number;
        increment_amount?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutCommunityGoalProgress_EventGoalIncrement>]: never; }>(base?: I): CMsgSignOutCommunityGoalProgress_EventGoalIncrement;
    fromPartial<I_1 extends {
        event_goal_id?: number;
        increment_amount?: number;
    } & {
        event_goal_id?: number;
        increment_amount?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutCommunityGoalProgress_EventGoalIncrement>]: never; }>(object: I_1): CMsgSignOutCommunityGoalProgress_EventGoalIncrement;
};
export declare const CMsgServerToGCCloseCompendiumInGamePredictionVoting: {
    fromJSON(object: any): CMsgServerToGCCloseCompendiumInGamePredictionVoting;
    toJSON(message: CMsgServerToGCCloseCompendiumInGamePredictionVoting): unknown;
    create<I extends {
        match_id?: string;
        hltv_delay?: number;
        league_id?: number;
    } & {
        match_id?: string;
        hltv_delay?: number;
        league_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCCloseCompendiumInGamePredictionVoting>]: never; }>(base?: I): CMsgServerToGCCloseCompendiumInGamePredictionVoting;
    fromPartial<I_1 extends {
        match_id?: string;
        hltv_delay?: number;
        league_id?: number;
    } & {
        match_id?: string;
        hltv_delay?: number;
        league_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCCloseCompendiumInGamePredictionVoting>]: never; }>(object: I_1): CMsgServerToGCCloseCompendiumInGamePredictionVoting;
};
export declare const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse: {
    fromJSON(object: any): CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse;
    toJSON(message: CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse): unknown;
    create<I extends {
        result?: boolean;
    } & {
        result?: boolean;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse;
    fromPartial<I_1 extends {
        result?: boolean;
    } & {
        result?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse;
};
export declare const CMsgServerToGCCompendiumInGamePredictionResults: {
    fromJSON(object: any): CMsgServerToGCCompendiumInGamePredictionResults;
    toJSON(message: CMsgServerToGCCompendiumInGamePredictionResults): unknown;
    create<I extends {
        match_id?: string;
        results?: {
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        }[];
        league_id?: number;
        league_node_id?: number;
    } & {
        match_id?: string;
        results?: {
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        }[] & ({
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        } & {
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        } & { [K in Exclude<keyof I["results"][number], keyof CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>]: never; })[] & { [K_1 in Exclude<keyof I["results"], keyof {
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        }[]>]: never; };
        league_id?: number;
        league_node_id?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCCompendiumInGamePredictionResults>]: never; }>(base?: I): CMsgServerToGCCompendiumInGamePredictionResults;
    fromPartial<I_1 extends {
        match_id?: string;
        results?: {
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        }[];
        league_id?: number;
        league_node_id?: number;
    } & {
        match_id?: string;
        results?: {
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        }[] & ({
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        } & {
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        } & { [K_3 in Exclude<keyof I_1["results"][number], keyof CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>]: never; })[] & { [K_4 in Exclude<keyof I_1["results"], keyof {
            prediction_id?: number;
            prediction_value?: number;
            prediction_value_is_mask?: boolean;
        }[]>]: never; };
        league_id?: number;
        league_node_id?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCCompendiumInGamePredictionResults>]: never; }>(object: I_1): CMsgServerToGCCompendiumInGamePredictionResults;
};
export declare const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult: {
    fromJSON(object: any): CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult;
    toJSON(message: CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult): unknown;
    create<I extends {
        prediction_id?: number;
        prediction_value?: number;
        prediction_value_is_mask?: boolean;
    } & {
        prediction_id?: number;
        prediction_value?: number;
        prediction_value_is_mask?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>]: never; }>(base?: I): CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult;
    fromPartial<I_1 extends {
        prediction_id?: number;
        prediction_value?: number;
        prediction_value_is_mask?: boolean;
    } & {
        prediction_id?: number;
        prediction_value?: number;
        prediction_value_is_mask?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>]: never; }>(object: I_1): CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult;
};
export declare const CMsgServerToGCCompendiumChosenInGamePredictions: {
    fromJSON(object: any): CMsgServerToGCCompendiumChosenInGamePredictions;
    toJSON(message: CMsgServerToGCCompendiumChosenInGamePredictions): unknown;
    create<I extends {
        match_id?: string;
        predictions_chosen?: {
            prediction_id?: number;
        }[];
        league_id?: number;
    } & {
        match_id?: string;
        predictions_chosen?: {
            prediction_id?: number;
        }[] & ({
            prediction_id?: number;
        } & {
            prediction_id?: number;
        } & { [K in Exclude<keyof I["predictions_chosen"][number], "prediction_id">]: never; })[] & { [K_1 in Exclude<keyof I["predictions_chosen"], keyof {
            prediction_id?: number;
        }[]>]: never; };
        league_id?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCCompendiumChosenInGamePredictions>]: never; }>(base?: I): CMsgServerToGCCompendiumChosenInGamePredictions;
    fromPartial<I_1 extends {
        match_id?: string;
        predictions_chosen?: {
            prediction_id?: number;
        }[];
        league_id?: number;
    } & {
        match_id?: string;
        predictions_chosen?: {
            prediction_id?: number;
        }[] & ({
            prediction_id?: number;
        } & {
            prediction_id?: number;
        } & { [K_3 in Exclude<keyof I_1["predictions_chosen"][number], "prediction_id">]: never; })[] & { [K_4 in Exclude<keyof I_1["predictions_chosen"], keyof {
            prediction_id?: number;
        }[]>]: never; };
        league_id?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCCompendiumChosenInGamePredictions>]: never; }>(object: I_1): CMsgServerToGCCompendiumChosenInGamePredictions;
};
export declare const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction: {
    fromJSON(object: any): CMsgServerToGCCompendiumChosenInGamePredictions_Prediction;
    toJSON(message: CMsgServerToGCCompendiumChosenInGamePredictions_Prediction): unknown;
    create<I extends {
        prediction_id?: number;
    } & {
        prediction_id?: number;
    } & { [K in Exclude<keyof I, "prediction_id">]: never; }>(base?: I): CMsgServerToGCCompendiumChosenInGamePredictions_Prediction;
    fromPartial<I_1 extends {
        prediction_id?: number;
    } & {
        prediction_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "prediction_id">]: never; }>(object: I_1): CMsgServerToGCCompendiumChosenInGamePredictions_Prediction;
};
export declare const CMsgGCToGCCompendiumInGamePredictionResults: {
    fromJSON(object: any): CMsgGCToGCCompendiumInGamePredictionResults;
    toJSON(message: CMsgGCToGCCompendiumInGamePredictionResults): unknown;
    create<I extends {
        results?: {
            match_id?: string;
            results?: {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            }[];
            league_id?: number;
            league_node_id?: number;
        };
    } & {
        results?: {
            match_id?: string;
            results?: {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            }[];
            league_id?: number;
            league_node_id?: number;
        } & {
            match_id?: string;
            results?: {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            }[] & ({
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            } & {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            } & { [K in Exclude<keyof I["results"]["results"][number], keyof CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>]: never; })[] & { [K_1 in Exclude<keyof I["results"]["results"], keyof {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            }[]>]: never; };
            league_id?: number;
            league_node_id?: number;
        } & { [K_2 in Exclude<keyof I["results"], keyof CMsgServerToGCCompendiumInGamePredictionResults>]: never; };
    } & { [K_3 in Exclude<keyof I, "results">]: never; }>(base?: I): CMsgGCToGCCompendiumInGamePredictionResults;
    fromPartial<I_1 extends {
        results?: {
            match_id?: string;
            results?: {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            }[];
            league_id?: number;
            league_node_id?: number;
        };
    } & {
        results?: {
            match_id?: string;
            results?: {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            }[];
            league_id?: number;
            league_node_id?: number;
        } & {
            match_id?: string;
            results?: {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            }[] & ({
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            } & {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            } & { [K_4 in Exclude<keyof I_1["results"]["results"][number], keyof CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>]: never; })[] & { [K_5 in Exclude<keyof I_1["results"]["results"], keyof {
                prediction_id?: number;
                prediction_value?: number;
                prediction_value_is_mask?: boolean;
            }[]>]: never; };
            league_id?: number;
            league_node_id?: number;
        } & { [K_6 in Exclude<keyof I_1["results"], keyof CMsgServerToGCCompendiumInGamePredictionResults>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "results">]: never; }>(object: I_1): CMsgGCToGCCompendiumInGamePredictionResults;
};
export declare const CMsgServerToGCMatchPlayerItemPurchaseHistory: {
    fromJSON(object: any): CMsgServerToGCMatchPlayerItemPurchaseHistory;
    toJSON(message: CMsgServerToGCMatchPlayerItemPurchaseHistory): unknown;
    create<I extends {
        match_id?: string;
        mmr?: number;
        players?: {
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[];
            lane?: number;
            is_winner?: boolean;
        }[];
    } & {
        match_id?: string;
        mmr?: number;
        players?: {
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[];
            lane?: number;
            is_winner?: boolean;
        }[] & ({
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[];
            lane?: number;
            is_winner?: boolean;
        } & {
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["players"][number]["allied_hero_ids"], keyof number[]>]: never; };
            enemy_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["players"][number]["enemy_hero_ids"], keyof number[]>]: never; };
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[] & ({
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            } & {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[] & number[] & { [K_2 in Exclude<keyof I["players"][number]["item_purchases"][number]["inventory_items"], keyof number[]>]: never; };
                talents_skilled?: boolean[] & boolean[] & { [K_3 in Exclude<keyof I["players"][number]["item_purchases"][number]["talents_skilled"], keyof boolean[]>]: never; };
            } & { [K_4 in Exclude<keyof I["players"][number]["item_purchases"][number], keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>]: never; })[] & { [K_5 in Exclude<keyof I["players"][number]["item_purchases"], keyof {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[]>]: never; };
            lane?: number;
            is_winner?: boolean;
        } & { [K_6 in Exclude<keyof I["players"][number], keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>]: never; })[] & { [K_7 in Exclude<keyof I["players"], keyof {
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[];
            lane?: number;
            is_winner?: boolean;
        }[]>]: never; };
    } & { [K_8 in Exclude<keyof I, keyof CMsgServerToGCMatchPlayerItemPurchaseHistory>]: never; }>(base?: I): CMsgServerToGCMatchPlayerItemPurchaseHistory;
    fromPartial<I_1 extends {
        match_id?: string;
        mmr?: number;
        players?: {
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[];
            lane?: number;
            is_winner?: boolean;
        }[];
    } & {
        match_id?: string;
        mmr?: number;
        players?: {
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[];
            lane?: number;
            is_winner?: boolean;
        }[] & ({
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[];
            lane?: number;
            is_winner?: boolean;
        } & {
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[] & number[] & { [K_9 in Exclude<keyof I_1["players"][number]["allied_hero_ids"], keyof number[]>]: never; };
            enemy_hero_ids?: number[] & number[] & { [K_10 in Exclude<keyof I_1["players"][number]["enemy_hero_ids"], keyof number[]>]: never; };
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[] & ({
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            } & {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[] & number[] & { [K_11 in Exclude<keyof I_1["players"][number]["item_purchases"][number]["inventory_items"], keyof number[]>]: never; };
                talents_skilled?: boolean[] & boolean[] & { [K_12 in Exclude<keyof I_1["players"][number]["item_purchases"][number]["talents_skilled"], keyof boolean[]>]: never; };
            } & { [K_13 in Exclude<keyof I_1["players"][number]["item_purchases"][number], keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>]: never; })[] & { [K_14 in Exclude<keyof I_1["players"][number]["item_purchases"], keyof {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[]>]: never; };
            lane?: number;
            is_winner?: boolean;
        } & { [K_15 in Exclude<keyof I_1["players"][number], keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>]: never; })[] & { [K_16 in Exclude<keyof I_1["players"], keyof {
            player_slot?: number;
            account_id?: number;
            hero_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_purchases?: {
                item?: number;
                gold?: number;
                net_worth?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
            }[];
            lane?: number;
            is_winner?: boolean;
        }[]>]: never; };
    } & { [K_17 in Exclude<keyof I_1, keyof CMsgServerToGCMatchPlayerItemPurchaseHistory>]: never; }>(object: I_1): CMsgServerToGCMatchPlayerItemPurchaseHistory;
};
export declare const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase: {
    fromJSON(object: any): CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase;
    toJSON(message: CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase): unknown;
    create<I extends {
        item?: number;
        gold?: number;
        net_worth?: number;
        game_time?: number;
        inventory_items?: number[];
        talents_skilled?: boolean[];
    } & {
        item?: number;
        gold?: number;
        net_worth?: number;
        game_time?: number;
        inventory_items?: number[] & number[] & { [K in Exclude<keyof I["inventory_items"], keyof number[]>]: never; };
        talents_skilled?: boolean[] & boolean[] & { [K_1 in Exclude<keyof I["talents_skilled"], keyof boolean[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>]: never; }>(base?: I): CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase;
    fromPartial<I_1 extends {
        item?: number;
        gold?: number;
        net_worth?: number;
        game_time?: number;
        inventory_items?: number[];
        talents_skilled?: boolean[];
    } & {
        item?: number;
        gold?: number;
        net_worth?: number;
        game_time?: number;
        inventory_items?: number[] & number[] & { [K_3 in Exclude<keyof I_1["inventory_items"], keyof number[]>]: never; };
        talents_skilled?: boolean[] & boolean[] & { [K_4 in Exclude<keyof I_1["talents_skilled"], keyof boolean[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>]: never; }>(object: I_1): CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase;
};
export declare const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player: {
    fromJSON(object: any): CMsgServerToGCMatchPlayerItemPurchaseHistory_Player;
    toJSON(message: CMsgServerToGCMatchPlayerItemPurchaseHistory_Player): unknown;
    create<I extends {
        player_slot?: number;
        account_id?: number;
        hero_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        item_purchases?: {
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
        }[];
        lane?: number;
        is_winner?: boolean;
    } & {
        player_slot?: number;
        account_id?: number;
        hero_id?: number;
        allied_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["enemy_hero_ids"], keyof number[]>]: never; };
        item_purchases?: {
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
        }[] & ({
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
        } & {
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[] & number[] & { [K_2 in Exclude<keyof I["item_purchases"][number]["inventory_items"], keyof number[]>]: never; };
            talents_skilled?: boolean[] & boolean[] & { [K_3 in Exclude<keyof I["item_purchases"][number]["talents_skilled"], keyof boolean[]>]: never; };
        } & { [K_4 in Exclude<keyof I["item_purchases"][number], keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>]: never; })[] & { [K_5 in Exclude<keyof I["item_purchases"], keyof {
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
        }[]>]: never; };
        lane?: number;
        is_winner?: boolean;
    } & { [K_6 in Exclude<keyof I, keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>]: never; }>(base?: I): CMsgServerToGCMatchPlayerItemPurchaseHistory_Player;
    fromPartial<I_1 extends {
        player_slot?: number;
        account_id?: number;
        hero_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        item_purchases?: {
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
        }[];
        lane?: number;
        is_winner?: boolean;
    } & {
        player_slot?: number;
        account_id?: number;
        hero_id?: number;
        allied_hero_ids?: number[] & number[] & { [K_7 in Exclude<keyof I_1["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_8 in Exclude<keyof I_1["enemy_hero_ids"], keyof number[]>]: never; };
        item_purchases?: {
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
        }[] & ({
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
        } & {
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[] & number[] & { [K_9 in Exclude<keyof I_1["item_purchases"][number]["inventory_items"], keyof number[]>]: never; };
            talents_skilled?: boolean[] & boolean[] & { [K_10 in Exclude<keyof I_1["item_purchases"][number]["talents_skilled"], keyof boolean[]>]: never; };
        } & { [K_11 in Exclude<keyof I_1["item_purchases"][number], keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>]: never; })[] & { [K_12 in Exclude<keyof I_1["item_purchases"], keyof {
            item?: number;
            gold?: number;
            net_worth?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
        }[]>]: never; };
        lane?: number;
        is_winner?: boolean;
    } & { [K_13 in Exclude<keyof I_1, keyof CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>]: never; }>(object: I_1): CMsgServerToGCMatchPlayerItemPurchaseHistory_Player;
};
export declare const CMsgServerToGCMatchPlayerNeutralItemEquipHistory: {
    fromJSON(object: any): CMsgServerToGCMatchPlayerNeutralItemEquipHistory;
    toJSON(message: CMsgServerToGCMatchPlayerNeutralItemEquipHistory): unknown;
    create<I extends {
        match_id?: string;
        players?: {
            account_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[];
            is_winner?: boolean;
        }[];
    } & {
        match_id?: string;
        players?: {
            account_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[];
            is_winner?: boolean;
        }[] & ({
            account_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[];
            is_winner?: boolean;
        } & {
            account_id?: number;
            allied_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["players"][number]["allied_hero_ids"], keyof number[]>]: never; };
            enemy_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["players"][number]["enemy_hero_ids"], keyof number[]>]: never; };
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[] & ({
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            } & {
                item?: number;
                game_time?: number;
                inventory_items?: number[] & number[] & { [K_2 in Exclude<keyof I["players"][number]["item_equips"][number]["inventory_items"], keyof number[]>]: never; };
                talents_skilled?: boolean[] & boolean[] & { [K_3 in Exclude<keyof I["players"][number]["item_equips"][number]["talents_skilled"], keyof boolean[]>]: never; };
                available_neutral_items?: number[] & number[] & { [K_4 in Exclude<keyof I["players"][number]["item_equips"][number]["available_neutral_items"], keyof number[]>]: never; };
            } & { [K_5 in Exclude<keyof I["players"][number]["item_equips"][number], keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>]: never; })[] & { [K_6 in Exclude<keyof I["players"][number]["item_equips"], keyof {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[]>]: never; };
            is_winner?: boolean;
        } & { [K_7 in Exclude<keyof I["players"][number], keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>]: never; })[] & { [K_8 in Exclude<keyof I["players"], keyof {
            account_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[];
            is_winner?: boolean;
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I, keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory>]: never; }>(base?: I): CMsgServerToGCMatchPlayerNeutralItemEquipHistory;
    fromPartial<I_1 extends {
        match_id?: string;
        players?: {
            account_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[];
            is_winner?: boolean;
        }[];
    } & {
        match_id?: string;
        players?: {
            account_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[];
            is_winner?: boolean;
        }[] & ({
            account_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[];
            is_winner?: boolean;
        } & {
            account_id?: number;
            allied_hero_ids?: number[] & number[] & { [K_10 in Exclude<keyof I_1["players"][number]["allied_hero_ids"], keyof number[]>]: never; };
            enemy_hero_ids?: number[] & number[] & { [K_11 in Exclude<keyof I_1["players"][number]["enemy_hero_ids"], keyof number[]>]: never; };
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[] & ({
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            } & {
                item?: number;
                game_time?: number;
                inventory_items?: number[] & number[] & { [K_12 in Exclude<keyof I_1["players"][number]["item_equips"][number]["inventory_items"], keyof number[]>]: never; };
                talents_skilled?: boolean[] & boolean[] & { [K_13 in Exclude<keyof I_1["players"][number]["item_equips"][number]["talents_skilled"], keyof boolean[]>]: never; };
                available_neutral_items?: number[] & number[] & { [K_14 in Exclude<keyof I_1["players"][number]["item_equips"][number]["available_neutral_items"], keyof number[]>]: never; };
            } & { [K_15 in Exclude<keyof I_1["players"][number]["item_equips"][number], keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>]: never; })[] & { [K_16 in Exclude<keyof I_1["players"][number]["item_equips"], keyof {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[]>]: never; };
            is_winner?: boolean;
        } & { [K_17 in Exclude<keyof I_1["players"][number], keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>]: never; })[] & { [K_18 in Exclude<keyof I_1["players"], keyof {
            account_id?: number;
            allied_hero_ids?: number[];
            enemy_hero_ids?: number[];
            item_equips?: {
                item?: number;
                game_time?: number;
                inventory_items?: number[];
                talents_skilled?: boolean[];
                available_neutral_items?: number[];
            }[];
            is_winner?: boolean;
        }[]>]: never; };
    } & { [K_19 in Exclude<keyof I_1, keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory>]: never; }>(object: I_1): CMsgServerToGCMatchPlayerNeutralItemEquipHistory;
};
export declare const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip: {
    fromJSON(object: any): CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip;
    toJSON(message: CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip): unknown;
    create<I extends {
        item?: number;
        game_time?: number;
        inventory_items?: number[];
        talents_skilled?: boolean[];
        available_neutral_items?: number[];
    } & {
        item?: number;
        game_time?: number;
        inventory_items?: number[] & number[] & { [K in Exclude<keyof I["inventory_items"], keyof number[]>]: never; };
        talents_skilled?: boolean[] & boolean[] & { [K_1 in Exclude<keyof I["talents_skilled"], keyof boolean[]>]: never; };
        available_neutral_items?: number[] & number[] & { [K_2 in Exclude<keyof I["available_neutral_items"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>]: never; }>(base?: I): CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip;
    fromPartial<I_1 extends {
        item?: number;
        game_time?: number;
        inventory_items?: number[];
        talents_skilled?: boolean[];
        available_neutral_items?: number[];
    } & {
        item?: number;
        game_time?: number;
        inventory_items?: number[] & number[] & { [K_4 in Exclude<keyof I_1["inventory_items"], keyof number[]>]: never; };
        talents_skilled?: boolean[] & boolean[] & { [K_5 in Exclude<keyof I_1["talents_skilled"], keyof boolean[]>]: never; };
        available_neutral_items?: number[] & number[] & { [K_6 in Exclude<keyof I_1["available_neutral_items"], keyof number[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>]: never; }>(object: I_1): CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip;
};
export declare const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player: {
    fromJSON(object: any): CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player;
    toJSON(message: CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player): unknown;
    create<I extends {
        account_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        item_equips?: {
            item?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
            available_neutral_items?: number[];
        }[];
        is_winner?: boolean;
    } & {
        account_id?: number;
        allied_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["enemy_hero_ids"], keyof number[]>]: never; };
        item_equips?: {
            item?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
            available_neutral_items?: number[];
        }[] & ({
            item?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
            available_neutral_items?: number[];
        } & {
            item?: number;
            game_time?: number;
            inventory_items?: number[] & number[] & { [K_2 in Exclude<keyof I["item_equips"][number]["inventory_items"], keyof number[]>]: never; };
            talents_skilled?: boolean[] & boolean[] & { [K_3 in Exclude<keyof I["item_equips"][number]["talents_skilled"], keyof boolean[]>]: never; };
            available_neutral_items?: number[] & number[] & { [K_4 in Exclude<keyof I["item_equips"][number]["available_neutral_items"], keyof number[]>]: never; };
        } & { [K_5 in Exclude<keyof I["item_equips"][number], keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>]: never; })[] & { [K_6 in Exclude<keyof I["item_equips"], keyof {
            item?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
            available_neutral_items?: number[];
        }[]>]: never; };
        is_winner?: boolean;
    } & { [K_7 in Exclude<keyof I, keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>]: never; }>(base?: I): CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player;
    fromPartial<I_1 extends {
        account_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        item_equips?: {
            item?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
            available_neutral_items?: number[];
        }[];
        is_winner?: boolean;
    } & {
        account_id?: number;
        allied_hero_ids?: number[] & number[] & { [K_8 in Exclude<keyof I_1["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_9 in Exclude<keyof I_1["enemy_hero_ids"], keyof number[]>]: never; };
        item_equips?: {
            item?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
            available_neutral_items?: number[];
        }[] & ({
            item?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
            available_neutral_items?: number[];
        } & {
            item?: number;
            game_time?: number;
            inventory_items?: number[] & number[] & { [K_10 in Exclude<keyof I_1["item_equips"][number]["inventory_items"], keyof number[]>]: never; };
            talents_skilled?: boolean[] & boolean[] & { [K_11 in Exclude<keyof I_1["item_equips"][number]["talents_skilled"], keyof boolean[]>]: never; };
            available_neutral_items?: number[] & number[] & { [K_12 in Exclude<keyof I_1["item_equips"][number]["available_neutral_items"], keyof number[]>]: never; };
        } & { [K_13 in Exclude<keyof I_1["item_equips"][number], keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>]: never; })[] & { [K_14 in Exclude<keyof I_1["item_equips"], keyof {
            item?: number;
            game_time?: number;
            inventory_items?: number[];
            talents_skilled?: boolean[];
            available_neutral_items?: number[];
        }[]>]: never; };
        is_winner?: boolean;
    } & { [K_15 in Exclude<keyof I_1, keyof CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>]: never; }>(object: I_1): CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player;
};
export declare const CMsgServerToGCMatchStateHistory: {
    fromJSON(object: any): CMsgServerToGCMatchStateHistory;
    toJSON(message: CMsgServerToGCMatchStateHistory): unknown;
    create<I extends {
        match_id?: string;
        radiant_won?: boolean;
        mmr?: number;
        match_states?: {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        }[];
    } & {
        match_id?: string;
        radiant_won?: boolean;
        mmr?: number;
        match_states?: {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        }[] & ({
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        } & {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[] & ({
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & { [K in Exclude<keyof I["match_states"][number]["radiant_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_1 in Exclude<keyof I["match_states"][number]["radiant_state"]["player_states"], keyof {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[]>]: never; };
                tower_health_pct?: number[] & number[] & { [K_2 in Exclude<keyof I["match_states"][number]["radiant_state"]["tower_health_pct"], keyof number[]>]: never; };
                barracks_health_pct?: number[] & number[] & { [K_3 in Exclude<keyof I["match_states"][number]["radiant_state"]["barracks_health_pct"], keyof number[]>]: never; };
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & { [K_4 in Exclude<keyof I["match_states"][number]["radiant_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[] & ({
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & { [K_5 in Exclude<keyof I["match_states"][number]["dire_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_6 in Exclude<keyof I["match_states"][number]["dire_state"]["player_states"], keyof {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[]>]: never; };
                tower_health_pct?: number[] & number[] & { [K_7 in Exclude<keyof I["match_states"][number]["dire_state"]["tower_health_pct"], keyof number[]>]: never; };
                barracks_health_pct?: number[] & number[] & { [K_8 in Exclude<keyof I["match_states"][number]["dire_state"]["barracks_health_pct"], keyof number[]>]: never; };
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & { [K_9 in Exclude<keyof I["match_states"][number]["dire_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
        } & { [K_10 in Exclude<keyof I["match_states"][number], keyof CMsgServerToGCMatchStateHistory_MatchState>]: never; })[] & { [K_11 in Exclude<keyof I["match_states"], keyof {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        }[]>]: never; };
    } & { [K_12 in Exclude<keyof I, keyof CMsgServerToGCMatchStateHistory>]: never; }>(base?: I): CMsgServerToGCMatchStateHistory;
    fromPartial<I_1 extends {
        match_id?: string;
        radiant_won?: boolean;
        mmr?: number;
        match_states?: {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        }[];
    } & {
        match_id?: string;
        radiant_won?: boolean;
        mmr?: number;
        match_states?: {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        }[] & ({
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        } & {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[] & ({
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & { [K_13 in Exclude<keyof I_1["match_states"][number]["radiant_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_14 in Exclude<keyof I_1["match_states"][number]["radiant_state"]["player_states"], keyof {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[]>]: never; };
                tower_health_pct?: number[] & number[] & { [K_15 in Exclude<keyof I_1["match_states"][number]["radiant_state"]["tower_health_pct"], keyof number[]>]: never; };
                barracks_health_pct?: number[] & number[] & { [K_16 in Exclude<keyof I_1["match_states"][number]["radiant_state"]["barracks_health_pct"], keyof number[]>]: never; };
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & { [K_17 in Exclude<keyof I_1["match_states"][number]["radiant_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[] & ({
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & { [K_18 in Exclude<keyof I_1["match_states"][number]["dire_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_19 in Exclude<keyof I_1["match_states"][number]["dire_state"]["player_states"], keyof {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[]>]: never; };
                tower_health_pct?: number[] & number[] & { [K_20 in Exclude<keyof I_1["match_states"][number]["dire_state"]["tower_health_pct"], keyof number[]>]: never; };
                barracks_health_pct?: number[] & number[] & { [K_21 in Exclude<keyof I_1["match_states"][number]["dire_state"]["barracks_health_pct"], keyof number[]>]: never; };
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & { [K_22 in Exclude<keyof I_1["match_states"][number]["dire_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
        } & { [K_23 in Exclude<keyof I_1["match_states"][number], keyof CMsgServerToGCMatchStateHistory_MatchState>]: never; })[] & { [K_24 in Exclude<keyof I_1["match_states"], keyof {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        }[]>]: never; };
    } & { [K_25 in Exclude<keyof I_1, keyof CMsgServerToGCMatchStateHistory>]: never; }>(object: I_1): CMsgServerToGCMatchStateHistory;
};
export declare const CMsgServerToGCMatchStateHistory_PlayerState: {
    fromJSON(object: any): CMsgServerToGCMatchStateHistory_PlayerState;
    toJSON(message: CMsgServerToGCMatchStateHistory_PlayerState): unknown;
    create<I extends {
        hero_id?: number;
        net_worth?: number;
        level?: number;
        deaths?: number;
        respawn_time?: number;
        has_buyback?: boolean;
        has_aegis?: boolean;
        has_rapier?: boolean;
        distance?: number;
    } & {
        hero_id?: number;
        net_worth?: number;
        level?: number;
        deaths?: number;
        respawn_time?: number;
        has_buyback?: boolean;
        has_aegis?: boolean;
        has_rapier?: boolean;
        distance?: number;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; }>(base?: I): CMsgServerToGCMatchStateHistory_PlayerState;
    fromPartial<I_1 extends {
        hero_id?: number;
        net_worth?: number;
        level?: number;
        deaths?: number;
        respawn_time?: number;
        has_buyback?: boolean;
        has_aegis?: boolean;
        has_rapier?: boolean;
        distance?: number;
    } & {
        hero_id?: number;
        net_worth?: number;
        level?: number;
        deaths?: number;
        respawn_time?: number;
        has_buyback?: boolean;
        has_aegis?: boolean;
        has_rapier?: boolean;
        distance?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; }>(object: I_1): CMsgServerToGCMatchStateHistory_PlayerState;
};
export declare const CMsgServerToGCMatchStateHistory_TeamState: {
    fromJSON(object: any): CMsgServerToGCMatchStateHistory_TeamState;
    toJSON(message: CMsgServerToGCMatchStateHistory_TeamState): unknown;
    create<I extends {
        team?: number;
        player_states?: {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[];
        tower_health_pct?: number[];
        barracks_health_pct?: number[];
        ancient_health_pct?: number;
        glyph_cooldown?: number;
        kills?: number;
        creep_distance_safe?: number;
        creep_distance_mid?: number;
        creep_distance_off?: number;
    } & {
        team?: number;
        player_states?: {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[] & ({
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        } & {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        } & { [K in Exclude<keyof I["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_1 in Exclude<keyof I["player_states"], keyof {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[]>]: never; };
        tower_health_pct?: number[] & number[] & { [K_2 in Exclude<keyof I["tower_health_pct"], keyof number[]>]: never; };
        barracks_health_pct?: number[] & number[] & { [K_3 in Exclude<keyof I["barracks_health_pct"], keyof number[]>]: never; };
        ancient_health_pct?: number;
        glyph_cooldown?: number;
        kills?: number;
        creep_distance_safe?: number;
        creep_distance_mid?: number;
        creep_distance_off?: number;
    } & { [K_4 in Exclude<keyof I, keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; }>(base?: I): CMsgServerToGCMatchStateHistory_TeamState;
    fromPartial<I_1 extends {
        team?: number;
        player_states?: {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[];
        tower_health_pct?: number[];
        barracks_health_pct?: number[];
        ancient_health_pct?: number;
        glyph_cooldown?: number;
        kills?: number;
        creep_distance_safe?: number;
        creep_distance_mid?: number;
        creep_distance_off?: number;
    } & {
        team?: number;
        player_states?: {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[] & ({
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        } & {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        } & { [K_5 in Exclude<keyof I_1["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_6 in Exclude<keyof I_1["player_states"], keyof {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[]>]: never; };
        tower_health_pct?: number[] & number[] & { [K_7 in Exclude<keyof I_1["tower_health_pct"], keyof number[]>]: never; };
        barracks_health_pct?: number[] & number[] & { [K_8 in Exclude<keyof I_1["barracks_health_pct"], keyof number[]>]: never; };
        ancient_health_pct?: number;
        glyph_cooldown?: number;
        kills?: number;
        creep_distance_safe?: number;
        creep_distance_mid?: number;
        creep_distance_off?: number;
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; }>(object: I_1): CMsgServerToGCMatchStateHistory_TeamState;
};
export declare const CMsgServerToGCMatchStateHistory_MatchState: {
    fromJSON(object: any): CMsgServerToGCMatchStateHistory_MatchState;
    toJSON(message: CMsgServerToGCMatchStateHistory_MatchState): unknown;
    create<I extends {
        game_time?: number;
        radiant_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        };
        dire_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        };
    } & {
        game_time?: number;
        radiant_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[] & ({
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & { [K in Exclude<keyof I["radiant_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_1 in Exclude<keyof I["radiant_state"]["player_states"], keyof {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[]>]: never; };
            tower_health_pct?: number[] & number[] & { [K_2 in Exclude<keyof I["radiant_state"]["tower_health_pct"], keyof number[]>]: never; };
            barracks_health_pct?: number[] & number[] & { [K_3 in Exclude<keyof I["radiant_state"]["barracks_health_pct"], keyof number[]>]: never; };
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & { [K_4 in Exclude<keyof I["radiant_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
        dire_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[] & ({
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & { [K_5 in Exclude<keyof I["dire_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_6 in Exclude<keyof I["dire_state"]["player_states"], keyof {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[]>]: never; };
            tower_health_pct?: number[] & number[] & { [K_7 in Exclude<keyof I["dire_state"]["tower_health_pct"], keyof number[]>]: never; };
            barracks_health_pct?: number[] & number[] & { [K_8 in Exclude<keyof I["dire_state"]["barracks_health_pct"], keyof number[]>]: never; };
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & { [K_9 in Exclude<keyof I["dire_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
    } & { [K_10 in Exclude<keyof I, keyof CMsgServerToGCMatchStateHistory_MatchState>]: never; }>(base?: I): CMsgServerToGCMatchStateHistory_MatchState;
    fromPartial<I_1 extends {
        game_time?: number;
        radiant_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        };
        dire_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        };
    } & {
        game_time?: number;
        radiant_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[] & ({
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & { [K_11 in Exclude<keyof I_1["radiant_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_12 in Exclude<keyof I_1["radiant_state"]["player_states"], keyof {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[]>]: never; };
            tower_health_pct?: number[] & number[] & { [K_13 in Exclude<keyof I_1["radiant_state"]["tower_health_pct"], keyof number[]>]: never; };
            barracks_health_pct?: number[] & number[] & { [K_14 in Exclude<keyof I_1["radiant_state"]["barracks_health_pct"], keyof number[]>]: never; };
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & { [K_15 in Exclude<keyof I_1["radiant_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
        dire_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[] & ({
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & { [K_16 in Exclude<keyof I_1["dire_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_17 in Exclude<keyof I_1["dire_state"]["player_states"], keyof {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[]>]: never; };
            tower_health_pct?: number[] & number[] & { [K_18 in Exclude<keyof I_1["dire_state"]["tower_health_pct"], keyof number[]>]: never; };
            barracks_health_pct?: number[] & number[] & { [K_19 in Exclude<keyof I_1["dire_state"]["barracks_health_pct"], keyof number[]>]: never; };
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & { [K_20 in Exclude<keyof I_1["dire_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
    } & { [K_21 in Exclude<keyof I_1, keyof CMsgServerToGCMatchStateHistory_MatchState>]: never; }>(object: I_1): CMsgServerToGCMatchStateHistory_MatchState;
};
export declare const CMsgMatchStateSteamMLEntry: {
    fromJSON(object: any): CMsgMatchStateSteamMLEntry;
    toJSON(message: CMsgMatchStateSteamMLEntry): unknown;
    create<I extends {
        match_state?: {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        };
        mmr?: number;
        radiant_won?: boolean;
    } & {
        match_state?: {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        } & {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[] & ({
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & { [K in Exclude<keyof I["match_state"]["radiant_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_1 in Exclude<keyof I["match_state"]["radiant_state"]["player_states"], keyof {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[]>]: never; };
                tower_health_pct?: number[] & number[] & { [K_2 in Exclude<keyof I["match_state"]["radiant_state"]["tower_health_pct"], keyof number[]>]: never; };
                barracks_health_pct?: number[] & number[] & { [K_3 in Exclude<keyof I["match_state"]["radiant_state"]["barracks_health_pct"], keyof number[]>]: never; };
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & { [K_4 in Exclude<keyof I["match_state"]["radiant_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[] & ({
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & { [K_5 in Exclude<keyof I["match_state"]["dire_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_6 in Exclude<keyof I["match_state"]["dire_state"]["player_states"], keyof {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[]>]: never; };
                tower_health_pct?: number[] & number[] & { [K_7 in Exclude<keyof I["match_state"]["dire_state"]["tower_health_pct"], keyof number[]>]: never; };
                barracks_health_pct?: number[] & number[] & { [K_8 in Exclude<keyof I["match_state"]["dire_state"]["barracks_health_pct"], keyof number[]>]: never; };
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & { [K_9 in Exclude<keyof I["match_state"]["dire_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
        } & { [K_10 in Exclude<keyof I["match_state"], keyof CMsgServerToGCMatchStateHistory_MatchState>]: never; };
        mmr?: number;
        radiant_won?: boolean;
    } & { [K_11 in Exclude<keyof I, keyof CMsgMatchStateSteamMLEntry>]: never; }>(base?: I): CMsgMatchStateSteamMLEntry;
    fromPartial<I_1 extends {
        match_state?: {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        };
        mmr?: number;
        radiant_won?: boolean;
    } & {
        match_state?: {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            };
        } & {
            game_time?: number;
            radiant_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[] & ({
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & { [K_12 in Exclude<keyof I_1["match_state"]["radiant_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_13 in Exclude<keyof I_1["match_state"]["radiant_state"]["player_states"], keyof {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[]>]: never; };
                tower_health_pct?: number[] & number[] & { [K_14 in Exclude<keyof I_1["match_state"]["radiant_state"]["tower_health_pct"], keyof number[]>]: never; };
                barracks_health_pct?: number[] & number[] & { [K_15 in Exclude<keyof I_1["match_state"]["radiant_state"]["barracks_health_pct"], keyof number[]>]: never; };
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & { [K_16 in Exclude<keyof I_1["match_state"]["radiant_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
            dire_state?: {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[];
                tower_health_pct?: number[];
                barracks_health_pct?: number[];
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & {
                team?: number;
                player_states?: {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[] & ({
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                } & { [K_17 in Exclude<keyof I_1["match_state"]["dire_state"]["player_states"][number], keyof CMsgServerToGCMatchStateHistory_PlayerState>]: never; })[] & { [K_18 in Exclude<keyof I_1["match_state"]["dire_state"]["player_states"], keyof {
                    hero_id?: number;
                    net_worth?: number;
                    level?: number;
                    deaths?: number;
                    respawn_time?: number;
                    has_buyback?: boolean;
                    has_aegis?: boolean;
                    has_rapier?: boolean;
                    distance?: number;
                }[]>]: never; };
                tower_health_pct?: number[] & number[] & { [K_19 in Exclude<keyof I_1["match_state"]["dire_state"]["tower_health_pct"], keyof number[]>]: never; };
                barracks_health_pct?: number[] & number[] & { [K_20 in Exclude<keyof I_1["match_state"]["dire_state"]["barracks_health_pct"], keyof number[]>]: never; };
                ancient_health_pct?: number;
                glyph_cooldown?: number;
                kills?: number;
                creep_distance_safe?: number;
                creep_distance_mid?: number;
                creep_distance_off?: number;
            } & { [K_21 in Exclude<keyof I_1["match_state"]["dire_state"], keyof CMsgServerToGCMatchStateHistory_TeamState>]: never; };
        } & { [K_22 in Exclude<keyof I_1["match_state"], keyof CMsgServerToGCMatchStateHistory_MatchState>]: never; };
        mmr?: number;
        radiant_won?: boolean;
    } & { [K_23 in Exclude<keyof I_1, keyof CMsgMatchStateSteamMLEntry>]: never; }>(object: I_1): CMsgMatchStateSteamMLEntry;
};
export declare const CMsgLaneSelectionSteamMLEntry: {
    fromJSON(object: any): CMsgLaneSelectionSteamMLEntry;
    toJSON(message: CMsgLaneSelectionSteamMLEntry): unknown;
    create<I extends {
        hero_ids?: number[];
        lanes?: number[];
    } & {
        hero_ids?: number[] & number[] & { [K in Exclude<keyof I["hero_ids"], keyof number[]>]: never; };
        lanes?: number[] & number[] & { [K_1 in Exclude<keyof I["lanes"], keyof number[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgLaneSelectionSteamMLEntry>]: never; }>(base?: I): CMsgLaneSelectionSteamMLEntry;
    fromPartial<I_1 extends {
        hero_ids?: number[];
        lanes?: number[];
    } & {
        hero_ids?: number[] & number[] & { [K_3 in Exclude<keyof I_1["hero_ids"], keyof number[]>]: never; };
        lanes?: number[] & number[] & { [K_4 in Exclude<keyof I_1["lanes"], keyof number[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgLaneSelectionSteamMLEntry>]: never; }>(object: I_1): CMsgLaneSelectionSteamMLEntry;
};
export declare const CMsgAbilitySelectionSteamMLEntry: {
    fromJSON(object: any): CMsgAbilitySelectionSteamMLEntry;
    toJSON(message: CMsgAbilitySelectionSteamMLEntry): unknown;
    create<I extends {
        mmr?: number;
        hero_id?: number;
        enemy_hero_ids?: number[];
        lane?: number;
        abilities?: number[];
        selected_ability?: number;
    } & {
        mmr?: number;
        hero_id?: number;
        enemy_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["enemy_hero_ids"], keyof number[]>]: never; };
        lane?: number;
        abilities?: number[] & number[] & { [K_1 in Exclude<keyof I["abilities"], keyof number[]>]: never; };
        selected_ability?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgAbilitySelectionSteamMLEntry>]: never; }>(base?: I): CMsgAbilitySelectionSteamMLEntry;
    fromPartial<I_1 extends {
        mmr?: number;
        hero_id?: number;
        enemy_hero_ids?: number[];
        lane?: number;
        abilities?: number[];
        selected_ability?: number;
    } & {
        mmr?: number;
        hero_id?: number;
        enemy_hero_ids?: number[] & number[] & { [K_3 in Exclude<keyof I_1["enemy_hero_ids"], keyof number[]>]: never; };
        lane?: number;
        abilities?: number[] & number[] & { [K_4 in Exclude<keyof I_1["abilities"], keyof number[]>]: never; };
        selected_ability?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgAbilitySelectionSteamMLEntry>]: never; }>(object: I_1): CMsgAbilitySelectionSteamMLEntry;
};
export declare const CMsgItemPurchasePregameSteamMLEntry: {
    fromJSON(object: any): CMsgItemPurchasePregameSteamMLEntry;
    toJSON(message: CMsgItemPurchasePregameSteamMLEntry): unknown;
    create<I extends {
        mmr?: number;
        lane?: number;
        balance?: number;
        hero_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        items?: number[];
    } & {
        mmr?: number;
        lane?: number;
        balance?: number;
        hero_id?: number;
        allied_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["enemy_hero_ids"], keyof number[]>]: never; };
        items?: number[] & number[] & { [K_2 in Exclude<keyof I["items"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgItemPurchasePregameSteamMLEntry>]: never; }>(base?: I): CMsgItemPurchasePregameSteamMLEntry;
    fromPartial<I_1 extends {
        mmr?: number;
        lane?: number;
        balance?: number;
        hero_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        items?: number[];
    } & {
        mmr?: number;
        lane?: number;
        balance?: number;
        hero_id?: number;
        allied_hero_ids?: number[] & number[] & { [K_4 in Exclude<keyof I_1["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_5 in Exclude<keyof I_1["enemy_hero_ids"], keyof number[]>]: never; };
        items?: number[] & number[] & { [K_6 in Exclude<keyof I_1["items"], keyof number[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgItemPurchasePregameSteamMLEntry>]: never; }>(object: I_1): CMsgItemPurchasePregameSteamMLEntry;
};
export declare const CMsgItemPurchaseSteamMLEntry: {
    fromJSON(object: any): CMsgItemPurchaseSteamMLEntry;
    toJSON(message: CMsgItemPurchaseSteamMLEntry): unknown;
    create<I extends {
        mmr?: number;
        lane?: number;
        hero_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        items?: number[];
        items_to_be_purchased?: number[];
    } & {
        mmr?: number;
        lane?: number;
        hero_id?: number;
        allied_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["enemy_hero_ids"], keyof number[]>]: never; };
        items?: number[] & number[] & { [K_2 in Exclude<keyof I["items"], keyof number[]>]: never; };
        items_to_be_purchased?: number[] & number[] & { [K_3 in Exclude<keyof I["items_to_be_purchased"], keyof number[]>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgItemPurchaseSteamMLEntry>]: never; }>(base?: I): CMsgItemPurchaseSteamMLEntry;
    fromPartial<I_1 extends {
        mmr?: number;
        lane?: number;
        hero_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        items?: number[];
        items_to_be_purchased?: number[];
    } & {
        mmr?: number;
        lane?: number;
        hero_id?: number;
        allied_hero_ids?: number[] & number[] & { [K_5 in Exclude<keyof I_1["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_6 in Exclude<keyof I_1["enemy_hero_ids"], keyof number[]>]: never; };
        items?: number[] & number[] & { [K_7 in Exclude<keyof I_1["items"], keyof number[]>]: never; };
        items_to_be_purchased?: number[] & number[] & { [K_8 in Exclude<keyof I_1["items_to_be_purchased"], keyof number[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgItemPurchaseSteamMLEntry>]: never; }>(object: I_1): CMsgItemPurchaseSteamMLEntry;
};
export declare const CMsgItemPurchaseSequenceSteamMLEntry: {
    fromJSON(object: any): CMsgItemPurchaseSequenceSteamMLEntry;
    toJSON(message: CMsgItemPurchaseSequenceSteamMLEntry): unknown;
    create<I extends {
        mmr?: number;
        lane?: number;
        hero_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        items?: number[];
        item_to_be_purchased?: number;
    } & {
        mmr?: number;
        lane?: number;
        hero_id?: number;
        allied_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["enemy_hero_ids"], keyof number[]>]: never; };
        items?: number[] & number[] & { [K_2 in Exclude<keyof I["items"], keyof number[]>]: never; };
        item_to_be_purchased?: number;
    } & { [K_3 in Exclude<keyof I, keyof CMsgItemPurchaseSequenceSteamMLEntry>]: never; }>(base?: I): CMsgItemPurchaseSequenceSteamMLEntry;
    fromPartial<I_1 extends {
        mmr?: number;
        lane?: number;
        hero_id?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
        items?: number[];
        item_to_be_purchased?: number;
    } & {
        mmr?: number;
        lane?: number;
        hero_id?: number;
        allied_hero_ids?: number[] & number[] & { [K_4 in Exclude<keyof I_1["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_5 in Exclude<keyof I_1["enemy_hero_ids"], keyof number[]>]: never; };
        items?: number[] & number[] & { [K_6 in Exclude<keyof I_1["items"], keyof number[]>]: never; };
        item_to_be_purchased?: number;
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgItemPurchaseSequenceSteamMLEntry>]: never; }>(object: I_1): CMsgItemPurchaseSequenceSteamMLEntry;
};
export declare const CMsgServerToGCCavernCrawlIsHeroActive: {
    fromJSON(object: any): CMsgServerToGCCavernCrawlIsHeroActive;
    toJSON(message: CMsgServerToGCCavernCrawlIsHeroActive): unknown;
    create<I extends {
        event_id?: number;
        account_id?: number;
        preferred_map_variant?: number;
        hero_id?: number;
        turbo_mode?: boolean;
    } & {
        event_id?: number;
        account_id?: number;
        preferred_map_variant?: number;
        hero_id?: number;
        turbo_mode?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCCavernCrawlIsHeroActive>]: never; }>(base?: I): CMsgServerToGCCavernCrawlIsHeroActive;
    fromPartial<I_1 extends {
        event_id?: number;
        account_id?: number;
        preferred_map_variant?: number;
        hero_id?: number;
        turbo_mode?: boolean;
    } & {
        event_id?: number;
        account_id?: number;
        preferred_map_variant?: number;
        hero_id?: number;
        turbo_mode?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCCavernCrawlIsHeroActive>]: never; }>(object: I_1): CMsgServerToGCCavernCrawlIsHeroActive;
};
export declare const CMsgServerToGCPlayerChallengeHistory: {
    fromJSON(object: any): CMsgServerToGCPlayerChallengeHistory;
    toJSON(message: CMsgServerToGCPlayerChallengeHistory): unknown;
    create<I extends {
        match_id?: string;
        average_rank?: number;
        challenge_records?: {
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        }[];
    } & {
        match_id?: string;
        average_rank?: number;
        challenge_records?: {
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        }[] & ({
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        } & {
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        } & { [K in Exclude<keyof I["challenge_records"][number], keyof CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>]: never; })[] & { [K_1 in Exclude<keyof I["challenge_records"], keyof {
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCPlayerChallengeHistory>]: never; }>(base?: I): CMsgServerToGCPlayerChallengeHistory;
    fromPartial<I_1 extends {
        match_id?: string;
        average_rank?: number;
        challenge_records?: {
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        }[];
    } & {
        match_id?: string;
        average_rank?: number;
        challenge_records?: {
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        }[] & ({
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        } & {
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        } & { [K_3 in Exclude<keyof I_1["challenge_records"][number], keyof CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>]: never; })[] & { [K_4 in Exclude<keyof I_1["challenge_records"], keyof {
            account_id?: number;
            challenge_type?: EPlayerChallengeHistoryType;
            challenge_id1?: number;
            challenge_id2?: number;
            progress_value_start?: number;
            progress_value_end?: number;
            team_won?: boolean;
            audit_data?: string;
            hero_id?: number;
            rank_completed?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCPlayerChallengeHistory>]: never; }>(object: I_1): CMsgServerToGCPlayerChallengeHistory;
};
export declare const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge: {
    fromJSON(object: any): CMsgServerToGCPlayerChallengeHistory_PlayerChallenge;
    toJSON(message: CMsgServerToGCPlayerChallengeHistory_PlayerChallenge): unknown;
    create<I extends {
        account_id?: number;
        challenge_type?: EPlayerChallengeHistoryType;
        challenge_id1?: number;
        challenge_id2?: number;
        progress_value_start?: number;
        progress_value_end?: number;
        team_won?: boolean;
        audit_data?: string;
        hero_id?: number;
        rank_completed?: number;
    } & {
        account_id?: number;
        challenge_type?: EPlayerChallengeHistoryType;
        challenge_id1?: number;
        challenge_id2?: number;
        progress_value_start?: number;
        progress_value_end?: number;
        team_won?: boolean;
        audit_data?: string;
        hero_id?: number;
        rank_completed?: number;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>]: never; }>(base?: I): CMsgServerToGCPlayerChallengeHistory_PlayerChallenge;
    fromPartial<I_1 extends {
        account_id?: number;
        challenge_type?: EPlayerChallengeHistoryType;
        challenge_id1?: number;
        challenge_id2?: number;
        progress_value_start?: number;
        progress_value_end?: number;
        team_won?: boolean;
        audit_data?: string;
        hero_id?: number;
        rank_completed?: number;
    } & {
        account_id?: number;
        challenge_type?: EPlayerChallengeHistoryType;
        challenge_id1?: number;
        challenge_id2?: number;
        progress_value_start?: number;
        progress_value_end?: number;
        team_won?: boolean;
        audit_data?: string;
        hero_id?: number;
        rank_completed?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>]: never; }>(object: I_1): CMsgServerToGCPlayerChallengeHistory_PlayerChallenge;
};
export declare const CMsgServerToGCCavernCrawlIsHeroActiveResponse: {
    fromJSON(object: any): CMsgServerToGCCavernCrawlIsHeroActiveResponse;
    toJSON(message: CMsgServerToGCCavernCrawlIsHeroActiveResponse): unknown;
    create<I extends {
        result?: boolean;
        map_variant?: number;
        potential_winnings?: number;
        map_results?: {
            path_id_completed?: number;
            room_id_claimed?: number;
        }[];
        potential_plus_shard_winnings?: number;
    } & {
        result?: boolean;
        map_variant?: number;
        potential_winnings?: number;
        map_results?: {
            path_id_completed?: number;
            room_id_claimed?: number;
        }[] & ({
            path_id_completed?: number;
            room_id_claimed?: number;
        } & {
            path_id_completed?: number;
            room_id_claimed?: number;
        } & { [K in Exclude<keyof I["map_results"][number], keyof CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>]: never; })[] & { [K_1 in Exclude<keyof I["map_results"], keyof {
            path_id_completed?: number;
            room_id_claimed?: number;
        }[]>]: never; };
        potential_plus_shard_winnings?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCCavernCrawlIsHeroActiveResponse>]: never; }>(base?: I): CMsgServerToGCCavernCrawlIsHeroActiveResponse;
    fromPartial<I_1 extends {
        result?: boolean;
        map_variant?: number;
        potential_winnings?: number;
        map_results?: {
            path_id_completed?: number;
            room_id_claimed?: number;
        }[];
        potential_plus_shard_winnings?: number;
    } & {
        result?: boolean;
        map_variant?: number;
        potential_winnings?: number;
        map_results?: {
            path_id_completed?: number;
            room_id_claimed?: number;
        }[] & ({
            path_id_completed?: number;
            room_id_claimed?: number;
        } & {
            path_id_completed?: number;
            room_id_claimed?: number;
        } & { [K_3 in Exclude<keyof I_1["map_results"][number], keyof CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>]: never; })[] & { [K_4 in Exclude<keyof I_1["map_results"], keyof {
            path_id_completed?: number;
            room_id_claimed?: number;
        }[]>]: never; };
        potential_plus_shard_winnings?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCCavernCrawlIsHeroActiveResponse>]: never; }>(object: I_1): CMsgServerToGCCavernCrawlIsHeroActiveResponse;
};
export declare const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults: {
    fromJSON(object: any): CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults;
    toJSON(message: CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults): unknown;
    create<I extends {
        path_id_completed?: number;
        room_id_claimed?: number;
    } & {
        path_id_completed?: number;
        room_id_claimed?: number;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>]: never; }>(base?: I): CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults;
    fromPartial<I_1 extends {
        path_id_completed?: number;
        room_id_claimed?: number;
    } & {
        path_id_completed?: number;
        room_id_claimed?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>]: never; }>(object: I_1): CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults;
};
export declare const CMsgGCtoServerTensorflowInstance: {
    fromJSON(object: any): CMsgGCtoServerTensorflowInstance;
    toJSON(message: CMsgGCtoServerTensorflowInstance): unknown;
    create<I extends {
        server_instance?: number;
    } & {
        server_instance?: number;
    } & { [K in Exclude<keyof I, "server_instance">]: never; }>(base?: I): CMsgGCtoServerTensorflowInstance;
    fromPartial<I_1 extends {
        server_instance?: number;
    } & {
        server_instance?: number;
    } & { [K_1 in Exclude<keyof I_1, "server_instance">]: never; }>(object: I_1): CMsgGCtoServerTensorflowInstance;
};
export declare const CMsgDetailedGameStats: {
    fromJSON(object: any): CMsgDetailedGameStats;
    toJSON(message: CMsgDetailedGameStats): unknown;
    create<I extends {
        minutes?: {
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[];
        }[];
        player_info?: {
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        }[];
        game_stats?: {
            tower_death_time_t1?: number;
            tower_death_time_t2?: number;
            tower_death_time_t3?: number;
        };
    } & {
        minutes?: {
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[];
        }[] & ({
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[];
        } & {
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[] & ({
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            } & {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            } & { [K in Exclude<keyof I["minutes"][number]["stats"][number], keyof CMsgDetailedGameStats_PlayerStatEntry>]: never; })[] & { [K_1 in Exclude<keyof I["minutes"][number]["stats"], keyof {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["minutes"][number], keyof CMsgDetailedGameStats_MinuteEntry>]: never; })[] & { [K_3 in Exclude<keyof I["minutes"], keyof {
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[];
        }[]>]: never; };
        player_info?: {
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        }[] & ({
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        } & {
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        } & { [K_4 in Exclude<keyof I["player_info"][number], keyof CMsgDetailedGameStats_PlayerInfo>]: never; })[] & { [K_5 in Exclude<keyof I["player_info"], keyof {
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        }[]>]: never; };
        game_stats?: {
            tower_death_time_t1?: number;
            tower_death_time_t2?: number;
            tower_death_time_t3?: number;
        } & {
            tower_death_time_t1?: number;
            tower_death_time_t2?: number;
            tower_death_time_t3?: number;
        } & { [K_6 in Exclude<keyof I["game_stats"], keyof CMsgDetailedGameStats_GameStats>]: never; };
    } & { [K_7 in Exclude<keyof I, keyof CMsgDetailedGameStats>]: never; }>(base?: I): CMsgDetailedGameStats;
    fromPartial<I_1 extends {
        minutes?: {
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[];
        }[];
        player_info?: {
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        }[];
        game_stats?: {
            tower_death_time_t1?: number;
            tower_death_time_t2?: number;
            tower_death_time_t3?: number;
        };
    } & {
        minutes?: {
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[];
        }[] & ({
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[];
        } & {
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[] & ({
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            } & {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            } & { [K_8 in Exclude<keyof I_1["minutes"][number]["stats"][number], keyof CMsgDetailedGameStats_PlayerStatEntry>]: never; })[] & { [K_9 in Exclude<keyof I_1["minutes"][number]["stats"], keyof {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[]>]: never; };
        } & { [K_10 in Exclude<keyof I_1["minutes"][number], keyof CMsgDetailedGameStats_MinuteEntry>]: never; })[] & { [K_11 in Exclude<keyof I_1["minutes"], keyof {
            minute?: number;
            stats?: {
                total_earned_gold?: number;
                total_networth?: number;
                level?: number;
                total_dps?: number;
                average_dps?: number;
                ability_damage_output?: number;
                base_health?: number;
                total_health?: number;
                total_mana?: number;
                base_physical_damage_reduction_pct?: number;
                total_physical_damage_reduction_pct?: number;
                base_ability_damage_reduction_pct?: number;
                total_ability_damage_reduction_pct?: number;
                ability_damage_block?: number;
                physical_damage_block?: number;
                mana_regen?: number;
                health_regen?: number;
                physical_magic_dmg_pct?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                gold_from_kills?: number;
                gold_from_creeps?: number;
                gold_shared?: number;
                xp_from_kills?: number;
                xp_from_creeps?: number;
                total_xp?: number;
                ability_casts?: number;
                item_casts?: number;
                total_time_stunned?: number;
                item_count?: number;
            }[];
        }[]>]: never; };
        player_info?: {
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        }[] & ({
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        } & {
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        } & { [K_12 in Exclude<keyof I_1["player_info"][number], keyof CMsgDetailedGameStats_PlayerInfo>]: never; })[] & { [K_13 in Exclude<keyof I_1["player_info"], keyof {
            account_id?: number;
            hero_id?: number;
            player_slot?: number;
        }[]>]: never; };
        game_stats?: {
            tower_death_time_t1?: number;
            tower_death_time_t2?: number;
            tower_death_time_t3?: number;
        } & {
            tower_death_time_t1?: number;
            tower_death_time_t2?: number;
            tower_death_time_t3?: number;
        } & { [K_14 in Exclude<keyof I_1["game_stats"], keyof CMsgDetailedGameStats_GameStats>]: never; };
    } & { [K_15 in Exclude<keyof I_1, keyof CMsgDetailedGameStats>]: never; }>(object: I_1): CMsgDetailedGameStats;
};
export declare const CMsgDetailedGameStats_PlayerStatEntry: {
    fromJSON(object: any): CMsgDetailedGameStats_PlayerStatEntry;
    toJSON(message: CMsgDetailedGameStats_PlayerStatEntry): unknown;
    create<I extends {
        total_earned_gold?: number;
        total_networth?: number;
        level?: number;
        total_dps?: number;
        average_dps?: number;
        ability_damage_output?: number;
        base_health?: number;
        total_health?: number;
        total_mana?: number;
        base_physical_damage_reduction_pct?: number;
        total_physical_damage_reduction_pct?: number;
        base_ability_damage_reduction_pct?: number;
        total_ability_damage_reduction_pct?: number;
        ability_damage_block?: number;
        physical_damage_block?: number;
        mana_regen?: number;
        health_regen?: number;
        physical_magic_dmg_pct?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        gold_from_kills?: number;
        gold_from_creeps?: number;
        gold_shared?: number;
        xp_from_kills?: number;
        xp_from_creeps?: number;
        total_xp?: number;
        ability_casts?: number;
        item_casts?: number;
        total_time_stunned?: number;
        item_count?: number;
    } & {
        total_earned_gold?: number;
        total_networth?: number;
        level?: number;
        total_dps?: number;
        average_dps?: number;
        ability_damage_output?: number;
        base_health?: number;
        total_health?: number;
        total_mana?: number;
        base_physical_damage_reduction_pct?: number;
        total_physical_damage_reduction_pct?: number;
        base_ability_damage_reduction_pct?: number;
        total_ability_damage_reduction_pct?: number;
        ability_damage_block?: number;
        physical_damage_block?: number;
        mana_regen?: number;
        health_regen?: number;
        physical_magic_dmg_pct?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        gold_from_kills?: number;
        gold_from_creeps?: number;
        gold_shared?: number;
        xp_from_kills?: number;
        xp_from_creeps?: number;
        total_xp?: number;
        ability_casts?: number;
        item_casts?: number;
        total_time_stunned?: number;
        item_count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDetailedGameStats_PlayerStatEntry>]: never; }>(base?: I): CMsgDetailedGameStats_PlayerStatEntry;
    fromPartial<I_1 extends {
        total_earned_gold?: number;
        total_networth?: number;
        level?: number;
        total_dps?: number;
        average_dps?: number;
        ability_damage_output?: number;
        base_health?: number;
        total_health?: number;
        total_mana?: number;
        base_physical_damage_reduction_pct?: number;
        total_physical_damage_reduction_pct?: number;
        base_ability_damage_reduction_pct?: number;
        total_ability_damage_reduction_pct?: number;
        ability_damage_block?: number;
        physical_damage_block?: number;
        mana_regen?: number;
        health_regen?: number;
        physical_magic_dmg_pct?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        gold_from_kills?: number;
        gold_from_creeps?: number;
        gold_shared?: number;
        xp_from_kills?: number;
        xp_from_creeps?: number;
        total_xp?: number;
        ability_casts?: number;
        item_casts?: number;
        total_time_stunned?: number;
        item_count?: number;
    } & {
        total_earned_gold?: number;
        total_networth?: number;
        level?: number;
        total_dps?: number;
        average_dps?: number;
        ability_damage_output?: number;
        base_health?: number;
        total_health?: number;
        total_mana?: number;
        base_physical_damage_reduction_pct?: number;
        total_physical_damage_reduction_pct?: number;
        base_ability_damage_reduction_pct?: number;
        total_ability_damage_reduction_pct?: number;
        ability_damage_block?: number;
        physical_damage_block?: number;
        mana_regen?: number;
        health_regen?: number;
        physical_magic_dmg_pct?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        gold_from_kills?: number;
        gold_from_creeps?: number;
        gold_shared?: number;
        xp_from_kills?: number;
        xp_from_creeps?: number;
        total_xp?: number;
        ability_casts?: number;
        item_casts?: number;
        total_time_stunned?: number;
        item_count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDetailedGameStats_PlayerStatEntry>]: never; }>(object: I_1): CMsgDetailedGameStats_PlayerStatEntry;
};
export declare const CMsgDetailedGameStats_GameStats: {
    fromJSON(object: any): CMsgDetailedGameStats_GameStats;
    toJSON(message: CMsgDetailedGameStats_GameStats): unknown;
    create<I extends {
        tower_death_time_t1?: number;
        tower_death_time_t2?: number;
        tower_death_time_t3?: number;
    } & {
        tower_death_time_t1?: number;
        tower_death_time_t2?: number;
        tower_death_time_t3?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDetailedGameStats_GameStats>]: never; }>(base?: I): CMsgDetailedGameStats_GameStats;
    fromPartial<I_1 extends {
        tower_death_time_t1?: number;
        tower_death_time_t2?: number;
        tower_death_time_t3?: number;
    } & {
        tower_death_time_t1?: number;
        tower_death_time_t2?: number;
        tower_death_time_t3?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDetailedGameStats_GameStats>]: never; }>(object: I_1): CMsgDetailedGameStats_GameStats;
};
export declare const CMsgDetailedGameStats_MinuteEntry: {
    fromJSON(object: any): CMsgDetailedGameStats_MinuteEntry;
    toJSON(message: CMsgDetailedGameStats_MinuteEntry): unknown;
    create<I extends {
        minute?: number;
        stats?: {
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        }[];
    } & {
        minute?: number;
        stats?: {
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        }[] & ({
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        } & {
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        } & { [K in Exclude<keyof I["stats"][number], keyof CMsgDetailedGameStats_PlayerStatEntry>]: never; })[] & { [K_1 in Exclude<keyof I["stats"], keyof {
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgDetailedGameStats_MinuteEntry>]: never; }>(base?: I): CMsgDetailedGameStats_MinuteEntry;
    fromPartial<I_1 extends {
        minute?: number;
        stats?: {
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        }[];
    } & {
        minute?: number;
        stats?: {
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        }[] & ({
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        } & {
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        } & { [K_3 in Exclude<keyof I_1["stats"][number], keyof CMsgDetailedGameStats_PlayerStatEntry>]: never; })[] & { [K_4 in Exclude<keyof I_1["stats"], keyof {
            total_earned_gold?: number;
            total_networth?: number;
            level?: number;
            total_dps?: number;
            average_dps?: number;
            ability_damage_output?: number;
            base_health?: number;
            total_health?: number;
            total_mana?: number;
            base_physical_damage_reduction_pct?: number;
            total_physical_damage_reduction_pct?: number;
            base_ability_damage_reduction_pct?: number;
            total_ability_damage_reduction_pct?: number;
            ability_damage_block?: number;
            physical_damage_block?: number;
            mana_regen?: number;
            health_regen?: number;
            physical_magic_dmg_pct?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            gold_from_kills?: number;
            gold_from_creeps?: number;
            gold_shared?: number;
            xp_from_kills?: number;
            xp_from_creeps?: number;
            total_xp?: number;
            ability_casts?: number;
            item_casts?: number;
            total_time_stunned?: number;
            item_count?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDetailedGameStats_MinuteEntry>]: never; }>(object: I_1): CMsgDetailedGameStats_MinuteEntry;
};
export declare const CMsgDetailedGameStats_PlayerInfo: {
    fromJSON(object: any): CMsgDetailedGameStats_PlayerInfo;
    toJSON(message: CMsgDetailedGameStats_PlayerInfo): unknown;
    create<I extends {
        account_id?: number;
        hero_id?: number;
        player_slot?: number;
    } & {
        account_id?: number;
        hero_id?: number;
        player_slot?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDetailedGameStats_PlayerInfo>]: never; }>(base?: I): CMsgDetailedGameStats_PlayerInfo;
    fromPartial<I_1 extends {
        account_id?: number;
        hero_id?: number;
        player_slot?: number;
    } & {
        account_id?: number;
        hero_id?: number;
        player_slot?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDetailedGameStats_PlayerInfo>]: never; }>(object: I_1): CMsgDetailedGameStats_PlayerInfo;
};
export declare const CMsgNeutralItemStats: {
    fromJSON(object: any): CMsgNeutralItemStats;
    toJSON(message: CMsgNeutralItemStats): unknown;
    create<I extends {
        neutral_items?: {
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        }[];
    } & {
        neutral_items?: {
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        }[] & ({
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        } & {
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        } & { [K in Exclude<keyof I["neutral_items"][number], keyof CMsgNeutralItemStats_NeutralItem>]: never; })[] & { [K_1 in Exclude<keyof I["neutral_items"], keyof {
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "neutral_items">]: never; }>(base?: I): CMsgNeutralItemStats;
    fromPartial<I_1 extends {
        neutral_items?: {
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        }[];
    } & {
        neutral_items?: {
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        }[] & ({
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        } & {
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        } & { [K_3 in Exclude<keyof I_1["neutral_items"][number], keyof CMsgNeutralItemStats_NeutralItem>]: never; })[] & { [K_4 in Exclude<keyof I_1["neutral_items"], keyof {
            item_id?: number;
            time_dropped?: number;
            team?: number;
            time_last_equipped?: number;
            time_last_unequipped?: number;
            duration_equipped?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "neutral_items">]: never; }>(object: I_1): CMsgNeutralItemStats;
};
export declare const CMsgNeutralItemStats_NeutralItem: {
    fromJSON(object: any): CMsgNeutralItemStats_NeutralItem;
    toJSON(message: CMsgNeutralItemStats_NeutralItem): unknown;
    create<I extends {
        item_id?: number;
        time_dropped?: number;
        team?: number;
        time_last_equipped?: number;
        time_last_unequipped?: number;
        duration_equipped?: number;
    } & {
        item_id?: number;
        time_dropped?: number;
        team?: number;
        time_last_equipped?: number;
        time_last_unequipped?: number;
        duration_equipped?: number;
    } & { [K in Exclude<keyof I, keyof CMsgNeutralItemStats_NeutralItem>]: never; }>(base?: I): CMsgNeutralItemStats_NeutralItem;
    fromPartial<I_1 extends {
        item_id?: number;
        time_dropped?: number;
        team?: number;
        time_last_equipped?: number;
        time_last_unequipped?: number;
        duration_equipped?: number;
    } & {
        item_id?: number;
        time_dropped?: number;
        team?: number;
        time_last_equipped?: number;
        time_last_unequipped?: number;
        duration_equipped?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgNeutralItemStats_NeutralItem>]: never; }>(object: I_1): CMsgNeutralItemStats_NeutralItem;
};
export declare const CMsgGCToServerLobbyHeroBanRates: {
    fromJSON(object: any): CMsgGCToServerLobbyHeroBanRates;
    toJSON(message: CMsgGCToServerLobbyHeroBanRates): unknown;
    create<I extends {
        ban_data?: {
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        }[];
    } & {
        ban_data?: {
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        }[] & ({
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        } & {
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        } & { [K in Exclude<keyof I["ban_data"][number], keyof CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>]: never; })[] & { [K_1 in Exclude<keyof I["ban_data"], keyof {
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "ban_data">]: never; }>(base?: I): CMsgGCToServerLobbyHeroBanRates;
    fromPartial<I_1 extends {
        ban_data?: {
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        }[];
    } & {
        ban_data?: {
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        }[] & ({
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        } & {
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        } & { [K_3 in Exclude<keyof I_1["ban_data"][number], keyof CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>]: never; })[] & { [K_4 in Exclude<keyof I_1["ban_data"], keyof {
            hero_id?: number;
            ban_count?: number;
            pick_count?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "ban_data">]: never; }>(object: I_1): CMsgGCToServerLobbyHeroBanRates;
};
export declare const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry: {
    fromJSON(object: any): CMsgGCToServerLobbyHeroBanRates_HeroBanEntry;
    toJSON(message: CMsgGCToServerLobbyHeroBanRates_HeroBanEntry): unknown;
    create<I extends {
        hero_id?: number;
        ban_count?: number;
        pick_count?: number;
    } & {
        hero_id?: number;
        ban_count?: number;
        pick_count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>]: never; }>(base?: I): CMsgGCToServerLobbyHeroBanRates_HeroBanEntry;
    fromPartial<I_1 extends {
        hero_id?: number;
        ban_count?: number;
        pick_count?: number;
    } & {
        hero_id?: number;
        ban_count?: number;
        pick_count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>]: never; }>(object: I_1): CMsgGCToServerLobbyHeroBanRates_HeroBanEntry;
};
export declare const CMsgSignOutGuildContractProgress: {
    fromJSON(object: any): CMsgSignOutGuildContractProgress;
    toJSON(message: CMsgSignOutGuildContractProgress): unknown;
    create<I extends {
        player_contracts?: {
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[];
        }[];
    } & {
        player_contracts?: {
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[];
        }[] & ({
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[];
        } & {
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[] & ({
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            } & {
                guild_id?: number;
                event_id?: number;
                contracts?: string[] & string[] & { [K in Exclude<keyof I["player_contracts"][number]["completed_contracts"][number]["contracts"], keyof string[]>]: never; };
            } & { [K_1 in Exclude<keyof I["player_contracts"][number]["completed_contracts"][number], keyof CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>]: never; })[] & { [K_2 in Exclude<keyof I["player_contracts"][number]["completed_contracts"], keyof {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[]>]: never; };
        } & { [K_3 in Exclude<keyof I["player_contracts"][number], keyof CMsgSignOutGuildContractProgress_PlayerContract>]: never; })[] & { [K_4 in Exclude<keyof I["player_contracts"], keyof {
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[];
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I, "player_contracts">]: never; }>(base?: I): CMsgSignOutGuildContractProgress;
    fromPartial<I_1 extends {
        player_contracts?: {
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[];
        }[];
    } & {
        player_contracts?: {
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[];
        }[] & ({
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[];
        } & {
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[] & ({
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            } & {
                guild_id?: number;
                event_id?: number;
                contracts?: string[] & string[] & { [K_6 in Exclude<keyof I_1["player_contracts"][number]["completed_contracts"][number]["contracts"], keyof string[]>]: never; };
            } & { [K_7 in Exclude<keyof I_1["player_contracts"][number]["completed_contracts"][number], keyof CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>]: never; })[] & { [K_8 in Exclude<keyof I_1["player_contracts"][number]["completed_contracts"], keyof {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[]>]: never; };
        } & { [K_9 in Exclude<keyof I_1["player_contracts"][number], keyof CMsgSignOutGuildContractProgress_PlayerContract>]: never; })[] & { [K_10 in Exclude<keyof I_1["player_contracts"], keyof {
            account_id?: number;
            completed_contracts?: {
                guild_id?: number;
                event_id?: number;
                contracts?: string[];
            }[];
        }[]>]: never; };
    } & { [K_11 in Exclude<keyof I_1, "player_contracts">]: never; }>(object: I_1): CMsgSignOutGuildContractProgress;
};
export declare const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts: {
    fromJSON(object: any): CMsgSignOutGuildContractProgress_CompletedGuildEventContracts;
    toJSON(message: CMsgSignOutGuildContractProgress_CompletedGuildEventContracts): unknown;
    create<I extends {
        guild_id?: number;
        event_id?: number;
        contracts?: string[];
    } & {
        guild_id?: number;
        event_id?: number;
        contracts?: string[] & string[] & { [K in Exclude<keyof I["contracts"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>]: never; }>(base?: I): CMsgSignOutGuildContractProgress_CompletedGuildEventContracts;
    fromPartial<I_1 extends {
        guild_id?: number;
        event_id?: number;
        contracts?: string[];
    } & {
        guild_id?: number;
        event_id?: number;
        contracts?: string[] & string[] & { [K_2 in Exclude<keyof I_1["contracts"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>]: never; }>(object: I_1): CMsgSignOutGuildContractProgress_CompletedGuildEventContracts;
};
export declare const CMsgSignOutGuildContractProgress_PlayerContract: {
    fromJSON(object: any): CMsgSignOutGuildContractProgress_PlayerContract;
    toJSON(message: CMsgSignOutGuildContractProgress_PlayerContract): unknown;
    create<I extends {
        account_id?: number;
        completed_contracts?: {
            guild_id?: number;
            event_id?: number;
            contracts?: string[];
        }[];
    } & {
        account_id?: number;
        completed_contracts?: {
            guild_id?: number;
            event_id?: number;
            contracts?: string[];
        }[] & ({
            guild_id?: number;
            event_id?: number;
            contracts?: string[];
        } & {
            guild_id?: number;
            event_id?: number;
            contracts?: string[] & string[] & { [K in Exclude<keyof I["completed_contracts"][number]["contracts"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["completed_contracts"][number], keyof CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>]: never; })[] & { [K_2 in Exclude<keyof I["completed_contracts"], keyof {
            guild_id?: number;
            event_id?: number;
            contracts?: string[];
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgSignOutGuildContractProgress_PlayerContract>]: never; }>(base?: I): CMsgSignOutGuildContractProgress_PlayerContract;
    fromPartial<I_1 extends {
        account_id?: number;
        completed_contracts?: {
            guild_id?: number;
            event_id?: number;
            contracts?: string[];
        }[];
    } & {
        account_id?: number;
        completed_contracts?: {
            guild_id?: number;
            event_id?: number;
            contracts?: string[];
        }[] & ({
            guild_id?: number;
            event_id?: number;
            contracts?: string[];
        } & {
            guild_id?: number;
            event_id?: number;
            contracts?: string[] & string[] & { [K_4 in Exclude<keyof I_1["completed_contracts"][number]["contracts"], keyof string[]>]: never; };
        } & { [K_5 in Exclude<keyof I_1["completed_contracts"][number], keyof CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>]: never; })[] & { [K_6 in Exclude<keyof I_1["completed_contracts"], keyof {
            guild_id?: number;
            event_id?: number;
            contracts?: string[];
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgSignOutGuildContractProgress_PlayerContract>]: never; }>(object: I_1): CMsgSignOutGuildContractProgress_PlayerContract;
};
export declare const CMsgSignOutGuildChallengeProgress: {
    fromJSON(object: any): CMsgSignOutGuildChallengeProgress;
    toJSON(message: CMsgSignOutGuildChallengeProgress): unknown;
    create<I extends {
        guild_challenges_progresses?: {
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        }[];
    } & {
        guild_challenges_progresses?: {
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        }[] & ({
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        } & {
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        } & { [K in Exclude<keyof I["guild_challenges_progresses"][number], keyof CMsgSignOutGuildChallengeProgress_ChallengeProgress>]: never; })[] & { [K_1 in Exclude<keyof I["guild_challenges_progresses"], keyof {
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "guild_challenges_progresses">]: never; }>(base?: I): CMsgSignOutGuildChallengeProgress;
    fromPartial<I_1 extends {
        guild_challenges_progresses?: {
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        }[];
    } & {
        guild_challenges_progresses?: {
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        }[] & ({
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        } & {
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        } & { [K_3 in Exclude<keyof I_1["guild_challenges_progresses"][number], keyof CMsgSignOutGuildChallengeProgress_ChallengeProgress>]: never; })[] & { [K_4 in Exclude<keyof I_1["guild_challenges_progresses"], keyof {
            guild_id?: number;
            event_id?: number;
            challenge_instance_id?: number;
            challenge_instance_timestamp?: number;
            challenge_period_serial?: number;
            progress?: number;
            challenge_parameter?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "guild_challenges_progresses">]: never; }>(object: I_1): CMsgSignOutGuildChallengeProgress;
};
export declare const CMsgSignOutGuildChallengeProgress_ChallengeProgress: {
    fromJSON(object: any): CMsgSignOutGuildChallengeProgress_ChallengeProgress;
    toJSON(message: CMsgSignOutGuildChallengeProgress_ChallengeProgress): unknown;
    create<I extends {
        guild_id?: number;
        event_id?: number;
        challenge_instance_id?: number;
        challenge_instance_timestamp?: number;
        challenge_period_serial?: number;
        progress?: number;
        challenge_parameter?: number;
    } & {
        guild_id?: number;
        event_id?: number;
        challenge_instance_id?: number;
        challenge_instance_timestamp?: number;
        challenge_period_serial?: number;
        progress?: number;
        challenge_parameter?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutGuildChallengeProgress_ChallengeProgress>]: never; }>(base?: I): CMsgSignOutGuildChallengeProgress_ChallengeProgress;
    fromPartial<I_1 extends {
        guild_id?: number;
        event_id?: number;
        challenge_instance_id?: number;
        challenge_instance_timestamp?: number;
        challenge_period_serial?: number;
        progress?: number;
        challenge_parameter?: number;
    } & {
        guild_id?: number;
        event_id?: number;
        challenge_instance_id?: number;
        challenge_instance_timestamp?: number;
        challenge_period_serial?: number;
        progress?: number;
        challenge_parameter?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutGuildChallengeProgress_ChallengeProgress>]: never; }>(object: I_1): CMsgSignOutGuildChallengeProgress_ChallengeProgress;
};
export declare const CMsgSignOutMVPStats: {
    fromJSON(object: any): CMsgSignOutMVPStats;
    toJSON(message: CMsgSignOutMVPStats): unknown;
    create<I extends {
        match_id?: string;
        game_mode?: number;
        winning_team?: number;
        game_time?: number;
        players?: {
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[];
            highest_killstreak?: number;
        }[];
    } & {
        match_id?: string;
        game_mode?: number;
        winning_team?: number;
        game_time?: number;
        players?: {
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[];
            highest_killstreak?: number;
        }[] & ({
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[];
            highest_killstreak?: number;
        } & {
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[] & ({
                event_type?: number;
                amount?: number;
            } & {
                event_type?: number;
                amount?: number;
            } & { [K in Exclude<keyof I["players"][number]["kill_eater_events"][number], keyof CMsgSignOutMVPStats_Player_KillEaterEvent>]: never; })[] & { [K_1 in Exclude<keyof I["players"][number]["kill_eater_events"], keyof {
                event_type?: number;
                amount?: number;
            }[]>]: never; };
            highest_killstreak?: number;
        } & { [K_2 in Exclude<keyof I["players"][number], keyof CMsgSignOutMVPStats_Player>]: never; })[] & { [K_3 in Exclude<keyof I["players"], keyof {
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[];
            highest_killstreak?: number;
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgSignOutMVPStats>]: never; }>(base?: I): CMsgSignOutMVPStats;
    fromPartial<I_1 extends {
        match_id?: string;
        game_mode?: number;
        winning_team?: number;
        game_time?: number;
        players?: {
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[];
            highest_killstreak?: number;
        }[];
    } & {
        match_id?: string;
        game_mode?: number;
        winning_team?: number;
        game_time?: number;
        players?: {
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[];
            highest_killstreak?: number;
        }[] & ({
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[];
            highest_killstreak?: number;
        } & {
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[] & ({
                event_type?: number;
                amount?: number;
            } & {
                event_type?: number;
                amount?: number;
            } & { [K_5 in Exclude<keyof I_1["players"][number]["kill_eater_events"][number], keyof CMsgSignOutMVPStats_Player_KillEaterEvent>]: never; })[] & { [K_6 in Exclude<keyof I_1["players"][number]["kill_eater_events"], keyof {
                event_type?: number;
                amount?: number;
            }[]>]: never; };
            highest_killstreak?: number;
        } & { [K_7 in Exclude<keyof I_1["players"][number], keyof CMsgSignOutMVPStats_Player>]: never; })[] & { [K_8 in Exclude<keyof I_1["players"], keyof {
            team_id?: number;
            team_networth_rank?: number;
            account_id?: number;
            player_slot?: number;
            rank?: number;
            hero_id?: number;
            role?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
            xp?: number;
            net_worth?: number;
            support_gold_spent?: number;
            wards_placed?: number;
            wards_spotted_for_dewarding?: number;
            camps_stacked?: number;
            last_hits?: number;
            denies?: number;
            building_damage?: number;
            other_damage?: number;
            triple_kills?: number;
            rampages?: number;
            first_blood?: number;
            kill_eater_events?: {
                event_type?: number;
                amount?: number;
            }[];
            highest_killstreak?: number;
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgSignOutMVPStats>]: never; }>(object: I_1): CMsgSignOutMVPStats;
};
export declare const CMsgSignOutMVPStats_Player: {
    fromJSON(object: any): CMsgSignOutMVPStats_Player;
    toJSON(message: CMsgSignOutMVPStats_Player): unknown;
    create<I extends {
        team_id?: number;
        team_networth_rank?: number;
        account_id?: number;
        player_slot?: number;
        rank?: number;
        hero_id?: number;
        role?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        xp?: number;
        net_worth?: number;
        support_gold_spent?: number;
        wards_placed?: number;
        wards_spotted_for_dewarding?: number;
        camps_stacked?: number;
        last_hits?: number;
        denies?: number;
        building_damage?: number;
        other_damage?: number;
        triple_kills?: number;
        rampages?: number;
        first_blood?: number;
        kill_eater_events?: {
            event_type?: number;
            amount?: number;
        }[];
        highest_killstreak?: number;
    } & {
        team_id?: number;
        team_networth_rank?: number;
        account_id?: number;
        player_slot?: number;
        rank?: number;
        hero_id?: number;
        role?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        xp?: number;
        net_worth?: number;
        support_gold_spent?: number;
        wards_placed?: number;
        wards_spotted_for_dewarding?: number;
        camps_stacked?: number;
        last_hits?: number;
        denies?: number;
        building_damage?: number;
        other_damage?: number;
        triple_kills?: number;
        rampages?: number;
        first_blood?: number;
        kill_eater_events?: {
            event_type?: number;
            amount?: number;
        }[] & ({
            event_type?: number;
            amount?: number;
        } & {
            event_type?: number;
            amount?: number;
        } & { [K in Exclude<keyof I["kill_eater_events"][number], keyof CMsgSignOutMVPStats_Player_KillEaterEvent>]: never; })[] & { [K_1 in Exclude<keyof I["kill_eater_events"], keyof {
            event_type?: number;
            amount?: number;
        }[]>]: never; };
        highest_killstreak?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgSignOutMVPStats_Player>]: never; }>(base?: I): CMsgSignOutMVPStats_Player;
    fromPartial<I_1 extends {
        team_id?: number;
        team_networth_rank?: number;
        account_id?: number;
        player_slot?: number;
        rank?: number;
        hero_id?: number;
        role?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        xp?: number;
        net_worth?: number;
        support_gold_spent?: number;
        wards_placed?: number;
        wards_spotted_for_dewarding?: number;
        camps_stacked?: number;
        last_hits?: number;
        denies?: number;
        building_damage?: number;
        other_damage?: number;
        triple_kills?: number;
        rampages?: number;
        first_blood?: number;
        kill_eater_events?: {
            event_type?: number;
            amount?: number;
        }[];
        highest_killstreak?: number;
    } & {
        team_id?: number;
        team_networth_rank?: number;
        account_id?: number;
        player_slot?: number;
        rank?: number;
        hero_id?: number;
        role?: number;
        kills?: number;
        deaths?: number;
        assists?: number;
        xp?: number;
        net_worth?: number;
        support_gold_spent?: number;
        wards_placed?: number;
        wards_spotted_for_dewarding?: number;
        camps_stacked?: number;
        last_hits?: number;
        denies?: number;
        building_damage?: number;
        other_damage?: number;
        triple_kills?: number;
        rampages?: number;
        first_blood?: number;
        kill_eater_events?: {
            event_type?: number;
            amount?: number;
        }[] & ({
            event_type?: number;
            amount?: number;
        } & {
            event_type?: number;
            amount?: number;
        } & { [K_3 in Exclude<keyof I_1["kill_eater_events"][number], keyof CMsgSignOutMVPStats_Player_KillEaterEvent>]: never; })[] & { [K_4 in Exclude<keyof I_1["kill_eater_events"], keyof {
            event_type?: number;
            amount?: number;
        }[]>]: never; };
        highest_killstreak?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSignOutMVPStats_Player>]: never; }>(object: I_1): CMsgSignOutMVPStats_Player;
};
export declare const CMsgSignOutMVPStats_Player_KillEaterEvent: {
    fromJSON(object: any): CMsgSignOutMVPStats_Player_KillEaterEvent;
    toJSON(message: CMsgSignOutMVPStats_Player_KillEaterEvent): unknown;
    create<I extends {
        event_type?: number;
        amount?: number;
    } & {
        event_type?: number;
        amount?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSignOutMVPStats_Player_KillEaterEvent>]: never; }>(base?: I): CMsgSignOutMVPStats_Player_KillEaterEvent;
    fromPartial<I_1 extends {
        event_type?: number;
        amount?: number;
    } & {
        event_type?: number;
        amount?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSignOutMVPStats_Player_KillEaterEvent>]: never; }>(object: I_1): CMsgSignOutMVPStats_Player_KillEaterEvent;
};
export declare const CMsgGCToServerRecordTrainingData: {
    fromJSON(object: any): CMsgGCToServerRecordTrainingData;
    toJSON(message: CMsgGCToServerRecordTrainingData): unknown;
    create<I extends {
        enable?: boolean;
    } & {
        enable?: boolean;
    } & { [K in Exclude<keyof I, "enable">]: never; }>(base?: I): CMsgGCToServerRecordTrainingData;
    fromPartial<I_1 extends {
        enable?: boolean;
    } & {
        enable?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "enable">]: never; }>(object: I_1): CMsgGCToServerRecordTrainingData;
};
export declare const CMsgServerToGCGetGuildContracts: {
    fromJSON(object: any): CMsgServerToGCGetGuildContracts;
    toJSON(message: CMsgServerToGCGetGuildContracts): unknown;
    create<I extends {
        account_ids?: number[];
    } & {
        account_ids?: number[] & number[] & { [K in Exclude<keyof I["account_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "account_ids">]: never; }>(base?: I): CMsgServerToGCGetGuildContracts;
    fromPartial<I_1 extends {
        account_ids?: number[];
    } & {
        account_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["account_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "account_ids">]: never; }>(object: I_1): CMsgServerToGCGetGuildContracts;
};
export declare const CMsgServerToGCGetGuildContractsResponse: {
    fromJSON(object: any): CMsgServerToGCGetGuildContractsResponse;
    toJSON(message: CMsgServerToGCGetGuildContractsResponse): unknown;
    create<I extends {
        player_contracts?: {
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[];
        }[];
    } & {
        player_contracts?: {
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[];
        }[] & ({
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[];
        } & {
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[] & ({
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            } & {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            } & { [K in Exclude<keyof I["player_contracts"][number]["contracts"][number], keyof CMsgServerToGCGetGuildContractsResponse_ContractDetails>]: never; })[] & { [K_1 in Exclude<keyof I["player_contracts"][number]["contracts"], keyof {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["player_contracts"][number], keyof CMsgServerToGCGetGuildContractsResponse_Player>]: never; })[] & { [K_3 in Exclude<keyof I["player_contracts"], keyof {
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[];
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, "player_contracts">]: never; }>(base?: I): CMsgServerToGCGetGuildContractsResponse;
    fromPartial<I_1 extends {
        player_contracts?: {
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[];
        }[];
    } & {
        player_contracts?: {
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[];
        }[] & ({
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[];
        } & {
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[] & ({
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            } & {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            } & { [K_5 in Exclude<keyof I_1["player_contracts"][number]["contracts"][number], keyof CMsgServerToGCGetGuildContractsResponse_ContractDetails>]: never; })[] & { [K_6 in Exclude<keyof I_1["player_contracts"][number]["contracts"], keyof {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[]>]: never; };
        } & { [K_7 in Exclude<keyof I_1["player_contracts"][number], keyof CMsgServerToGCGetGuildContractsResponse_Player>]: never; })[] & { [K_8 in Exclude<keyof I_1["player_contracts"], keyof {
            account_id?: number;
            guild_id?: number;
            event_id?: EEvent;
            contracts?: {
                contract_id?: string;
                challenge_instance_id?: number;
                challenge_parameter?: number;
                contract_stars?: number;
                contract_slot?: number;
            }[];
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, "player_contracts">]: never; }>(object: I_1): CMsgServerToGCGetGuildContractsResponse;
};
export declare const CMsgServerToGCGetGuildContractsResponse_ContractDetails: {
    fromJSON(object: any): CMsgServerToGCGetGuildContractsResponse_ContractDetails;
    toJSON(message: CMsgServerToGCGetGuildContractsResponse_ContractDetails): unknown;
    create<I extends {
        contract_id?: string;
        challenge_instance_id?: number;
        challenge_parameter?: number;
        contract_stars?: number;
        contract_slot?: number;
    } & {
        contract_id?: string;
        challenge_instance_id?: number;
        challenge_parameter?: number;
        contract_stars?: number;
        contract_slot?: number;
    } & { [K in Exclude<keyof I, keyof CMsgServerToGCGetGuildContractsResponse_ContractDetails>]: never; }>(base?: I): CMsgServerToGCGetGuildContractsResponse_ContractDetails;
    fromPartial<I_1 extends {
        contract_id?: string;
        challenge_instance_id?: number;
        challenge_parameter?: number;
        contract_stars?: number;
        contract_slot?: number;
    } & {
        contract_id?: string;
        challenge_instance_id?: number;
        challenge_parameter?: number;
        contract_stars?: number;
        contract_slot?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgServerToGCGetGuildContractsResponse_ContractDetails>]: never; }>(object: I_1): CMsgServerToGCGetGuildContractsResponse_ContractDetails;
};
export declare const CMsgServerToGCGetGuildContractsResponse_Player: {
    fromJSON(object: any): CMsgServerToGCGetGuildContractsResponse_Player;
    toJSON(message: CMsgServerToGCGetGuildContractsResponse_Player): unknown;
    create<I extends {
        account_id?: number;
        guild_id?: number;
        event_id?: EEvent;
        contracts?: {
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        }[];
    } & {
        account_id?: number;
        guild_id?: number;
        event_id?: EEvent;
        contracts?: {
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        }[] & ({
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        } & {
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        } & { [K in Exclude<keyof I["contracts"][number], keyof CMsgServerToGCGetGuildContractsResponse_ContractDetails>]: never; })[] & { [K_1 in Exclude<keyof I["contracts"], keyof {
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgServerToGCGetGuildContractsResponse_Player>]: never; }>(base?: I): CMsgServerToGCGetGuildContractsResponse_Player;
    fromPartial<I_1 extends {
        account_id?: number;
        guild_id?: number;
        event_id?: EEvent;
        contracts?: {
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        }[];
    } & {
        account_id?: number;
        guild_id?: number;
        event_id?: EEvent;
        contracts?: {
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        }[] & ({
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        } & {
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        } & { [K_3 in Exclude<keyof I_1["contracts"][number], keyof CMsgServerToGCGetGuildContractsResponse_ContractDetails>]: never; })[] & { [K_4 in Exclude<keyof I_1["contracts"], keyof {
            contract_id?: string;
            challenge_instance_id?: number;
            challenge_parameter?: number;
            contract_stars?: number;
            contract_slot?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgServerToGCGetGuildContractsResponse_Player>]: never; }>(object: I_1): CMsgServerToGCGetGuildContractsResponse_Player;
};
export declare const CMsgMatchDiretideCandy: {
    fromJSON(object: any): CMsgMatchDiretideCandy;
    toJSON(message: CMsgMatchDiretideCandy): unknown;
    create<I extends {
        player_candy_data?: {
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[];
        }[];
        event_id?: EEvent;
    } & {
        player_candy_data?: {
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[];
        }[] & ({
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[];
        } & {
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[] & ({
                amount?: number;
                audit?: number;
            } & {
                amount?: number;
                audit?: number;
            } & { [K in Exclude<keyof I["player_candy_data"][number]["candy_breakdown"][number], keyof CMsgMatchDiretideCandy_CandyDetails>]: never; })[] & { [K_1 in Exclude<keyof I["player_candy_data"][number]["candy_breakdown"], keyof {
                amount?: number;
                audit?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["player_candy_data"][number], keyof CMsgMatchDiretideCandy_PlayerCandy>]: never; })[] & { [K_3 in Exclude<keyof I["player_candy_data"], keyof {
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[];
        }[]>]: never; };
        event_id?: EEvent;
    } & { [K_4 in Exclude<keyof I, keyof CMsgMatchDiretideCandy>]: never; }>(base?: I): CMsgMatchDiretideCandy;
    fromPartial<I_1 extends {
        player_candy_data?: {
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[];
        }[];
        event_id?: EEvent;
    } & {
        player_candy_data?: {
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[];
        }[] & ({
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[];
        } & {
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[] & ({
                amount?: number;
                audit?: number;
            } & {
                amount?: number;
                audit?: number;
            } & { [K_5 in Exclude<keyof I_1["player_candy_data"][number]["candy_breakdown"][number], keyof CMsgMatchDiretideCandy_CandyDetails>]: never; })[] & { [K_6 in Exclude<keyof I_1["player_candy_data"][number]["candy_breakdown"], keyof {
                amount?: number;
                audit?: number;
            }[]>]: never; };
        } & { [K_7 in Exclude<keyof I_1["player_candy_data"][number], keyof CMsgMatchDiretideCandy_PlayerCandy>]: never; })[] & { [K_8 in Exclude<keyof I_1["player_candy_data"], keyof {
            account_id?: number;
            candy_amount?: number;
            consumes_periodic_resource?: boolean;
            candy_breakdown?: {
                amount?: number;
                audit?: number;
            }[];
        }[]>]: never; };
        event_id?: EEvent;
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgMatchDiretideCandy>]: never; }>(object: I_1): CMsgMatchDiretideCandy;
};
export declare const CMsgMatchDiretideCandy_CandyDetails: {
    fromJSON(object: any): CMsgMatchDiretideCandy_CandyDetails;
    toJSON(message: CMsgMatchDiretideCandy_CandyDetails): unknown;
    create<I extends {
        amount?: number;
        audit?: number;
    } & {
        amount?: number;
        audit?: number;
    } & { [K in Exclude<keyof I, keyof CMsgMatchDiretideCandy_CandyDetails>]: never; }>(base?: I): CMsgMatchDiretideCandy_CandyDetails;
    fromPartial<I_1 extends {
        amount?: number;
        audit?: number;
    } & {
        amount?: number;
        audit?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgMatchDiretideCandy_CandyDetails>]: never; }>(object: I_1): CMsgMatchDiretideCandy_CandyDetails;
};
export declare const CMsgMatchDiretideCandy_PlayerCandy: {
    fromJSON(object: any): CMsgMatchDiretideCandy_PlayerCandy;
    toJSON(message: CMsgMatchDiretideCandy_PlayerCandy): unknown;
    create<I extends {
        account_id?: number;
        candy_amount?: number;
        consumes_periodic_resource?: boolean;
        candy_breakdown?: {
            amount?: number;
            audit?: number;
        }[];
    } & {
        account_id?: number;
        candy_amount?: number;
        consumes_periodic_resource?: boolean;
        candy_breakdown?: {
            amount?: number;
            audit?: number;
        }[] & ({
            amount?: number;
            audit?: number;
        } & {
            amount?: number;
            audit?: number;
        } & { [K in Exclude<keyof I["candy_breakdown"][number], keyof CMsgMatchDiretideCandy_CandyDetails>]: never; })[] & { [K_1 in Exclude<keyof I["candy_breakdown"], keyof {
            amount?: number;
            audit?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgMatchDiretideCandy_PlayerCandy>]: never; }>(base?: I): CMsgMatchDiretideCandy_PlayerCandy;
    fromPartial<I_1 extends {
        account_id?: number;
        candy_amount?: number;
        consumes_periodic_resource?: boolean;
        candy_breakdown?: {
            amount?: number;
            audit?: number;
        }[];
    } & {
        account_id?: number;
        candy_amount?: number;
        consumes_periodic_resource?: boolean;
        candy_breakdown?: {
            amount?: number;
            audit?: number;
        }[] & ({
            amount?: number;
            audit?: number;
        } & {
            amount?: number;
            audit?: number;
        } & { [K_3 in Exclude<keyof I_1["candy_breakdown"][number], keyof CMsgMatchDiretideCandy_CandyDetails>]: never; })[] & { [K_4 in Exclude<keyof I_1["candy_breakdown"], keyof {
            amount?: number;
            audit?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgMatchDiretideCandy_PlayerCandy>]: never; }>(object: I_1): CMsgMatchDiretideCandy_PlayerCandy;
};
export declare const CMsgGCToServerCheerData: {
    fromJSON(object: any): CMsgGCToServerCheerData;
    toJSON(message: CMsgGCToServerCheerData): unknown;
    create<I extends {
        cheer_types?: {
            cheer_type?: number;
            cheer_count?: number;
        }[];
    } & {
        cheer_types?: {
            cheer_type?: number;
            cheer_count?: number;
        }[] & ({
            cheer_type?: number;
            cheer_count?: number;
        } & {
            cheer_type?: number;
            cheer_count?: number;
        } & { [K in Exclude<keyof I["cheer_types"][number], keyof CMsgGCToServerCheerData_CheerTypeCount>]: never; })[] & { [K_1 in Exclude<keyof I["cheer_types"], keyof {
            cheer_type?: number;
            cheer_count?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "cheer_types">]: never; }>(base?: I): CMsgGCToServerCheerData;
    fromPartial<I_1 extends {
        cheer_types?: {
            cheer_type?: number;
            cheer_count?: number;
        }[];
    } & {
        cheer_types?: {
            cheer_type?: number;
            cheer_count?: number;
        }[] & ({
            cheer_type?: number;
            cheer_count?: number;
        } & {
            cheer_type?: number;
            cheer_count?: number;
        } & { [K_3 in Exclude<keyof I_1["cheer_types"][number], keyof CMsgGCToServerCheerData_CheerTypeCount>]: never; })[] & { [K_4 in Exclude<keyof I_1["cheer_types"], keyof {
            cheer_type?: number;
            cheer_count?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "cheer_types">]: never; }>(object: I_1): CMsgGCToServerCheerData;
};
export declare const CMsgGCToServerCheerData_CheerTypeCount: {
    fromJSON(object: any): CMsgGCToServerCheerData_CheerTypeCount;
    toJSON(message: CMsgGCToServerCheerData_CheerTypeCount): unknown;
    create<I extends {
        cheer_type?: number;
        cheer_count?: number;
    } & {
        cheer_type?: number;
        cheer_count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToServerCheerData_CheerTypeCount>]: never; }>(base?: I): CMsgGCToServerCheerData_CheerTypeCount;
    fromPartial<I_1 extends {
        cheer_type?: number;
        cheer_count?: number;
    } & {
        cheer_type?: number;
        cheer_count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToServerCheerData_CheerTypeCount>]: never; }>(object: I_1): CMsgGCToServerCheerData_CheerTypeCount;
};
export declare const CMsgCheerConfig: {
    fromJSON(object: any): CMsgCheerConfig;
    toJSON(message: CMsgCheerConfig): unknown;
    create<I extends {
        cheers_enabled?: boolean;
        is_valid_league_id?: boolean;
        window_duration?: number;
        window_bucket_count?: number;
        crowd_level_push_time?: number;
        crowd_level_low?: number;
        crowd_level_medium?: number;
        crowd_level_high?: number;
        cheer_scale_start?: number;
        cheer_scale_speed?: number;
        cheer_scale_push_mark?: number;
        cheer_scale_pull_mark?: number;
        cheer_scale_pct_of_max_cps_clamp?: number;
        cheer_scale_dampener_value?: number;
        cheer_scale_dampener_lerp_time?: number;
        cheer_factor_bronze?: number;
        cheer_factor_silver?: number;
        cheer_factor_gold?: number;
    } & {
        cheers_enabled?: boolean;
        is_valid_league_id?: boolean;
        window_duration?: number;
        window_bucket_count?: number;
        crowd_level_push_time?: number;
        crowd_level_low?: number;
        crowd_level_medium?: number;
        crowd_level_high?: number;
        cheer_scale_start?: number;
        cheer_scale_speed?: number;
        cheer_scale_push_mark?: number;
        cheer_scale_pull_mark?: number;
        cheer_scale_pct_of_max_cps_clamp?: number;
        cheer_scale_dampener_value?: number;
        cheer_scale_dampener_lerp_time?: number;
        cheer_factor_bronze?: number;
        cheer_factor_silver?: number;
        cheer_factor_gold?: number;
    } & { [K in Exclude<keyof I, keyof CMsgCheerConfig>]: never; }>(base?: I): CMsgCheerConfig;
    fromPartial<I_1 extends {
        cheers_enabled?: boolean;
        is_valid_league_id?: boolean;
        window_duration?: number;
        window_bucket_count?: number;
        crowd_level_push_time?: number;
        crowd_level_low?: number;
        crowd_level_medium?: number;
        crowd_level_high?: number;
        cheer_scale_start?: number;
        cheer_scale_speed?: number;
        cheer_scale_push_mark?: number;
        cheer_scale_pull_mark?: number;
        cheer_scale_pct_of_max_cps_clamp?: number;
        cheer_scale_dampener_value?: number;
        cheer_scale_dampener_lerp_time?: number;
        cheer_factor_bronze?: number;
        cheer_factor_silver?: number;
        cheer_factor_gold?: number;
    } & {
        cheers_enabled?: boolean;
        is_valid_league_id?: boolean;
        window_duration?: number;
        window_bucket_count?: number;
        crowd_level_push_time?: number;
        crowd_level_low?: number;
        crowd_level_medium?: number;
        crowd_level_high?: number;
        cheer_scale_start?: number;
        cheer_scale_speed?: number;
        cheer_scale_push_mark?: number;
        cheer_scale_pull_mark?: number;
        cheer_scale_pct_of_max_cps_clamp?: number;
        cheer_scale_dampener_value?: number;
        cheer_scale_dampener_lerp_time?: number;
        cheer_factor_bronze?: number;
        cheer_factor_silver?: number;
        cheer_factor_gold?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgCheerConfig>]: never; }>(object: I_1): CMsgCheerConfig;
};
export declare const CMsgGCToServerCheerConfig: {
    fromJSON(object: any): CMsgGCToServerCheerConfig;
    toJSON(message: CMsgGCToServerCheerConfig): unknown;
    create<I extends {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        };
    } & {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & { [K in Exclude<keyof I["cheer_config"], keyof CMsgCheerConfig>]: never; };
    } & { [K_1 in Exclude<keyof I, "cheer_config">]: never; }>(base?: I): CMsgGCToServerCheerConfig;
    fromPartial<I_1 extends {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        };
    } & {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & { [K_2 in Exclude<keyof I_1["cheer_config"], keyof CMsgCheerConfig>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "cheer_config">]: never; }>(object: I_1): CMsgGCToServerCheerConfig;
};
export declare const CMsgServerToGCGetCheerConfig: {
    fromJSON(object: any): CMsgServerToGCGetCheerConfig;
    toJSON(message: CMsgServerToGCGetCheerConfig): unknown;
    create<I extends {
        league_id?: number;
    } & {
        league_id?: number;
    } & { [K in Exclude<keyof I, "league_id">]: never; }>(base?: I): CMsgServerToGCGetCheerConfig;
    fromPartial<I_1 extends {
        league_id?: number;
    } & {
        league_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "league_id">]: never; }>(object: I_1): CMsgServerToGCGetCheerConfig;
};
export declare const CMsgServerToGCGetCheerConfigResponse: {
    fromJSON(object: any): CMsgServerToGCGetCheerConfigResponse;
    toJSON(message: CMsgServerToGCGetCheerConfigResponse): unknown;
    create<I extends {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        };
    } & {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & { [K in Exclude<keyof I["cheer_config"], keyof CMsgCheerConfig>]: never; };
    } & { [K_1 in Exclude<keyof I, "cheer_config">]: never; }>(base?: I): CMsgServerToGCGetCheerConfigResponse;
    fromPartial<I_1 extends {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        };
    } & {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & { [K_2 in Exclude<keyof I_1["cheer_config"], keyof CMsgCheerConfig>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "cheer_config">]: never; }>(object: I_1): CMsgServerToGCGetCheerConfigResponse;
};
export declare const CMsgGCToServerCheerScalesOverride: {
    fromJSON(object: any): CMsgGCToServerCheerScalesOverride;
    toJSON(message: CMsgGCToServerCheerScalesOverride): unknown;
    create<I extends {
        scales?: number[];
    } & {
        scales?: number[] & number[] & { [K in Exclude<keyof I["scales"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "scales">]: never; }>(base?: I): CMsgGCToServerCheerScalesOverride;
    fromPartial<I_1 extends {
        scales?: number[];
    } & {
        scales?: number[] & number[] & { [K_2 in Exclude<keyof I_1["scales"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "scales">]: never; }>(object: I_1): CMsgGCToServerCheerScalesOverride;
};
export declare const CMsgGCToServerGetCheerState: {
    fromJSON(_: any): CMsgGCToServerGetCheerState;
    toJSON(_: CMsgGCToServerGetCheerState): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgGCToServerGetCheerState;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgGCToServerGetCheerState;
};
export declare const CMsgCheerTypeState: {
    fromJSON(object: any): CMsgCheerTypeState;
    toJSON(message: CMsgCheerTypeState): unknown;
    create<I extends {
        cheer_counts?: number[];
        max_per_second?: number;
        cheer_scale?: number;
        override_scale?: number;
    } & {
        cheer_counts?: number[] & number[] & { [K in Exclude<keyof I["cheer_counts"], keyof number[]>]: never; };
        max_per_second?: number;
        cheer_scale?: number;
        override_scale?: number;
    } & { [K_1 in Exclude<keyof I, keyof CMsgCheerTypeState>]: never; }>(base?: I): CMsgCheerTypeState;
    fromPartial<I_1 extends {
        cheer_counts?: number[];
        max_per_second?: number;
        cheer_scale?: number;
        override_scale?: number;
    } & {
        cheer_counts?: number[] & number[] & { [K_2 in Exclude<keyof I_1["cheer_counts"], keyof number[]>]: never; };
        max_per_second?: number;
        cheer_scale?: number;
        override_scale?: number;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgCheerTypeState>]: never; }>(object: I_1): CMsgCheerTypeState;
};
export declare const CMsgCheerState: {
    fromJSON(object: any): CMsgCheerState;
    toJSON(message: CMsgCheerState): unknown;
    create<I extends {
        cheer_types?: {
            cheer_counts?: number[];
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        }[];
        radiant_crowd_level?: number;
        dire_crowd_level?: number;
    } & {
        cheer_types?: {
            cheer_counts?: number[];
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        }[] & ({
            cheer_counts?: number[];
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        } & {
            cheer_counts?: number[] & number[] & { [K in Exclude<keyof I["cheer_types"][number]["cheer_counts"], keyof number[]>]: never; };
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        } & { [K_1 in Exclude<keyof I["cheer_types"][number], keyof CMsgCheerTypeState>]: never; })[] & { [K_2 in Exclude<keyof I["cheer_types"], keyof {
            cheer_counts?: number[];
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        }[]>]: never; };
        radiant_crowd_level?: number;
        dire_crowd_level?: number;
    } & { [K_3 in Exclude<keyof I, keyof CMsgCheerState>]: never; }>(base?: I): CMsgCheerState;
    fromPartial<I_1 extends {
        cheer_types?: {
            cheer_counts?: number[];
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        }[];
        radiant_crowd_level?: number;
        dire_crowd_level?: number;
    } & {
        cheer_types?: {
            cheer_counts?: number[];
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        }[] & ({
            cheer_counts?: number[];
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        } & {
            cheer_counts?: number[] & number[] & { [K_4 in Exclude<keyof I_1["cheer_types"][number]["cheer_counts"], keyof number[]>]: never; };
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        } & { [K_5 in Exclude<keyof I_1["cheer_types"][number], keyof CMsgCheerTypeState>]: never; })[] & { [K_6 in Exclude<keyof I_1["cheer_types"], keyof {
            cheer_counts?: number[];
            max_per_second?: number;
            cheer_scale?: number;
            override_scale?: number;
        }[]>]: never; };
        radiant_crowd_level?: number;
        dire_crowd_level?: number;
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgCheerState>]: never; }>(object: I_1): CMsgCheerState;
};
export declare const CMsgServerToGCReportCheerState: {
    fromJSON(object: any): CMsgServerToGCReportCheerState;
    toJSON(message: CMsgServerToGCReportCheerState): unknown;
    create<I extends {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        };
        cheer_state?: {
            cheer_types?: {
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            }[];
            radiant_crowd_level?: number;
            dire_crowd_level?: number;
        };
    } & {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & { [K in Exclude<keyof I["cheer_config"], keyof CMsgCheerConfig>]: never; };
        cheer_state?: {
            cheer_types?: {
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            }[];
            radiant_crowd_level?: number;
            dire_crowd_level?: number;
        } & {
            cheer_types?: {
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            }[] & ({
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            } & {
                cheer_counts?: number[] & number[] & { [K_1 in Exclude<keyof I["cheer_state"]["cheer_types"][number]["cheer_counts"], keyof number[]>]: never; };
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            } & { [K_2 in Exclude<keyof I["cheer_state"]["cheer_types"][number], keyof CMsgCheerTypeState>]: never; })[] & { [K_3 in Exclude<keyof I["cheer_state"]["cheer_types"], keyof {
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            }[]>]: never; };
            radiant_crowd_level?: number;
            dire_crowd_level?: number;
        } & { [K_4 in Exclude<keyof I["cheer_state"], keyof CMsgCheerState>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof CMsgServerToGCReportCheerState>]: never; }>(base?: I): CMsgServerToGCReportCheerState;
    fromPartial<I_1 extends {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        };
        cheer_state?: {
            cheer_types?: {
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            }[];
            radiant_crowd_level?: number;
            dire_crowd_level?: number;
        };
    } & {
        cheer_config?: {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & {
            cheers_enabled?: boolean;
            is_valid_league_id?: boolean;
            window_duration?: number;
            window_bucket_count?: number;
            crowd_level_push_time?: number;
            crowd_level_low?: number;
            crowd_level_medium?: number;
            crowd_level_high?: number;
            cheer_scale_start?: number;
            cheer_scale_speed?: number;
            cheer_scale_push_mark?: number;
            cheer_scale_pull_mark?: number;
            cheer_scale_pct_of_max_cps_clamp?: number;
            cheer_scale_dampener_value?: number;
            cheer_scale_dampener_lerp_time?: number;
            cheer_factor_bronze?: number;
            cheer_factor_silver?: number;
            cheer_factor_gold?: number;
        } & { [K_6 in Exclude<keyof I_1["cheer_config"], keyof CMsgCheerConfig>]: never; };
        cheer_state?: {
            cheer_types?: {
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            }[];
            radiant_crowd_level?: number;
            dire_crowd_level?: number;
        } & {
            cheer_types?: {
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            }[] & ({
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            } & {
                cheer_counts?: number[] & number[] & { [K_7 in Exclude<keyof I_1["cheer_state"]["cheer_types"][number]["cheer_counts"], keyof number[]>]: never; };
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            } & { [K_8 in Exclude<keyof I_1["cheer_state"]["cheer_types"][number], keyof CMsgCheerTypeState>]: never; })[] & { [K_9 in Exclude<keyof I_1["cheer_state"]["cheer_types"], keyof {
                cheer_counts?: number[];
                max_per_second?: number;
                cheer_scale?: number;
                override_scale?: number;
            }[]>]: never; };
            radiant_crowd_level?: number;
            dire_crowd_level?: number;
        } & { [K_10 in Exclude<keyof I_1["cheer_state"], keyof CMsgCheerState>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof CMsgServerToGCReportCheerState>]: never; }>(object: I_1): CMsgServerToGCReportCheerState;
};
export declare const CMsgServerToGCGetStickerHeroes: {
    fromJSON(object: any): CMsgServerToGCGetStickerHeroes;
    toJSON(message: CMsgServerToGCGetStickerHeroes): unknown;
    create<I extends {
        account_ids?: number[];
    } & {
        account_ids?: number[] & number[] & { [K in Exclude<keyof I["account_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "account_ids">]: never; }>(base?: I): CMsgServerToGCGetStickerHeroes;
    fromPartial<I_1 extends {
        account_ids?: number[];
    } & {
        account_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["account_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "account_ids">]: never; }>(object: I_1): CMsgServerToGCGetStickerHeroes;
};
export declare const CMsgServerToGCGetStickerHeroesResponse: {
    fromJSON(object: any): CMsgServerToGCGetStickerHeroesResponse;
    toJSON(message: CMsgServerToGCGetStickerHeroesResponse): unknown;
    create<I extends {
        players?: {
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            };
        }[];
    } & {
        players?: {
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            };
        }[] & ({
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            };
        } & {
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            } & {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[] & ({
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                } & {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                } & { [K in Exclude<keyof I["players"][number]["stickers"]["heroes"][number], keyof import("./dota_gcmessages_common").CMsgStickerHero>]: never; })[] & { [K_1 in Exclude<keyof I["players"][number]["stickers"]["heroes"], keyof {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[]>]: never; };
            } & { [K_2 in Exclude<keyof I["players"][number]["stickers"], "heroes">]: never; };
        } & { [K_3 in Exclude<keyof I["players"][number], keyof CMsgServerToGCGetStickerHeroesResponse_Player>]: never; })[] & { [K_4 in Exclude<keyof I["players"], keyof {
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            };
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I, "players">]: never; }>(base?: I): CMsgServerToGCGetStickerHeroesResponse;
    fromPartial<I_1 extends {
        players?: {
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            };
        }[];
    } & {
        players?: {
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            };
        }[] & ({
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            };
        } & {
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            } & {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[] & ({
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                } & {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                } & { [K_6 in Exclude<keyof I_1["players"][number]["stickers"]["heroes"][number], keyof import("./dota_gcmessages_common").CMsgStickerHero>]: never; })[] & { [K_7 in Exclude<keyof I_1["players"][number]["stickers"]["heroes"], keyof {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[]>]: never; };
            } & { [K_8 in Exclude<keyof I_1["players"][number]["stickers"], "heroes">]: never; };
        } & { [K_9 in Exclude<keyof I_1["players"][number], keyof CMsgServerToGCGetStickerHeroesResponse_Player>]: never; })[] & { [K_10 in Exclude<keyof I_1["players"], keyof {
            account_id?: number;
            stickers?: {
                heroes?: {
                    hero_id?: number;
                    item_def_id?: number;
                    quality?: number;
                    source_item_id?: string;
                }[];
            };
        }[]>]: never; };
    } & { [K_11 in Exclude<keyof I_1, "players">]: never; }>(object: I_1): CMsgServerToGCGetStickerHeroesResponse;
};
export declare const CMsgServerToGCGetStickerHeroesResponse_Player: {
    fromJSON(object: any): CMsgServerToGCGetStickerHeroesResponse_Player;
    toJSON(message: CMsgServerToGCGetStickerHeroesResponse_Player): unknown;
    create<I extends {
        account_id?: number;
        stickers?: {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[];
        };
    } & {
        account_id?: number;
        stickers?: {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[];
        } & {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[] & ({
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            } & {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            } & { [K in Exclude<keyof I["stickers"]["heroes"][number], keyof import("./dota_gcmessages_common").CMsgStickerHero>]: never; })[] & { [K_1 in Exclude<keyof I["stickers"]["heroes"], keyof {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["stickers"], "heroes">]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgServerToGCGetStickerHeroesResponse_Player>]: never; }>(base?: I): CMsgServerToGCGetStickerHeroesResponse_Player;
    fromPartial<I_1 extends {
        account_id?: number;
        stickers?: {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[];
        };
    } & {
        account_id?: number;
        stickers?: {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[];
        } & {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[] & ({
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            } & {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            } & { [K_4 in Exclude<keyof I_1["stickers"]["heroes"][number], keyof import("./dota_gcmessages_common").CMsgStickerHero>]: never; })[] & { [K_5 in Exclude<keyof I_1["stickers"]["heroes"], keyof {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I_1["stickers"], "heroes">]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgServerToGCGetStickerHeroesResponse_Player>]: never; }>(object: I_1): CMsgServerToGCGetStickerHeroesResponse_Player;
};
export declare const CMsgGCToServerSetSteamLearnDisable: {
    fromJSON(_: any): CMsgGCToServerSetSteamLearnDisable;
    toJSON(_: CMsgGCToServerSetSteamLearnDisable): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgGCToServerSetSteamLearnDisable;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgGCToServerSetSteamLearnDisable;
};
export declare const CMsgGCToServerSetSteamLearnKeysChanged: {
    fromJSON(object: any): CMsgGCToServerSetSteamLearnKeysChanged;
    toJSON(message: CMsgGCToServerSetSteamLearnKeysChanged): unknown;
    create<I extends {
        keys?: {
            register_data_source_key?: string;
            cache_data_keys?: {
                data_source_id?: number;
                version?: number;
                key?: string;
            }[];
            snapshot_project_keys?: {
                project_id?: number;
                published_version?: number;
                key?: string;
            }[];
        };
    } & {
        keys?: {
            register_data_source_key?: string;
            cache_data_keys?: {
                data_source_id?: number;
                version?: number;
                key?: string;
            }[];
            snapshot_project_keys?: {
                project_id?: number;
                published_version?: number;
                key?: string;
            }[];
        } & {
            register_data_source_key?: string;
            cache_data_keys?: {
                data_source_id?: number;
                version?: number;
                key?: string;
            }[] & ({
                data_source_id?: number;
                version?: number;
                key?: string;
            } & {
                data_source_id?: number;
                version?: number;
                key?: string;
            } & { [K in Exclude<keyof I["keys"]["cache_data_keys"][number], keyof import("./steammessages_steamlearn.steamworkssdk").CMsgSteamLearnHMACKeys_CacheDataKeys>]: never; })[] & { [K_1 in Exclude<keyof I["keys"]["cache_data_keys"], keyof {
                data_source_id?: number;
                version?: number;
                key?: string;
            }[]>]: never; };
            snapshot_project_keys?: {
                project_id?: number;
                published_version?: number;
                key?: string;
            }[] & ({
                project_id?: number;
                published_version?: number;
                key?: string;
            } & {
                project_id?: number;
                published_version?: number;
                key?: string;
            } & { [K_2 in Exclude<keyof I["keys"]["snapshot_project_keys"][number], keyof import("./steammessages_steamlearn.steamworkssdk").CMsgSteamLearnHMACKeys_SnapshotProjectKeys>]: never; })[] & { [K_3 in Exclude<keyof I["keys"]["snapshot_project_keys"], keyof {
                project_id?: number;
                published_version?: number;
                key?: string;
            }[]>]: never; };
        } & { [K_4 in Exclude<keyof I["keys"], keyof CMsgSteamLearnHMACKeys>]: never; };
    } & { [K_5 in Exclude<keyof I, "keys">]: never; }>(base?: I): CMsgGCToServerSetSteamLearnKeysChanged;
    fromPartial<I_1 extends {
        keys?: {
            register_data_source_key?: string;
            cache_data_keys?: {
                data_source_id?: number;
                version?: number;
                key?: string;
            }[];
            snapshot_project_keys?: {
                project_id?: number;
                published_version?: number;
                key?: string;
            }[];
        };
    } & {
        keys?: {
            register_data_source_key?: string;
            cache_data_keys?: {
                data_source_id?: number;
                version?: number;
                key?: string;
            }[];
            snapshot_project_keys?: {
                project_id?: number;
                published_version?: number;
                key?: string;
            }[];
        } & {
            register_data_source_key?: string;
            cache_data_keys?: {
                data_source_id?: number;
                version?: number;
                key?: string;
            }[] & ({
                data_source_id?: number;
                version?: number;
                key?: string;
            } & {
                data_source_id?: number;
                version?: number;
                key?: string;
            } & { [K_6 in Exclude<keyof I_1["keys"]["cache_data_keys"][number], keyof import("./steammessages_steamlearn.steamworkssdk").CMsgSteamLearnHMACKeys_CacheDataKeys>]: never; })[] & { [K_7 in Exclude<keyof I_1["keys"]["cache_data_keys"], keyof {
                data_source_id?: number;
                version?: number;
                key?: string;
            }[]>]: never; };
            snapshot_project_keys?: {
                project_id?: number;
                published_version?: number;
                key?: string;
            }[] & ({
                project_id?: number;
                published_version?: number;
                key?: string;
            } & {
                project_id?: number;
                published_version?: number;
                key?: string;
            } & { [K_8 in Exclude<keyof I_1["keys"]["snapshot_project_keys"][number], keyof import("./steammessages_steamlearn.steamworkssdk").CMsgSteamLearnHMACKeys_SnapshotProjectKeys>]: never; })[] & { [K_9 in Exclude<keyof I_1["keys"]["snapshot_project_keys"], keyof {
                project_id?: number;
                published_version?: number;
                key?: string;
            }[]>]: never; };
        } & { [K_10 in Exclude<keyof I_1["keys"], keyof CMsgSteamLearnHMACKeys>]: never; };
    } & { [K_11 in Exclude<keyof I_1, "keys">]: never; }>(object: I_1): CMsgGCToServerSetSteamLearnKeysChanged;
};
export declare const CMsgSteamLearnMatchInfo: {
    fromJSON(object: any): CMsgSteamLearnMatchInfo;
    toJSON(message: CMsgSteamLearnMatchInfo): unknown;
    create<I extends {
        average_mmr?: number;
        radiant_won?: boolean;
        duration?: number;
        game_mode?: number;
        lobby_type?: number;
    } & {
        average_mmr?: number;
        radiant_won?: boolean;
        duration?: number;
        game_mode?: number;
        lobby_type?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSteamLearnMatchInfo>]: never; }>(base?: I): CMsgSteamLearnMatchInfo;
    fromPartial<I_1 extends {
        average_mmr?: number;
        radiant_won?: boolean;
        duration?: number;
        game_mode?: number;
        lobby_type?: number;
    } & {
        average_mmr?: number;
        radiant_won?: boolean;
        duration?: number;
        game_mode?: number;
        lobby_type?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSteamLearnMatchInfo>]: never; }>(object: I_1): CMsgSteamLearnMatchInfo;
};
export declare const CMsgSteamLearnMatchHeroes: {
    fromJSON(object: any): CMsgSteamLearnMatchHeroes;
    toJSON(message: CMsgSteamLearnMatchHeroes): unknown;
    create<I extends {
        radiant_hero_ids?: number[];
        dire_hero_ids?: number[];
        radiant_lanes?: number[];
        dire_lanes?: number[];
    } & {
        radiant_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["radiant_hero_ids"], keyof number[]>]: never; };
        dire_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["dire_hero_ids"], keyof number[]>]: never; };
        radiant_lanes?: number[] & number[] & { [K_2 in Exclude<keyof I["radiant_lanes"], keyof number[]>]: never; };
        dire_lanes?: number[] & number[] & { [K_3 in Exclude<keyof I["dire_lanes"], keyof number[]>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgSteamLearnMatchHeroes>]: never; }>(base?: I): CMsgSteamLearnMatchHeroes;
    fromPartial<I_1 extends {
        radiant_hero_ids?: number[];
        dire_hero_ids?: number[];
        radiant_lanes?: number[];
        dire_lanes?: number[];
    } & {
        radiant_hero_ids?: number[] & number[] & { [K_5 in Exclude<keyof I_1["radiant_hero_ids"], keyof number[]>]: never; };
        dire_hero_ids?: number[] & number[] & { [K_6 in Exclude<keyof I_1["dire_hero_ids"], keyof number[]>]: never; };
        radiant_lanes?: number[] & number[] & { [K_7 in Exclude<keyof I_1["radiant_lanes"], keyof number[]>]: never; };
        dire_lanes?: number[] & number[] & { [K_8 in Exclude<keyof I_1["dire_lanes"], keyof number[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgSteamLearnMatchHeroes>]: never; }>(object: I_1): CMsgSteamLearnMatchHeroes;
};
export declare const CMsgSteamLearnMatchHero: {
    fromJSON(object: any): CMsgSteamLearnMatchHero;
    toJSON(message: CMsgSteamLearnMatchHero): unknown;
    create<I extends {
        hero_id?: number;
        lane?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
    } & {
        hero_id?: number;
        lane?: number;
        allied_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_1 in Exclude<keyof I["enemy_hero_ids"], keyof number[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgSteamLearnMatchHero>]: never; }>(base?: I): CMsgSteamLearnMatchHero;
    fromPartial<I_1 extends {
        hero_id?: number;
        lane?: number;
        allied_hero_ids?: number[];
        enemy_hero_ids?: number[];
    } & {
        hero_id?: number;
        lane?: number;
        allied_hero_ids?: number[] & number[] & { [K_3 in Exclude<keyof I_1["allied_hero_ids"], keyof number[]>]: never; };
        enemy_hero_ids?: number[] & number[] & { [K_4 in Exclude<keyof I_1["enemy_hero_ids"], keyof number[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSteamLearnMatchHero>]: never; }>(object: I_1): CMsgSteamLearnMatchHero;
};
export declare const CMsgSteamLearnMatchState: {
    fromJSON(object: any): CMsgSteamLearnMatchState;
    toJSON(message: CMsgSteamLearnMatchState): unknown;
    create<I extends {
        game_time?: number;
        radiant_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        };
        dire_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        };
    } & {
        game_time?: number;
        radiant_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[] & ({
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & { [K in Exclude<keyof I["radiant_state"]["player_states"][number], keyof CMsgSteamLearnMatchState_PlayerState>]: never; })[] & { [K_1 in Exclude<keyof I["radiant_state"]["player_states"], keyof {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[]>]: never; };
            tower_health_pct?: number[] & number[] & { [K_2 in Exclude<keyof I["radiant_state"]["tower_health_pct"], keyof number[]>]: never; };
            barracks_health_pct?: number[] & number[] & { [K_3 in Exclude<keyof I["radiant_state"]["barracks_health_pct"], keyof number[]>]: never; };
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & { [K_4 in Exclude<keyof I["radiant_state"], keyof CMsgSteamLearnMatchState_TeamState>]: never; };
        dire_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[] & ({
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & { [K_5 in Exclude<keyof I["dire_state"]["player_states"][number], keyof CMsgSteamLearnMatchState_PlayerState>]: never; })[] & { [K_6 in Exclude<keyof I["dire_state"]["player_states"], keyof {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[]>]: never; };
            tower_health_pct?: number[] & number[] & { [K_7 in Exclude<keyof I["dire_state"]["tower_health_pct"], keyof number[]>]: never; };
            barracks_health_pct?: number[] & number[] & { [K_8 in Exclude<keyof I["dire_state"]["barracks_health_pct"], keyof number[]>]: never; };
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & { [K_9 in Exclude<keyof I["dire_state"], keyof CMsgSteamLearnMatchState_TeamState>]: never; };
    } & { [K_10 in Exclude<keyof I, keyof CMsgSteamLearnMatchState>]: never; }>(base?: I): CMsgSteamLearnMatchState;
    fromPartial<I_1 extends {
        game_time?: number;
        radiant_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        };
        dire_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        };
    } & {
        game_time?: number;
        radiant_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[] & ({
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & { [K_11 in Exclude<keyof I_1["radiant_state"]["player_states"][number], keyof CMsgSteamLearnMatchState_PlayerState>]: never; })[] & { [K_12 in Exclude<keyof I_1["radiant_state"]["player_states"], keyof {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[]>]: never; };
            tower_health_pct?: number[] & number[] & { [K_13 in Exclude<keyof I_1["radiant_state"]["tower_health_pct"], keyof number[]>]: never; };
            barracks_health_pct?: number[] & number[] & { [K_14 in Exclude<keyof I_1["radiant_state"]["barracks_health_pct"], keyof number[]>]: never; };
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & { [K_15 in Exclude<keyof I_1["radiant_state"], keyof CMsgSteamLearnMatchState_TeamState>]: never; };
        dire_state?: {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[];
            tower_health_pct?: number[];
            barracks_health_pct?: number[];
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & {
            team?: number;
            player_states?: {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[] & ({
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            } & { [K_16 in Exclude<keyof I_1["dire_state"]["player_states"][number], keyof CMsgSteamLearnMatchState_PlayerState>]: never; })[] & { [K_17 in Exclude<keyof I_1["dire_state"]["player_states"], keyof {
                hero_id?: number;
                net_worth?: number;
                level?: number;
                deaths?: number;
                respawn_time?: number;
                has_buyback?: boolean;
                has_aegis?: boolean;
                has_rapier?: boolean;
                distance?: number;
            }[]>]: never; };
            tower_health_pct?: number[] & number[] & { [K_18 in Exclude<keyof I_1["dire_state"]["tower_health_pct"], keyof number[]>]: never; };
            barracks_health_pct?: number[] & number[] & { [K_19 in Exclude<keyof I_1["dire_state"]["barracks_health_pct"], keyof number[]>]: never; };
            ancient_health_pct?: number;
            glyph_cooldown?: number;
            kills?: number;
            creep_distance_safe?: number;
            creep_distance_mid?: number;
            creep_distance_off?: number;
        } & { [K_20 in Exclude<keyof I_1["dire_state"], keyof CMsgSteamLearnMatchState_TeamState>]: never; };
    } & { [K_21 in Exclude<keyof I_1, keyof CMsgSteamLearnMatchState>]: never; }>(object: I_1): CMsgSteamLearnMatchState;
};
export declare const CMsgSteamLearnMatchState_PlayerState: {
    fromJSON(object: any): CMsgSteamLearnMatchState_PlayerState;
    toJSON(message: CMsgSteamLearnMatchState_PlayerState): unknown;
    create<I extends {
        hero_id?: number;
        net_worth?: number;
        level?: number;
        deaths?: number;
        respawn_time?: number;
        has_buyback?: boolean;
        has_aegis?: boolean;
        has_rapier?: boolean;
        distance?: number;
    } & {
        hero_id?: number;
        net_worth?: number;
        level?: number;
        deaths?: number;
        respawn_time?: number;
        has_buyback?: boolean;
        has_aegis?: boolean;
        has_rapier?: boolean;
        distance?: number;
    } & { [K in Exclude<keyof I, keyof CMsgSteamLearnMatchState_PlayerState>]: never; }>(base?: I): CMsgSteamLearnMatchState_PlayerState;
    fromPartial<I_1 extends {
        hero_id?: number;
        net_worth?: number;
        level?: number;
        deaths?: number;
        respawn_time?: number;
        has_buyback?: boolean;
        has_aegis?: boolean;
        has_rapier?: boolean;
        distance?: number;
    } & {
        hero_id?: number;
        net_worth?: number;
        level?: number;
        deaths?: number;
        respawn_time?: number;
        has_buyback?: boolean;
        has_aegis?: boolean;
        has_rapier?: boolean;
        distance?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSteamLearnMatchState_PlayerState>]: never; }>(object: I_1): CMsgSteamLearnMatchState_PlayerState;
};
export declare const CMsgSteamLearnMatchState_TeamState: {
    fromJSON(object: any): CMsgSteamLearnMatchState_TeamState;
    toJSON(message: CMsgSteamLearnMatchState_TeamState): unknown;
    create<I extends {
        team?: number;
        player_states?: {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[];
        tower_health_pct?: number[];
        barracks_health_pct?: number[];
        ancient_health_pct?: number;
        glyph_cooldown?: number;
        kills?: number;
        creep_distance_safe?: number;
        creep_distance_mid?: number;
        creep_distance_off?: number;
    } & {
        team?: number;
        player_states?: {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[] & ({
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        } & {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        } & { [K in Exclude<keyof I["player_states"][number], keyof CMsgSteamLearnMatchState_PlayerState>]: never; })[] & { [K_1 in Exclude<keyof I["player_states"], keyof {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[]>]: never; };
        tower_health_pct?: number[] & number[] & { [K_2 in Exclude<keyof I["tower_health_pct"], keyof number[]>]: never; };
        barracks_health_pct?: number[] & number[] & { [K_3 in Exclude<keyof I["barracks_health_pct"], keyof number[]>]: never; };
        ancient_health_pct?: number;
        glyph_cooldown?: number;
        kills?: number;
        creep_distance_safe?: number;
        creep_distance_mid?: number;
        creep_distance_off?: number;
    } & { [K_4 in Exclude<keyof I, keyof CMsgSteamLearnMatchState_TeamState>]: never; }>(base?: I): CMsgSteamLearnMatchState_TeamState;
    fromPartial<I_1 extends {
        team?: number;
        player_states?: {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[];
        tower_health_pct?: number[];
        barracks_health_pct?: number[];
        ancient_health_pct?: number;
        glyph_cooldown?: number;
        kills?: number;
        creep_distance_safe?: number;
        creep_distance_mid?: number;
        creep_distance_off?: number;
    } & {
        team?: number;
        player_states?: {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[] & ({
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        } & {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        } & { [K_5 in Exclude<keyof I_1["player_states"][number], keyof CMsgSteamLearnMatchState_PlayerState>]: never; })[] & { [K_6 in Exclude<keyof I_1["player_states"], keyof {
            hero_id?: number;
            net_worth?: number;
            level?: number;
            deaths?: number;
            respawn_time?: number;
            has_buyback?: boolean;
            has_aegis?: boolean;
            has_rapier?: boolean;
            distance?: number;
        }[]>]: never; };
        tower_health_pct?: number[] & number[] & { [K_7 in Exclude<keyof I_1["tower_health_pct"], keyof number[]>]: never; };
        barracks_health_pct?: number[] & number[] & { [K_8 in Exclude<keyof I_1["barracks_health_pct"], keyof number[]>]: never; };
        ancient_health_pct?: number;
        glyph_cooldown?: number;
        kills?: number;
        creep_distance_safe?: number;
        creep_distance_mid?: number;
        creep_distance_off?: number;
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgSteamLearnMatchState_TeamState>]: never; }>(object: I_1): CMsgSteamLearnMatchState_TeamState;
};
export declare const CMsgSteamLearnItemPurchase: {
    fromJSON(object: any): CMsgSteamLearnItemPurchase;
    toJSON(message: CMsgSteamLearnItemPurchase): unknown;
    create<I extends {
        item_id?: number;
        inventory_items?: number[];
        gold?: number;
        net_worth?: number;
        is_radiant_team?: number;
        game_time?: number;
        is_using_dota_plus?: boolean;
    } & {
        item_id?: number;
        inventory_items?: number[] & number[] & { [K in Exclude<keyof I["inventory_items"], keyof number[]>]: never; };
        gold?: number;
        net_worth?: number;
        is_radiant_team?: number;
        game_time?: number;
        is_using_dota_plus?: boolean;
    } & { [K_1 in Exclude<keyof I, keyof CMsgSteamLearnItemPurchase>]: never; }>(base?: I): CMsgSteamLearnItemPurchase;
    fromPartial<I_1 extends {
        item_id?: number;
        inventory_items?: number[];
        gold?: number;
        net_worth?: number;
        is_radiant_team?: number;
        game_time?: number;
        is_using_dota_plus?: boolean;
    } & {
        item_id?: number;
        inventory_items?: number[] & number[] & { [K_2 in Exclude<keyof I_1["inventory_items"], keyof number[]>]: never; };
        gold?: number;
        net_worth?: number;
        is_radiant_team?: number;
        game_time?: number;
        is_using_dota_plus?: boolean;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgSteamLearnItemPurchase>]: never; }>(object: I_1): CMsgSteamLearnItemPurchase;
};
export declare const CMsgSteamLearnAbilitySkill: {
    fromJSON(object: any): CMsgSteamLearnAbilitySkill;
    toJSON(message: CMsgSteamLearnAbilitySkill): unknown;
    create<I extends {
        ability_id?: number;
        skilled_abilities?: number[];
        game_time?: number;
        is_using_dota_plus?: boolean;
    } & {
        ability_id?: number;
        skilled_abilities?: number[] & number[] & { [K in Exclude<keyof I["skilled_abilities"], keyof number[]>]: never; };
        game_time?: number;
        is_using_dota_plus?: boolean;
    } & { [K_1 in Exclude<keyof I, keyof CMsgSteamLearnAbilitySkill>]: never; }>(base?: I): CMsgSteamLearnAbilitySkill;
    fromPartial<I_1 extends {
        ability_id?: number;
        skilled_abilities?: number[];
        game_time?: number;
        is_using_dota_plus?: boolean;
    } & {
        ability_id?: number;
        skilled_abilities?: number[] & number[] & { [K_2 in Exclude<keyof I_1["skilled_abilities"], keyof number[]>]: never; };
        game_time?: number;
        is_using_dota_plus?: boolean;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgSteamLearnAbilitySkill>]: never; }>(object: I_1): CMsgSteamLearnAbilitySkill;
};
export declare const CMsgSignOutMuertaMinigame: {
    fromJSON(object: any): CMsgSignOutMuertaMinigame;
    toJSON(message: CMsgSignOutMuertaMinigame): unknown;
    create<I extends {
        event_game_data?: string;
    } & {
        event_game_data?: string;
    } & { [K in Exclude<keyof I, "event_game_data">]: never; }>(base?: I): CMsgSignOutMuertaMinigame;
    fromPartial<I_1 extends {
        event_game_data?: string;
    } & {
        event_game_data?: string;
    } & { [K_1 in Exclude<keyof I_1, "event_game_data">]: never; }>(object: I_1): CMsgSignOutMuertaMinigame;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
