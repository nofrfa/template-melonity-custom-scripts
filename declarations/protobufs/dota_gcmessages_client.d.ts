import { CSOEconItem } from "./base_gcmessages";
import { CMatchClip, CMsgArcanaVoteMatchVotes, CMsgDOTAMatch, CMsgDOTASDOHeroStatsHistory, CMsgDOTATriviaQuestion, CMsgPlayerHeroRecentAccomplishments, CMsgPlayerRecentAccomplishments, CMsgRecentMatchInfo, CMsgStickerbook, CMsgStickerbookPage, CMsgStickerbookSticker, CMsgStickerbookTeamPageOrderSequence, CMsgStickerHeroes, CMsgSuccessfulHero, CMsgUnderDraftData, CPartySearchClientParty, EHeroRelicRarity, EOverwatchConviction, EStickerbookPageType } from "./dota_gcmessages_common";
import { CSODOTALobby_State } from "./dota_gcmessages_common_lobby";
import { CSODOTAParty_State } from "./dota_gcmessages_common_match_management";
import { DOTA_GameMode, DOTAMatchVote, DOTASelectionPriorityChoice, EDPCFavoriteType, EEvent, ELeagueRegion, EMatchGroupServerStatus, EOverwatchReportReason, EProfileCardSlotType, MatchType } from "./dota_shared_enums";
import { CExtraMsgBlock } from "./gcsdk_gcmessages";
export declare const protobufPackage = "";
export declare enum CMsgDOTARequestMatches_SkillLevel {
    CMsgDOTARequestMatches_SkillLevel_Any = 0,
    CMsgDOTARequestMatches_SkillLevel_Normal = 1,
    CMsgDOTARequestMatches_SkillLevel_High = 2,
    CMsgDOTARequestMatches_SkillLevel_VeryHigh = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTARequestMatches_SkillLevelFromJSON(object: any): CMsgDOTARequestMatches_SkillLevel;
export declare function cMsgDOTARequestMatches_SkillLevelToJSON(object: CMsgDOTARequestMatches_SkillLevel): string;
export declare enum DOTA_WatchReplayType {
    DOTA_WATCH_REPLAY_NORMAL = 0,
    DOTA_WATCH_REPLAY_HIGHLIGHTS = 1,
    UNRECOGNIZED = -1
}
export declare function dOTA_WatchReplayTypeFromJSON(object: any): DOTA_WatchReplayType;
export declare function dOTA_WatchReplayTypeToJSON(object: DOTA_WatchReplayType): string;
export declare enum EItemEditorReservationResult {
    k_EItemEditorReservationResult_OK = 1,
    k_EItemEditorReservationResult_AlreadyExists = 2,
    k_EItemEditorReservationResult_Reserved = 3,
    k_EItemEditorReservationResult_TimedOut = 4,
    UNRECOGNIZED = -1
}
export declare function eItemEditorReservationResultFromJSON(object: any): EItemEditorReservationResult;
export declare function eItemEditorReservationResultToJSON(object: EItemEditorReservationResult): string;
export declare enum EWeekendTourneyRichPresenceEvent {
    k_EWeekendTourneyRichPresenceEvent_None = 0,
    k_EWeekendTourneyRichPresenceEvent_StartedMatch = 1,
    k_EWeekendTourneyRichPresenceEvent_WonMatch = 2,
    k_EWeekendTourneyRichPresenceEvent_Eliminated = 3,
    UNRECOGNIZED = -1
}
export declare function eWeekendTourneyRichPresenceEventFromJSON(object: any): EWeekendTourneyRichPresenceEvent;
export declare function eWeekendTourneyRichPresenceEventToJSON(object: EWeekendTourneyRichPresenceEvent): string;
export declare enum EDOTATriviaAnswerResult {
    k_EDOTATriviaAnswerResult_Success = 0,
    k_EDOTATriviaAnswerResult_InvalidQuestion = 1,
    k_EDOTATriviaAnswerResult_InvalidAnswer = 2,
    k_EDOTATriviaAnswerResult_QuestionLocked = 3,
    k_EDOTATriviaAnswerResult_AlreadyAnswered = 4,
    k_EDOTATriviaAnswerResult_TriviaDisabled = 5,
    UNRECOGNIZED = -1
}
export declare function eDOTATriviaAnswerResultFromJSON(object: any): EDOTATriviaAnswerResult;
export declare function eDOTATriviaAnswerResultToJSON(object: EDOTATriviaAnswerResult): string;
export declare enum EPurchaseHeroRelicResult {
    k_EPurchaseHeroRelicResult_Success = 0,
    k_EPurchaseHeroRelicResult_FailedToSend = 1,
    k_EPurchaseHeroRelicResult_NotEnoughPoints = 2,
    k_EPurchaseHeroRelicResult_InternalServerError = 3,
    k_EPurchaseHeroRelicResult_PurchaseNotAllowed = 4,
    k_EPurchaseHeroRelicResult_InvalidRelic = 5,
    k_EPurchaseHeroRelicResult_AlreadyOwned = 6,
    k_EPurchaseHeroRelicResult_InvalidRarity = 7,
    UNRECOGNIZED = -1
}
export declare function ePurchaseHeroRelicResultFromJSON(object: any): EPurchaseHeroRelicResult;
export declare function ePurchaseHeroRelicResultToJSON(object: EPurchaseHeroRelicResult): string;
export declare enum EDevEventRequestResult {
    k_EDevEventRequestResult_Success = 0,
    k_EDevEventRequestResult_NotAllowed = 1,
    k_EDevEventRequestResult_InvalidEvent = 2,
    k_EDevEventRequestResult_SqlFailure = 3,
    k_EDevEventRequestResult_Timeout = 4,
    k_EDevEventRequestResult_LockFailure = 5,
    k_EDevEventRequestResult_SDOLoadFailure = 6,
    UNRECOGNIZED = -1
}
export declare function eDevEventRequestResultFromJSON(object: any): EDevEventRequestResult;
export declare function eDevEventRequestResultToJSON(object: EDevEventRequestResult): string;
export declare enum ESupportEventRequestResult {
    k_ESupportEventRequestResult_Success = 0,
    k_ESupportEventRequestResult_Timeout = 1,
    k_ESupportEventRequestResult_CantLockSOCache = 2,
    k_ESupportEventRequestResult_ItemNotInInventory = 3,
    k_ESupportEventRequestResult_InvalidItemDef = 4,
    k_ESupportEventRequestResult_InvalidEvent = 5,
    k_ESupportEventRequestResult_EventExpired = 6,
    k_ESupportEventRequestResult_InvalidSupportAccount = 7,
    k_ESupportEventRequestResult_InvalidSupportMessage = 8,
    k_ESupportEventRequestResult_InvalidEventPoints = 9,
    k_ESupportEventRequestResult_InvalidPremiumPoints = 10,
    k_ESupportEventRequestResult_InvalidActionID = 11,
    k_ESupportEventRequestResult_InvalidActionScore = 12,
    k_ESupportEventRequestResult_TransactionFailed = 13,
    UNRECOGNIZED = -1
}
export declare function eSupportEventRequestResultFromJSON(object: any): ESupportEventRequestResult;
export declare function eSupportEventRequestResultToJSON(object: ESupportEventRequestResult): string;
export declare enum EUnderDraftResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eNoGold = 2,
    k_eInvalidSlot = 3,
    k_eNoBenchSpace = 4,
    k_eNoTickets = 5,
    k_eEventNotOwned = 6,
    k_eInvalidReward = 7,
    k_eHasBigReward = 8,
    k_eNoGCConnection = 9,
    k_eTooBusy = 10,
    k_eCantRollBack = 11,
    UNRECOGNIZED = -1
}
export declare function eUnderDraftResponseFromJSON(object: any): EUnderDraftResponse;
export declare function eUnderDraftResponseToJSON(object: EUnderDraftResponse): string;
export declare enum EDOTADraftTriviaAnswerResult {
    k_EDOTADraftTriviaAnswerResult_Success = 0,
    k_EDOTADraftTriviaAnswerResult_InvalidMatchID = 1,
    k_EDOTADraftTriviaAnswerResult_AlreadyAnswered = 2,
    k_EDOTADraftTriviaAnswerResult_InternalError = 3,
    k_EDOTADraftTriviaAnswerResult_TriviaDisabled = 4,
    k_EDOTADraftTriviaAnswerResult_GCDown = 5,
    UNRECOGNIZED = -1
}
export declare function eDOTADraftTriviaAnswerResultFromJSON(object: any): EDOTADraftTriviaAnswerResult;
export declare function eDOTADraftTriviaAnswerResultToJSON(object: EDOTADraftTriviaAnswerResult): string;
export interface CMsgClientSuspended {
    time_end: number;
}
export interface CMsgBalancedShuffleLobby {
}
export interface CMsgInitialQuestionnaireResponse {
    initial_skill: number;
}
export interface CMsgDOTARequestMatchesResponse {
    matches: CMsgDOTAMatch[];
    series: CMsgDOTARequestMatchesResponse_Series[];
    request_id: number;
    total_results: number;
    results_remaining: number;
}
export interface CMsgDOTARequestMatchesResponse_Series {
    matches: CMsgDOTAMatch[];
    series_id: number;
    series_type: number;
}
export interface CMsgDOTAPopup {
    id: CMsgDOTAPopup_PopupID;
    custom_text: string;
    int_data: number;
    popup_data: string;
    loc_token_header: string;
    loc_token_msg: string;
    var_names: string[];
    var_values: string[];
    debug_text: string;
}
export declare enum CMsgDOTAPopup_PopupID {
    NONE = -1,
    KICKED_FROM_LOBBY = 0,
    KICKED_FROM_PARTY = 1,
    KICKED_FROM_TEAM = 2,
    TEAM_WAS_DISBANDED = 3,
    TEAM_MATCHMAKE_ALREADY_MATCH = 4,
    TEAM_MATCHMAKE_ALREADY_FINDING = 5,
    TEAM_MATCHMAKE_FULL = 6,
    TEAM_MATCHMAKE_FAIL_ADD = 7,
    TEAM_MATCHMAKE_FAIL_ADD_CURRENT = 8,
    TEAM_MATCHMAKE_FAILED_TEAM_MEMBER = 9,
    TEAM_MATCHMAKE_ALREADY_GAME = 10,
    TEAM_MATCHMAKE_FAIL_GET_PARTY = 11,
    MATCHMAKING_DISABLED = 12,
    INVITE_DENIED = 13,
    PARTY_FULL = 14,
    MADE_ADMIN = 15,
    NEED_TO_PURCHASE = 16,
    SIGNON_MESSAGE = 17,
    MATCHMAKING_REGION_OFFLINE = 19,
    TOURNAMENT_GAME_NOT_FOUND = 21,
    TOURNAMENT_GAME_HAS_LOBBY_ID = 22,
    TOURNAMENT_GAME_HAS_MATCH_ID = 23,
    TOURNAMENT_GAME_HAS_NO_RADIANT_TEAM = 24,
    TOURNAMENT_GAME_HAS_NO_DIRE_TEAM = 25,
    TOURNAMENT_GAME_SQL_UPDATE_FAILED = 26,
    NOT_LEAGUE_ADMIN = 27,
    IN_ANOTHER_GAME = 29,
    PARTY_MEMBER_IN_ANOTHER_GAME = 30,
    PARTY_MEMBER_IN_LOW_PRIORITY = 31,
    CLIENT_OUT_OF_DATE = 32,
    SAVE_GAME_CORRUPT = 38,
    INSUFFICIENT_INGOTS = 39,
    COMPETITIVE_MM_NOT_ENOUGH_PLAY_TIME_PLAY_MORE_CASUAL = 42,
    PARTY_LEADER_JOINED_LOBBY = 44,
    WEEKEND_TOURNEY_UNMATCHED = 48,
    POST_MATCH_SURVEY = 49,
    TROPHY_AWARDED = 50,
    TROPHY_LEVEL_UP = 51,
    ALL_HERO_CHALLENGE_PROGRESS = 52,
    NEED_INITIAL_SKILL = 53,
    NEED_INITIAL_SKILL_IN_PARTY = 54,
    TARGET_ENGINE_MISMATCH = 55,
    VAC_NOT_VERIFIED = 56,
    KICKED_FROM_QUEUE_EVENT_STARTING = 57,
    KICKED_FROM_QUEUE_EVENT_ENDING = 58,
    LOBBY_FULL = 62,
    EVENT_POINTS_EARNED = 63,
    CUSTOM_GAME_INCORRECT_VERSION = 64,
    LIMITED_USER_CHAT = 66,
    EVENT_PREMIUM_POINTS_EARNED = 67,
    LOBBY_MVP_AWARDED = 68,
    LOW_BADGE_LEVEL_CHAT = 71,
    LOW_WINS_CHAT = 72,
    UNVERIFIED_USER_CHAT = 73,
    PARTY_STARTED_FINDING_EVENT_MATCH = 74,
    GENERIC_INFO = 69,
    GENERIC_ERROR = 70,
    RANK_TIER_UPDATED = 75,
    CUSTOM_GAME_COOLDOWN_RESTRICTED = 76,
    CREATE_LOBBY_FAILED_TOO_MUCH_PLAYTIME = 77,
    CUSTOM_GAME_TOO_FEW_GAMES = 78,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTAPopup_PopupIDFromJSON(object: any): CMsgDOTAPopup_PopupID;
export declare function cMsgDOTAPopup_PopupIDToJSON(object: CMsgDOTAPopup_PopupID): string;
export interface CMsgDOTAReportsRemainingRequest {
}
export interface CMsgDOTAReportsRemainingResponse {
    num_positive_reports_remaining: number;
    num_negative_reports_remaining: number;
    num_positive_reports_total: number;
    num_negative_reports_total: number;
    num_comms_reports_remaining: number;
    num_comms_reports_total: number;
}
export interface CMsgDOTASubmitPlayerReport {
    target_account_id: number;
    report_flags: number;
    lobby_id: string;
    comment: string;
}
export interface CMsgDOTASubmitPlayerReportResponse {
    target_account_id: number;
    report_flags: number;
    debug_message: string;
    enum_result: CMsgDOTASubmitPlayerReportResponse_EResult;
}
export declare enum CMsgDOTASubmitPlayerReportResponse_EResult {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eDuplicateReport = 2,
    k_eMixedReportFlags = 3,
    k_eTooLate = 4,
    k_eInvalidPregameReport = 5,
    k_eHasntChatted = 6,
    k_eInvalid = 7,
    k_eOwnership = 8,
    k_eMissingRequirements = 9,
    k_eInvalidRoleReport = 10,
    k_eInvalidCoachReport = 11,
    k_eNoRemainingReports = 12,
    k_eInvalidMember = 13,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTASubmitPlayerReportResponse_EResultFromJSON(object: any): CMsgDOTASubmitPlayerReportResponse_EResult;
export declare function cMsgDOTASubmitPlayerReportResponse_EResultToJSON(object: CMsgDOTASubmitPlayerReportResponse_EResult): string;
export interface CMsgDOTASubmitPlayerAvoidRequest {
    target_account_id: number;
    lobby_id: string;
    user_note: string;
}
export interface CMsgDOTASubmitPlayerAvoidRequestResponse {
    target_account_id: number;
    result: number;
    debug_message: string;
}
export interface CMsgDOTASubmitLobbyMVPVote {
    target_account_id: number;
}
export interface CMsgDOTASubmitLobbyMVPVoteResponse {
    target_account_id: number;
    eresult: number;
}
export interface CMsgDOTALobbyMVPAwarded {
    match_id: string;
    mvp_account_id: number[];
}
export interface CMsgDOTAKickedFromMatchmakingQueue {
    match_type: MatchType;
}
export interface CMsgGCMatchDetailsRequest {
    match_id: string;
}
export interface CMsgGCMatchDetailsResponse {
    result: number;
    match: CMsgDOTAMatch | undefined;
    vote: DOTAMatchVote;
}
export interface CMsgDOTAProfileTickets {
    result: number;
    account_id: number;
    league_passes: CMsgDOTAProfileTickets_LeaguePass[];
}
export interface CMsgDOTAProfileTickets_LeaguePass {
    league_id: number;
    item_def: number;
}
export interface CMsgClientToGCGetProfileTickets {
    account_id: number;
}
export interface CMsgGCToClientPartySearchInvites {
    invites: CMsgGCToClientPartySearchInvite[];
}
export interface CMsgDOTAWelcome {
    store_item_hash: number;
    timeplayedconsecutively: number;
    allow_3rd_party_match_history: boolean;
    last_ip_address: number;
    profile_private: boolean;
    currency: number;
    should_request_player_origin: boolean;
    gc_socache_file_version: number;
    is_perfect_world_test_account: boolean;
    extra_messages: CMsgDOTAWelcome_CExtraMsg[];
    minimum_recent_item_id: string;
    active_event: EEvent;
    additional_user_message: number;
    custom_game_whitelist_version: number;
    party_search_friend_invites: CMsgGCToClientPartySearchInvites | undefined;
    remaining_playtime: number;
    disable_guild_persona_info: boolean;
    extra_message_blocks: CExtraMsgBlock[];
}
export interface CMsgDOTAWelcome_CExtraMsg {
    id: number;
    contents: string;
}
export interface CSODOTAGameHeroFavorites {
    account_id: number;
    hero_id: number;
}
export interface CMsgDOTAMatchVotes {
    match_id: string;
    votes: CMsgDOTAMatchVotes_PlayerVote[];
}
export interface CMsgDOTAMatchVotes_PlayerVote {
    account_id: number;
    vote: number;
}
export interface CMsgMatchmakingMatchGroupInfo {
    players_searching: number;
    auto_region_select_ping_penalty: number;
    auto_region_select_ping_penalty_custom: number;
    status: EMatchGroupServerStatus;
}
export interface CMsgDOTAMatchmakingStatsRequest {
}
export interface CMsgDOTAMatchmakingStatsResponse {
    matchgroups_version: number;
    legacy_searching_players_by_group_source2: number[];
    match_groups: CMsgMatchmakingMatchGroupInfo[];
}
export interface CMsgDOTAUpdateMatchmakingStats {
    stats: CMsgDOTAMatchmakingStatsResponse | undefined;
}
export interface CMsgDOTAUpdateMatchManagementStats {
    stats: CMsgDOTAMatchmakingStatsResponse | undefined;
}
export interface CMsgDOTASetMatchHistoryAccess {
    allow_3rd_party_match_history: boolean;
}
export interface CMsgDOTASetMatchHistoryAccessResponse {
    eresult: number;
}
export interface CMsgDOTANotifyAccountFlagsChange {
    accountid: number;
    account_flags: number;
}
export interface CMsgDOTASetProfilePrivacy {
    profile_private: boolean;
}
export interface CMsgDOTASetProfilePrivacyResponse {
    eresult: number;
}
export interface CMsgUpgradeLeagueItem {
    match_id: string;
    league_id: number;
}
export interface CMsgUpgradeLeagueItemResponse {
}
export interface CMsgGCWatchDownloadedReplay {
    match_id: string;
    watch_type: DOTA_WatchReplayType;
}
export interface CMsgClientsRejoinChatChannels {
}
export interface CMsgGCGetHeroStandings {
}
export interface CMsgGCGetHeroStandingsResponse {
    standings: CMsgGCGetHeroStandingsResponse_Hero[];
}
export interface CMsgGCGetHeroStandingsResponse_Hero {
    hero_id: number;
    wins: number;
    losses: number;
    win_streak: number;
    best_win_streak: number;
    avg_kills: number;
    avg_deaths: number;
    avg_assists: number;
    avg_gpm: number;
    avg_xpm: number;
    best_kills: number;
    best_assists: number;
    best_gpm: number;
    best_xpm: number;
    performance: number;
    wins_with_ally: number;
    losses_with_ally: number;
    wins_against_enemy: number;
    losses_against_enemy: number;
    networth_peak: number;
    lasthit_peak: number;
    deny_peak: number;
    damage_peak: number;
    longest_game_peak: number;
    healing_peak: number;
    avg_lasthits: number;
    avg_denies: number;
}
export interface CMatchPlayerTimedStatAverages {
    kills: number;
    deaths: number;
    assists: number;
    net_worth: number;
    last_hits: number;
    denies: number;
    item_value: number;
    support_gold_spent: number;
    camps_stacked: number;
    wards_placed: number;
    dewards: number;
    triple_kills: number;
    rampages: number;
}
export interface CMatchPlayerTimedStatStdDeviations {
    kills: number;
    deaths: number;
    assists: number;
    net_worth: number;
    last_hits: number;
    denies: number;
    item_value: number;
    support_gold_spent: number;
    camps_stacked: number;
    wards_placed: number;
    dewards: number;
    triple_kills: number;
    rampages: number;
}
export interface CMsgGCGetHeroTimedStatsResponse {
    hero_id: number;
    rank_chunked_stats: CMsgGCGetHeroTimedStatsResponse_RankChunkedStats[];
}
export interface CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer {
    time: number;
    all_stats: CMatchPlayerTimedStatAverages | undefined;
    winning_stats: CMatchPlayerTimedStatAverages | undefined;
    losing_stats: CMatchPlayerTimedStatAverages | undefined;
    winning_stddevs: CMatchPlayerTimedStatStdDeviations | undefined;
    losing_stddevs: CMatchPlayerTimedStatStdDeviations | undefined;
}
export interface CMsgGCGetHeroTimedStatsResponse_RankChunkedStats {
    rank_chunk: number;
    timed_stats: CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer[];
}
export interface CMsgGCItemEditorReservationsRequest {
}
export interface CMsgGCItemEditorReservation {
    def_index: number;
    name: string;
}
export interface CMsgGCItemEditorReservationsResponse {
    reservations: CMsgGCItemEditorReservation[];
}
export interface CMsgGCItemEditorReserveItemDef {
    def_index: number;
    username: string;
}
export interface CMsgGCItemEditorReserveItemDefResponse {
    def_index: number;
    username: string;
    result: number;
}
export interface CMsgGCItemEditorReleaseReservation {
    def_index: number;
    username: string;
}
export interface CMsgGCItemEditorReleaseReservationResponse {
    def_index: number;
    released: boolean;
}
export interface CMsgDOTARewardTutorialPrizes {
    location_id: number;
    tracking_only: boolean;
}
export interface CMsgFlipLobbyTeams {
}
export interface CMsgGCLobbyUpdateBroadcastChannelInfo {
    channel_id: number;
    country_code: string;
    description: string;
    language_code: string;
}
export interface CMsgDOTAClaimEventActionData {
    grant_item_gift_data: CMsgDOTAClaimEventActionData_GrantItemGiftData | undefined;
}
export interface CMsgDOTAClaimEventActionData_GrantItemGiftData {
    give_to_account_id: number;
    gift_message: string;
}
export interface CMsgDOTAClaimEventAction {
    event_id: number;
    action_id: number;
    quantity: number;
    data: CMsgDOTAClaimEventActionData | undefined;
}
export interface CMsgDOTAClaimEventActionResponse {
    result: CMsgDOTAClaimEventActionResponse_ResultCode;
    reward_results: CMsgDOTAClaimEventActionResponse_GrantedRewardData[];
}
export declare enum CMsgDOTAClaimEventActionResponse_ResultCode {
    Success = 0,
    InvalidEvent = 1,
    EventNotActive = 2,
    InvalidAction = 3,
    ServerError = 4,
    InsufficientPoints = 5,
    InsufficentLevel = 6,
    AlreadyClaimed = 7,
    SDOLockFailure = 8,
    SDOLoadFailure = 9,
    EventNotOwned = 10,
    Timeout = 11,
    RequiresPlusSubscription = 12,
    InvalidItem = 13,
    AsyncRewards = 14,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTAClaimEventActionResponse_ResultCodeFromJSON(object: any): CMsgDOTAClaimEventActionResponse_ResultCode;
export declare function cMsgDOTAClaimEventActionResponse_ResultCodeToJSON(object: CMsgDOTAClaimEventActionResponse_ResultCode): string;
export interface CMsgDOTAClaimEventActionResponse_MysteryItemRewardData {
    item_def: number;
    item_category: number;
}
export interface CMsgDOTAClaimEventActionResponse_LootListRewardData {
    item_def: number[];
}
export interface CMsgDOTAClaimEventActionResponse_ActionListRewardData {
    action_id: number;
    result_reward_data: string;
}
export interface CMsgDOTAClaimEventActionResponse_GrantedRewardData {
    grant_index: number;
    score_index: number;
    reward_index: number;
    reward_data: string;
}
export interface CMsgClientToGCClaimEventActionUsingItem {
    event_id: number;
    action_id: number;
    item_id: string;
    quantity: number;
}
export interface CMsgClientToGCClaimEventActionUsingItemResponse {
    action_results: CMsgDOTAClaimEventActionResponse | undefined;
}
export interface CMsgGCToClientClaimEventActionUsingItemCompleted {
    item_id: string;
    action_results: CMsgDOTAClaimEventActionResponse | undefined;
}
export interface CMsgDOTAGetEventPoints {
    event_id: number;
    account_id: number;
}
export interface CMsgDOTAGetEventPointsResponse {
    total_points: number;
    total_premium_points: number;
    event_id: number;
    points: number;
    premium_points: number;
    completed_actions: CMsgDOTAGetEventPointsResponse_Action[];
    account_id: number;
    owned: boolean;
    audit_action: number;
    active_season_id: number;
}
export interface CMsgDOTAGetEventPointsResponse_Action {
    action_id: number;
    times_completed: number;
}
export interface CMsgDOTAGetPeriodicResource {
    account_id: number;
    periodic_resource_id: number;
    timestamp: number;
}
export interface CMsgDOTAGetPeriodicResourceResponse {
    periodic_resource_max: number;
    periodic_resource_used: number;
}
export interface CMsgDOTAPeriodicResourceUpdated {
    periodic_resource_key: CMsgDOTAGetPeriodicResource | undefined;
    periodic_resource_value: CMsgDOTAGetPeriodicResourceResponse | undefined;
}
export interface CMsgDOTACompendiumSelection {
    selection_index: number;
    selection: number;
    leagueid: number;
}
export interface CMsgDOTACompendiumSelectionResponse {
    eresult: number;
}
export interface CMsgDOTACompendiumData {
    selections: CMsgDOTACompendiumSelection[];
}
export interface CMsgDOTACompendiumDataRequest {
    account_id: number;
    leagueid: number;
}
export interface CMsgDOTACompendiumDataResponse {
    account_id: number;
    leagueid: number;
    result: number;
    compendium_data: CMsgDOTACompendiumData | undefined;
}
export interface CMsgDOTAGetPlayerMatchHistory {
    account_id: number;
    start_at_match_id: string;
    matches_requested: number;
    hero_id: number;
    request_id: number;
    include_practice_matches: boolean;
    include_custom_games: boolean;
    include_event_games: boolean;
}
export interface CMsgDOTAGetPlayerMatchHistoryResponse {
    matches: CMsgDOTAGetPlayerMatchHistoryResponse_Match[];
    request_id: number;
}
export interface CMsgDOTAGetPlayerMatchHistoryResponse_Match {
    match_id: string;
    start_time: number;
    hero_id: number;
    winner: boolean;
    game_mode: number;
    rank_change: number;
    previous_rank: number;
    lobby_type: number;
    solo_rank: boolean;
    abandon: boolean;
    duration: number;
    engine: number;
    active_plus_subscription: boolean;
    seasonal_rank: boolean;
    tourney_id: number;
    tourney_round: number;
    tourney_tier: number;
    tourney_division: number;
    team_id: number;
    team_name: string;
    ugc_team_ui_logo: string;
}
export interface CMsgGCNotificationsRequest {
}
export interface CMsgGCNotifications_Notification {
    id: string;
    type: number;
    timestamp: number;
    reference_a: number;
    reference_b: number;
    reference_c: number;
    message: string;
    unread: boolean;
}
export interface CMsgGCNotificationsUpdate {
    result: CMsgGCNotificationsUpdate_EResult;
    notifications: CMsgGCNotifications_Notification[];
}
export declare enum CMsgGCNotificationsUpdate_EResult {
    SUCCESS = 0,
    ERROR_UNSPECIFIED = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgGCNotificationsUpdate_EResultFromJSON(object: any): CMsgGCNotificationsUpdate_EResult;
export declare function cMsgGCNotificationsUpdate_EResultToJSON(object: CMsgGCNotificationsUpdate_EResult): string;
export interface CMsgGCNotificationsResponse {
    update: CMsgGCNotificationsUpdate | undefined;
}
export interface CMsgGCNotificationsMarkReadRequest {
}
export interface CMsgGCPlayerInfoSubmit {
    name: string;
    country_code: string;
    fantasy_role: number;
    team_id: number;
    sponsor: string;
}
export interface CMsgGCPlayerInfoSubmitResponse {
    result: CMsgGCPlayerInfoSubmitResponse_EResult;
}
export declare enum CMsgGCPlayerInfoSubmitResponse_EResult {
    SUCCESS = 0,
    ERROR_UNSPECIFIED = 1,
    ERROR_INFO_LOCKED = 2,
    ERROR_NOT_MEMBER_OF_TEAM = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgGCPlayerInfoSubmitResponse_EResultFromJSON(object: any): CMsgGCPlayerInfoSubmitResponse_EResult;
export declare function cMsgGCPlayerInfoSubmitResponse_EResultToJSON(object: CMsgGCPlayerInfoSubmitResponse_EResult): string;
export interface CMsgDOTAEmoticonAccessSDO {
    account_id: number;
    unlocked_emoticons: string;
}
export interface CMsgClientToGCEmoticonDataRequest {
}
export interface CMsgGCToClientEmoticonData {
    emoticon_access: CMsgDOTAEmoticonAccessSDO | undefined;
}
export interface CMsgGCToClientTournamentItemDrop {
    item_def: number;
    event_type: number;
}
export interface CMsgClientToGCGetAllHeroOrder {
}
export interface CMsgClientToGCGetAllHeroOrderResponse {
    hero_ids: number[];
}
export interface CMsgClientToGCGetAllHeroProgress {
    account_id: number;
}
export interface CMsgClientToGCGetAllHeroProgressResponse {
    account_id: number;
    curr_hero_id: number;
    laps_completed: number;
    curr_hero_games: number;
    curr_lap_time_started: number;
    curr_lap_games: number;
    best_lap_games: number;
    best_lap_time: number;
    lap_heroes_completed: number;
    lap_heroes_remaining: number;
    next_hero_id: number;
    prev_hero_id: number;
    prev_hero_games: number;
    prev_avg_tries: number;
    curr_avg_tries: number;
    next_avg_tries: number;
    full_lap_avg_tries: number;
    curr_lap_avg_tries: number;
    profile_name: string;
    start_hero_id: number;
}
export interface CMsgClientToGCGetTrophyList {
    account_id: number;
}
export interface CMsgClientToGCGetTrophyListResponse {
    trophies: CMsgClientToGCGetTrophyListResponse_Trophy[];
}
export interface CMsgClientToGCGetTrophyListResponse_Trophy {
    trophy_id: number;
    trophy_score: number;
    last_updated: number;
}
export interface CMsgGCToClientTrophyAwarded {
    trophy_id: number;
    trophy_score: number;
    trophy_old_score: number;
    last_updated: number;
}
export interface CMsgClientToGCGetProfileCard {
    account_id: number;
}
export interface CMsgClientToGCSetProfileCardSlots {
    slots: CMsgClientToGCSetProfileCardSlots_CardSlot[];
}
export interface CMsgClientToGCSetProfileCardSlots_CardSlot {
    slot_id: number;
    slot_type: EProfileCardSlotType;
    slot_value: string;
}
export interface CMsgClientToGCGetProfileCardStats {
}
export interface CMsgClientToGCCreateHeroStatue {
    source_item_id: string;
    hero_id: number;
    sequence_name: string;
    cycle: number;
    wearables: number[];
    inscription: string;
    styles: number[];
    reforger_item_id: string;
    tournament_drop: boolean;
}
export interface CMsgGCToClientHeroStatueCreateResult {
    resulting_item_id: string;
}
export interface CMsgClientToGCPlayerStatsRequest {
    account_id: number;
}
export interface CMsgGCToClientPlayerStatsResponse {
    account_id: number;
    player_stats: number[];
    match_count: number;
    mean_gpm: number;
    mean_xppm: number;
    mean_lasthits: number;
    rampages: number;
    triple_kills: number;
    first_blood_claimed: number;
    first_blood_given: number;
    couriers_killed: number;
    aegises_snatched: number;
    cheeses_eaten: number;
    creeps_stacked: number;
    fight_score: number;
    farm_score: number;
    support_score: number;
    push_score: number;
    versatility_score: number;
    mean_networth: number;
    mean_damage: number;
    mean_heals: number;
    rapiers_purchased: number;
}
export interface CMsgClientToGCCustomGamesFriendsPlayedRequest {
}
export interface CMsgGCToClientCustomGamesFriendsPlayedResponse {
    account_id: number;
    games: CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame[];
}
export interface CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame {
    custom_game_id: string;
    account_ids: number[];
}
export interface CMsgClientToGCSocialFeedPostCommentRequest {
    event_id: string;
    comment: string;
}
export interface CMsgGCToClientSocialFeedPostCommentResponse {
    success: boolean;
}
export interface CMsgClientToGCSocialFeedPostMessageRequest {
    message: string;
    match_id: string;
    match_timestamp: number;
}
export interface CMsgGCToClientSocialFeedPostMessageResponse {
    success: boolean;
}
export interface CMsgClientToGCFriendsPlayedCustomGameRequest {
    custom_game_id: string;
}
export interface CMsgGCToClientFriendsPlayedCustomGameResponse {
    custom_game_id: string;
    account_ids: number[];
}
export interface CMsgDOTAPartyRichPresence {
    party_id: string;
    party_state: CSODOTAParty_State;
    open: boolean;
    low_priority: boolean;
    team_id: number;
    team_name: string;
    ugc_team_ui_logo: string;
    members: CMsgDOTAPartyRichPresence_Member[];
    weekend_tourney: CMsgDOTAPartyRichPresence_WeekendTourney | undefined;
}
export interface CMsgDOTAPartyRichPresence_Member {
    steam_id: string;
    coach: boolean;
}
export interface CMsgDOTAPartyRichPresence_WeekendTourney {
    division: number;
    skill_level: number;
    round: number;
    tournament_id: number;
    state_seq_num: number;
    event: EWeekendTourneyRichPresenceEvent;
    event_round: number;
}
export interface CMsgDOTALobbyRichPresence {
    lobby_id: string;
    lobby_state: CSODOTALobby_State;
    password: boolean;
    game_mode: DOTA_GameMode;
    member_count: number;
    max_member_count: number;
    custom_game_id: string;
    name: string;
    lobby_type: number;
}
export interface CMsgDOTACustomGameListenServerStartedLoading {
    lobby_id: string;
    custom_game_id: string;
    lobby_members: number[];
    start_time: number;
}
export interface CMsgDOTACustomGameClientFinishedLoading {
    lobby_id: string;
    loading_duration: number;
    result_code: number;
    result_string: string;
    signon_states: number;
    comment: string;
}
export interface CMsgClientToGCApplyGemCombiner {
    item_id_1: string;
    item_id_2: string;
}
export interface CMsgClientToGCH264Unsupported {
}
export interface CMsgClientToGCGetQuestProgress {
    quest_ids: number[];
}
export interface CMsgClientToGCGetQuestProgressResponse {
    success: boolean;
    quests: CMsgClientToGCGetQuestProgressResponse_Quest[];
}
export interface CMsgClientToGCGetQuestProgressResponse_Challenge {
    challenge_id: number;
    time_completed: number;
    attempts: number;
    hero_id: number;
    template_id: number;
    quest_rank: number;
}
export interface CMsgClientToGCGetQuestProgressResponse_Quest {
    quest_id: number;
    completed_challenges: CMsgClientToGCGetQuestProgressResponse_Challenge[];
}
export interface CMsgGCToClientMatchSignedOut {
    match_id: string;
}
export interface CMsgGCGetHeroStatsHistory {
    hero_id: number;
}
export interface CMsgGCGetHeroStatsHistoryResponse {
    hero_id: number;
    records: CMsgDOTASDOHeroStatsHistory[];
}
export interface CMsgPlayerConductScorecardRequest {
}
export interface CMsgPlayerConductScorecard {
    account_id: number;
    match_id: string;
    seq_num: number;
    reasons: number;
    matches_in_report: number;
    matches_clean: number;
    matches_reported: number;
    matches_abandoned: number;
    reports_count: number;
    reports_parties: number;
    commend_count: number;
    date: number;
    raw_behavior_score: number;
    old_raw_behavior_score: number;
    comms_reports: number;
    comms_parties: number;
    behavior_rating: CMsgPlayerConductScorecard_EBehaviorRating;
}
export declare enum CMsgPlayerConductScorecard_EBehaviorRating {
    k_eBehaviorGood = 0,
    k_eBehaviorWarning = 1,
    k_eBehaviorBad = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgPlayerConductScorecard_EBehaviorRatingFromJSON(object: any): CMsgPlayerConductScorecard_EBehaviorRating;
export declare function cMsgPlayerConductScorecard_EBehaviorRatingToJSON(object: CMsgPlayerConductScorecard_EBehaviorRating): string;
export interface CMsgClientToGCWageringRequest {
    event_id: number;
}
export interface CMsgGCToClientWageringResponse {
    coins_remaining: number;
    total_points_won: number;
    total_points_wagered: number;
    total_points_tipped: number;
    success_rate: number;
    total_games_wagered: number;
    coins_max: number;
    rank_wagers_remaining: number;
    rank_wagers_max: number;
    prediction_tokens_remaining: number;
    prediction_tokens_max: number;
    bounties_remaining: number;
    bounties_max: number;
}
export interface CMsgGCToClientWageringUpdate {
    event_id: number;
    wagering_info: CMsgGCToClientWageringResponse | undefined;
}
export interface CMsgGCToClientArcanaVotesUpdate {
    event_id: number;
    arcana_votes: CMsgClientToGCRequestArcanaVotesRemainingResponse | undefined;
}
export interface CMsgClientToGCGetEventGoals {
    event_ids: EEvent[];
}
export interface CMsgEventGoals {
    event_goals: CMsgEventGoals_EventGoal[];
}
export interface CMsgEventGoals_EventGoal {
    event_id: EEvent;
    goal_id: number;
    value: string;
}
export interface CMsgGCToGCLeaguePredictions {
    league_id: number;
}
export interface CMsgPredictionRankings {
    predictions: CMsgPredictionRankings_Prediction[];
}
export interface CMsgPredictionRankings_PredictionLine {
    answer_id: number;
    answer_name: string;
    answer_logo: string;
    answer_value: number;
}
export interface CMsgPredictionRankings_Prediction {
    selection_id: number;
    prediction_lines: CMsgPredictionRankings_PredictionLine[];
}
export interface CMsgPredictionResults {
    results: CMsgPredictionResults_Result[];
}
export interface CMsgPredictionResults_ResultBreakdown {
    answer_selection: number;
    answer_value: number;
}
export interface CMsgPredictionResults_Result {
    selection_id: number;
    result_breakdown: CMsgPredictionResults_ResultBreakdown[];
}
export interface CMsgClientToGCHasPlayerVotedForMVP {
    match_id: string;
}
export interface CMsgClientToGCHasPlayerVotedForMVPResponse {
    result: boolean;
}
export interface CMsgClientToGCVoteForMVP {
    match_id: string;
    account_id: number;
}
export interface CMsgClientToGCVoteForMVPResponse {
    result: boolean;
}
export interface CMsgClientToGCMVPVoteTimeout {
    match_id: string;
}
export interface CMsgClientToGCMVPVoteTimeoutResponse {
    result: boolean;
}
export interface CMsgClientToGCTeammateStatsRequest {
}
export interface CMsgClientToGCTeammateStatsResponse {
    success: boolean;
    teammate_stats: CMsgClientToGCTeammateStatsResponse_TeammateStat[];
}
export interface CMsgClientToGCTeammateStatsResponse_TeammateStat {
    account_id: number;
    games: number;
    wins: number;
    most_recent_game_timestamp: number;
    most_recent_game_match_id: string;
    performance: number;
}
export interface CMsgClientToGCVoteForArcana {
    matches: CMsgArcanaVoteMatchVotes[];
}
export interface CMsgClientToGCVoteForArcanaResponse {
    result: CMsgClientToGCVoteForArcanaResponse_Result;
}
export declare enum CMsgClientToGCVoteForArcanaResponse_Result {
    SUCCEEDED = 0,
    VOTING_NOT_ENABLED_FOR_ROUND = 1,
    UNKNOWN_FAILURE = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCVoteForArcanaResponse_ResultFromJSON(object: any): CMsgClientToGCVoteForArcanaResponse_Result;
export declare function cMsgClientToGCVoteForArcanaResponse_ResultToJSON(object: CMsgClientToGCVoteForArcanaResponse_Result): string;
export interface CMsgClientToGCRequestArcanaVotesRemaining {
}
export interface CMsgClientToGCRequestArcanaVotesRemainingResponse {
    result: boolean;
    votes_remaining: number;
    votes_total: number;
    matches_previously_voted_for: CMsgArcanaVoteMatchVotes[];
}
export interface CMsgClientToGCRequestEventPointLogV2 {
    event_id: number;
}
export interface CMsgClientToGCRequestEventPointLogResponseV2 {
    result: boolean;
    event_id: EEvent;
    log_entries: CMsgClientToGCRequestEventPointLogResponseV2_LogEntry[];
}
export interface CMsgClientToGCRequestEventPointLogResponseV2_LogEntry {
    timestamp: number;
    audit_action: number;
    event_points: number;
    audit_data: string;
}
export interface CMsgClientToGCPublishUserStat {
    user_stats_event: number;
    reference_data: string;
}
export interface CMsgClientToGCRequestSlarkGameResult {
    event_id: EEvent;
    slot_chosen: number;
    week: number;
}
export interface CMsgClientToGCRequestSlarkGameResultResponse {
    points_won: number;
    aura_won: boolean;
}
export interface CMsgGCToClientQuestProgressUpdated {
    quest_id: number;
    completed_challenges: CMsgGCToClientQuestProgressUpdated_Challenge[];
}
export interface CMsgGCToClientQuestProgressUpdated_Challenge {
    challenge_id: number;
    time_completed: number;
    attempts: number;
    hero_id: number;
    template_id: number;
    quest_rank: number;
    max_quest_rank: number;
}
export interface CMsgDOTARedeemItem {
    currency_id: string;
    purchase_def: number;
}
export interface CMsgDOTARedeemItemResponse {
    response: CMsgDOTARedeemItemResponse_EResultCode;
}
export declare enum CMsgDOTARedeemItemResponse_EResultCode {
    k_Succeeded = 0,
    k_Failed = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTARedeemItemResponse_EResultCodeFromJSON(object: any): CMsgDOTARedeemItemResponse_EResultCode;
export declare function cMsgDOTARedeemItemResponse_EResultCodeToJSON(object: CMsgDOTARedeemItemResponse_EResultCode): string;
export interface CMsgClientToGCSelectCompendiumInGamePrediction {
    match_id: string;
    predictions: CMsgClientToGCSelectCompendiumInGamePrediction_Prediction[];
    league_id: number;
}
export interface CMsgClientToGCSelectCompendiumInGamePrediction_Prediction {
    prediction_id: number;
    prediction_value: number;
}
export interface CMsgClientToGCSelectCompendiumInGamePredictionResponse {
    result: CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult;
}
export declare enum CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult {
    SUCCESS = 0,
    INVALID_MATCH = 1,
    PREDICTIONS_ARE_CLOSED = 2,
    OTHER_ERROR = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultFromJSON(object: any): CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult;
export declare function cMsgClientToGCSelectCompendiumInGamePredictionResponse_EResultToJSON(object: CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult): string;
export interface CMsgClientToGCOpenPlayerCardPack {
    player_card_pack_item_id: string;
    team_id: number;
    deprecated_league_id: number;
    region: ELeagueRegion;
}
export interface CMsgClientToGCOpenPlayerCardPackResponse {
    result: CMsgClientToGCOpenPlayerCardPackResponse_Result;
    player_card_item_ids: string[];
}
export declare enum CMsgClientToGCOpenPlayerCardPackResponse_Result {
    SUCCESS = 1,
    ERROR_INTERNAL = 2,
    ERROR_FAILED_TO_FIND_PACK = 3,
    ERROR_ITEM_NOT_CARD_PACK = 4,
    ERROR_FAILED_CARD_CREATE = 5,
    ERROR_INVALID_TEAM_ID_ATTRIBUTE = 6,
    ERROR_INVALID_TEAM_ID = 7,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCOpenPlayerCardPackResponse_ResultFromJSON(object: any): CMsgClientToGCOpenPlayerCardPackResponse_Result;
export declare function cMsgClientToGCOpenPlayerCardPackResponse_ResultToJSON(object: CMsgClientToGCOpenPlayerCardPackResponse_Result): string;
export interface CMsgClientToGCRecyclePlayerCard {
    player_card_item_ids: string[];
    event_id: number;
}
export interface CMsgClientToGCRecyclePlayerCardResponse {
    result: CMsgClientToGCRecyclePlayerCardResponse_Result;
    dust_amount: number;
}
export declare enum CMsgClientToGCRecyclePlayerCardResponse_Result {
    SUCCESS = 1,
    ERROR_INTERNAL = 2,
    ERROR_FAILED_TO_FIND_PLAYER_CARD = 3,
    ERROR_ITEM_NOT_PLAYER_CARD = 4,
    ERROR_FAILED_DUST_CARD_CREATE = 5,
    ERROR_CARD_LOCKED = 6,
    ERROR_NO_CARDS_SPECIFIED = 7,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCRecyclePlayerCardResponse_ResultFromJSON(object: any): CMsgClientToGCRecyclePlayerCardResponse_Result;
export declare function cMsgClientToGCRecyclePlayerCardResponse_ResultToJSON(object: CMsgClientToGCRecyclePlayerCardResponse_Result): string;
export interface CMsgClientToGCCreatePlayerCardPack {
    card_dust_item_id: string;
    event_id: number;
    premium_pack: boolean;
}
export interface CMsgClientToGCCreatePlayerCardPackResponse {
    result: CMsgClientToGCCreatePlayerCardPackResponse_Result;
}
export declare enum CMsgClientToGCCreatePlayerCardPackResponse_Result {
    SUCCESS = 1,
    ERROR_INTERNAL = 2,
    ERROR_INSUFFICIENT_DUST = 3,
    ERROR_ITEM_NOT_DUST_ITEM = 4,
    ERROR_FAILED_CARD_PACK_CREATE = 5,
    ERROR_NO_CARD_PACK = 6,
    ERROR_NOT_AVAILABLE = 7,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCCreatePlayerCardPackResponse_ResultFromJSON(object: any): CMsgClientToGCCreatePlayerCardPackResponse_Result;
export declare function cMsgClientToGCCreatePlayerCardPackResponse_ResultToJSON(object: CMsgClientToGCCreatePlayerCardPackResponse_Result): string;
export interface CMsgClientToGCCreateTeamPlayerCardPack {
    card_dust_item_id: string;
    event_id: number;
    premium_pack: boolean;
    team_id: number;
}
export interface CMsgClientToGCCreateTeamPlayerCardPackResponse {
    result: CMsgClientToGCCreateTeamPlayerCardPackResponse_Result;
}
export declare enum CMsgClientToGCCreateTeamPlayerCardPackResponse_Result {
    SUCCESS = 1,
    ERROR_INTERNAL = 2,
    ERROR_INSUFFICIENT_DUST = 3,
    ERROR_ITEM_NOT_DUST_ITEM = 4,
    ERROR_FAILED_CARD_PACK_CREATE = 5,
    ERROR_NO_CARD_PACK = 6,
    ERROR_NOT_AVAILABLE = 7,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultFromJSON(object: any): CMsgClientToGCCreateTeamPlayerCardPackResponse_Result;
export declare function cMsgClientToGCCreateTeamPlayerCardPackResponse_ResultToJSON(object: CMsgClientToGCCreateTeamPlayerCardPackResponse_Result): string;
export interface CMsgGCToClientBattlePassRollup_International2016 {
    battle_pass_level: number;
    questlines: CMsgGCToClientBattlePassRollup_International2016_Questlines[];
    wagering: CMsgGCToClientBattlePassRollup_International2016_Wagering | undefined;
    achievements: CMsgGCToClientBattlePassRollup_International2016_Achievements | undefined;
    battle_cup: CMsgGCToClientBattlePassRollup_International2016_BattleCup | undefined;
    predictions: CMsgGCToClientBattlePassRollup_International2016_Predictions | undefined;
    bracket: CMsgGCToClientBattlePassRollup_International2016_Bracket | undefined;
    player_cards: CMsgGCToClientBattlePassRollup_International2016_PlayerCard[];
    fantasy_challenge: CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge | undefined;
}
export interface CMsgGCToClientBattlePassRollup_International2016_Questlines {
    name: string;
    onestar: number;
    twostar: number;
    threestar: number;
    total: number;
}
export interface CMsgGCToClientBattlePassRollup_International2016_Wagering {
    total_wagered: number;
    total_won: number;
    average_won: number;
    success_rate: number;
    total_tips: number;
}
export interface CMsgGCToClientBattlePassRollup_International2016_Achievements {
    completed: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_International2016_BattleCup {
    wins: number;
    score: number;
}
export interface CMsgGCToClientBattlePassRollup_International2016_Predictions {
    correct: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_International2016_Bracket {
    correct: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_International2016_PlayerCard {
    account_id: number;
    quality: number;
}
export interface CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge {
    total_score: number;
    percentile: number;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016 {
    battle_pass_level: number;
    questlines: CMsgGCToClientBattlePassRollup_Fall2016_Questlines[];
    wagering: CMsgGCToClientBattlePassRollup_Fall2016_Wagering | undefined;
    achievements: CMsgGCToClientBattlePassRollup_Fall2016_Achievements | undefined;
    battle_cup: CMsgGCToClientBattlePassRollup_Fall2016_BattleCup | undefined;
    predictions: CMsgGCToClientBattlePassRollup_Fall2016_Predictions | undefined;
    bracket: CMsgGCToClientBattlePassRollup_Fall2016_Bracket | undefined;
    player_cards: CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard[];
    fantasy_challenge: CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge | undefined;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016_Questlines {
    name: string;
    onestar: number;
    twostar: number;
    threestar: number;
    total: number;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016_Wagering {
    total_wagered: number;
    total_won: number;
    average_won: number;
    success_rate: number;
    total_tips: number;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016_Achievements {
    completed: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016_BattleCup {
    wins: number;
    score: number;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016_Predictions {
    correct: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016_Bracket {
    correct: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard {
    account_id: number;
    quality: number;
}
export interface CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge {
    total_score: number;
    percentile: number;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017 {
    battle_pass_level: number;
    questlines: CMsgGCToClientBattlePassRollup_Winter2017_Questlines[];
    wagering: CMsgGCToClientBattlePassRollup_Winter2017_Wagering | undefined;
    achievements: CMsgGCToClientBattlePassRollup_Winter2017_Achievements | undefined;
    battle_cup: CMsgGCToClientBattlePassRollup_Winter2017_BattleCup | undefined;
    predictions: CMsgGCToClientBattlePassRollup_Winter2017_Predictions | undefined;
    bracket: CMsgGCToClientBattlePassRollup_Winter2017_Bracket | undefined;
    player_cards: CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard[];
    fantasy_challenge: CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge | undefined;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017_Questlines {
    name: string;
    onestar: number;
    twostar: number;
    threestar: number;
    total: number;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017_Wagering {
    total_wagered: number;
    total_won: number;
    average_won: number;
    success_rate: number;
    total_tips: number;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017_Achievements {
    completed: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017_BattleCup {
    wins: number;
    score: number;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017_Predictions {
    correct: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017_Bracket {
    correct: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard {
    account_id: number;
    quality: number;
}
export interface CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge {
    total_score: number;
    percentile: number;
}
export interface CMsgGCToClientBattlePassRollup_TI7 {
    battle_pass_level: number;
    questlines: CMsgGCToClientBattlePassRollup_TI7_Questlines[];
    wagering: CMsgGCToClientBattlePassRollup_TI7_Wagering | undefined;
    achievements: CMsgGCToClientBattlePassRollup_TI7_Achievements | undefined;
    battle_cup: CMsgGCToClientBattlePassRollup_TI7_BattleCup | undefined;
    predictions: CMsgGCToClientBattlePassRollup_TI7_Predictions | undefined;
    bracket: CMsgGCToClientBattlePassRollup_TI7_Bracket | undefined;
    player_cards: CMsgGCToClientBattlePassRollup_TI7_PlayerCard[];
    fantasy_challenge: CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge | undefined;
}
export interface CMsgGCToClientBattlePassRollup_TI7_Questlines {
    name: string;
    onestar: number;
    twostar: number;
    threestar: number;
    total: number;
}
export interface CMsgGCToClientBattlePassRollup_TI7_Wagering {
    total_wagered: number;
    total_won: number;
    average_won: number;
    success_rate: number;
    total_tips: number;
}
export interface CMsgGCToClientBattlePassRollup_TI7_Achievements {
    completed: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_TI7_BattleCup {
    wins: number;
    score: number;
}
export interface CMsgGCToClientBattlePassRollup_TI7_Predictions {
    correct: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_TI7_Bracket {
    correct: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_TI7_PlayerCard {
    account_id: number;
    quality: number;
}
export interface CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge {
    total_score: number;
    percentile: number;
}
export interface CMsgGCToClientBattlePassRollup_TI8 {
    battle_pass_level: number;
    cavern_crawl: CMsgGCToClientBattlePassRollup_TI8_CavernCrawl | undefined;
    wagering: CMsgGCToClientBattlePassRollup_TI8_Wagering | undefined;
    achievements: CMsgGCToClientBattlePassRollup_TI8_Achievements | undefined;
    predictions: CMsgGCToClientBattlePassRollup_TI8_Predictions | undefined;
    bracket: CMsgGCToClientBattlePassRollup_TI8_Bracket | undefined;
    player_cards: CMsgGCToClientBattlePassRollup_TI8_PlayerCard[];
    fantasy_challenge: CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge | undefined;
}
export interface CMsgGCToClientBattlePassRollup_TI8_CavernCrawl {
    rooms_cleared: number;
    carry_completed: boolean;
    support_completed: boolean;
    utility_completed: boolean;
}
export interface CMsgGCToClientBattlePassRollup_TI8_Wagering {
    total_wagered: number;
    total_won: number;
    average_won: number;
    success_rate: number;
    total_tips: number;
}
export interface CMsgGCToClientBattlePassRollup_TI8_Achievements {
    completed: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_TI8_Predictions {
    correct: number;
    total: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_TI8_Bracket {
    correct: number;
    points: number;
}
export interface CMsgGCToClientBattlePassRollup_TI8_PlayerCard {
    account_id: number;
    quality: number;
}
export interface CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge {
    total_score: number;
    percentile: number;
}
export interface CMsgGCToClientBattlePassRollup_TI9 {
    battle_pass_level: number;
}
export interface CMsgGCToClientBattlePassRollup_TI10 {
    battle_pass_level: number;
}
export interface CMsgGCToClientBattlePassRollupRequest {
    event_id: number;
    account_id: number;
}
export interface CMsgGCToClientBattlePassRollupResponse {
    event_ti6: CMsgGCToClientBattlePassRollup_International2016 | undefined;
    event_fall2016: CMsgGCToClientBattlePassRollup_Fall2016 | undefined;
    event_winter2017: CMsgGCToClientBattlePassRollup_Winter2017 | undefined;
    event_ti7: CMsgGCToClientBattlePassRollup_TI7 | undefined;
    event_ti8: CMsgGCToClientBattlePassRollup_TI8 | undefined;
    event_ti9: CMsgGCToClientBattlePassRollup_TI9 | undefined;
    event_ti10: CMsgGCToClientBattlePassRollup_TI10 | undefined;
}
export interface CMsgGCToClientBattlePassRollupListRequest {
    account_id: number;
}
export interface CMsgGCToClientBattlePassRollupListResponse {
    event_info: CMsgGCToClientBattlePassRollupListResponse_EventInfo[];
}
export interface CMsgGCToClientBattlePassRollupListResponse_EventInfo {
    event_id: number;
    level: number;
}
export interface CMsgClientToGCTransferSeasonalMMRRequest {
    is_party: boolean;
}
export interface CMsgClientToGCTransferSeasonalMMRResponse {
    success: boolean;
}
export interface CMsgGCToClientPlaytestStatus {
    active: boolean;
}
export interface CMsgClientToGCJoinPlaytest {
    client_version: number;
}
export interface CMsgClientToGCJoinPlaytestResponse {
    error: string;
}
export interface CMsgDOTASetFavoriteTeam {
    team_id: number;
    event_id: number;
}
export interface CMsgDOTATriviaCurrentQuestions {
    questions: CMsgDOTATriviaQuestion[];
    trivia_enabled: boolean;
}
export interface CMsgDOTASubmitTriviaQuestionAnswer {
    question_id: number;
    answer_index: number;
}
export interface CMsgDOTASubmitTriviaQuestionAnswerResponse {
    result: EDOTATriviaAnswerResult;
}
export interface CMsgDOTAStartTriviaSession {
}
export interface CMsgDOTAStartTriviaSessionResponse {
    trivia_enabled: boolean;
    current_timestamp: number;
}
export interface CMsgDOTAAnchorPhoneNumberRequest {
}
export interface CMsgDOTAAnchorPhoneNumberResponse {
    result: CMsgDOTAAnchorPhoneNumberResponse_Result;
}
export declare enum CMsgDOTAAnchorPhoneNumberResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    ERROR_NO_STEAM_PHONE = 2,
    ERROR_ALREADY_IN_USE = 3,
    ERROR_COOLDOWN_ACTIVE = 4,
    ERROR_GAC_ISSUE = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTAAnchorPhoneNumberResponse_ResultFromJSON(object: any): CMsgDOTAAnchorPhoneNumberResponse_Result;
export declare function cMsgDOTAAnchorPhoneNumberResponse_ResultToJSON(object: CMsgDOTAAnchorPhoneNumberResponse_Result): string;
export interface CMsgDOTAUnanchorPhoneNumberRequest {
}
export interface CMsgDOTAUnanchorPhoneNumberResponse {
    result: CMsgDOTAUnanchorPhoneNumberResponse_Result;
}
export declare enum CMsgDOTAUnanchorPhoneNumberResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTAUnanchorPhoneNumberResponse_ResultFromJSON(object: any): CMsgDOTAUnanchorPhoneNumberResponse_Result;
export declare function cMsgDOTAUnanchorPhoneNumberResponse_ResultToJSON(object: CMsgDOTAUnanchorPhoneNumberResponse_Result): string;
export interface CMsgGCToClientCommendNotification {
    commender_account_id: number;
    commender_name: string;
    flags: number;
}
export interface CMsgDOTAClientToGCQuickStatsRequest {
    player_account_id: number;
    hero_id: number;
    item_id: number;
    league_id: number;
}
export interface CMsgDOTAClientToGCQuickStatsResponse {
    original_request: CMsgDOTAClientToGCQuickStatsRequest | undefined;
    hero_stats: CMsgDOTAClientToGCQuickStatsResponse_SimpleStats | undefined;
    item_stats: CMsgDOTAClientToGCQuickStatsResponse_SimpleStats | undefined;
    item_hero_stats: CMsgDOTAClientToGCQuickStatsResponse_SimpleStats | undefined;
    item_player_stats: CMsgDOTAClientToGCQuickStatsResponse_SimpleStats | undefined;
    hero_player_stats: CMsgDOTAClientToGCQuickStatsResponse_SimpleStats | undefined;
    full_set_stats: CMsgDOTAClientToGCQuickStatsResponse_SimpleStats | undefined;
}
export interface CMsgDOTAClientToGCQuickStatsResponse_SimpleStats {
    win_percent: number;
    pick_percent: number;
    win_count: number;
    pick_count: number;
}
export interface CMsgDOTASelectionPriorityChoiceRequest {
    choice: DOTASelectionPriorityChoice;
}
export interface CMsgDOTASelectionPriorityChoiceResponse {
    result: CMsgDOTASelectionPriorityChoiceResponse_Result;
}
export declare enum CMsgDOTASelectionPriorityChoiceResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTASelectionPriorityChoiceResponse_ResultFromJSON(object: any): CMsgDOTASelectionPriorityChoiceResponse_Result;
export declare function cMsgDOTASelectionPriorityChoiceResponse_ResultToJSON(object: CMsgDOTASelectionPriorityChoiceResponse_Result): string;
export interface CMsgDOTAGameAutographReward {
    badge_id: string;
}
export interface CMsgDOTAGameAutographRewardResponse {
    result: CMsgDOTAGameAutographRewardResponse_Result;
}
export declare enum CMsgDOTAGameAutographRewardResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTAGameAutographRewardResponse_ResultFromJSON(object: any): CMsgDOTAGameAutographRewardResponse_Result;
export declare function cMsgDOTAGameAutographRewardResponse_ResultToJSON(object: CMsgDOTAGameAutographRewardResponse_Result): string;
export interface CMsgDOTADestroyLobbyRequest {
}
export interface CMsgDOTADestroyLobbyResponse {
    result: CMsgDOTADestroyLobbyResponse_Result;
}
export declare enum CMsgDOTADestroyLobbyResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgDOTADestroyLobbyResponse_ResultFromJSON(object: any): CMsgDOTADestroyLobbyResponse_Result;
export declare function cMsgDOTADestroyLobbyResponse_ResultToJSON(object: CMsgDOTADestroyLobbyResponse_Result): string;
export interface CMsgDOTAGetRecentPlayTimeFriendsRequest {
}
export interface CMsgDOTAGetRecentPlayTimeFriendsResponse {
    account_ids: number[];
}
export interface CMsgPurchaseItemWithEventPoints {
    item_def: number;
    quantity: number;
    event_id: EEvent;
    use_premium_points: boolean;
}
export interface CMsgPurchaseItemWithEventPointsResponse {
    result: CMsgPurchaseItemWithEventPointsResponse_Result;
}
export declare enum CMsgPurchaseItemWithEventPointsResponse_Result {
    SUCCESS = 0,
    UNKNOWN_EVENT = 1,
    UNKNOWN_ITEM = 2,
    BAD_QUANTITY = 3,
    NOT_PURCHASEABLE = 4,
    SDO_LOAD_FAILED = 5,
    NOT_ENOUGH_POINTS = 6,
    SQL_ERROR = 7,
    FAILED_TO_SEND = 8,
    SERVER_ERROR = 9,
    NOT_ALLOWED = 10,
    CANCELLED = 11,
    CLIENT_ERROR = 12,
    SUBSCRIPTION_REQUIRED = 13,
    UNRECOGNIZED = -1
}
export declare function cMsgPurchaseItemWithEventPointsResponse_ResultFromJSON(object: any): CMsgPurchaseItemWithEventPointsResponse_Result;
export declare function cMsgPurchaseItemWithEventPointsResponse_ResultToJSON(object: CMsgPurchaseItemWithEventPointsResponse_Result): string;
export interface CMsgPurchaseHeroRandomRelic {
    hero_id: number;
    relic_rarity: EHeroRelicRarity;
}
export interface CMsgPurchaseHeroRandomRelicResponse {
    result: EPurchaseHeroRelicResult;
    kill_eater_type: number;
}
export interface CMsgClientToGCRequestPlusWeeklyChallengeResult {
    event_id: EEvent;
    week: number;
}
export interface CMsgClientToGCRequestPlusWeeklyChallengeResultResponse {
}
export interface CMsgProfileRequest {
    account_id: number;
}
export interface CMsgProfileResponse {
    background_item: CSOEconItem | undefined;
    featured_heroes: CMsgProfileResponse_FeaturedHero[];
    recent_matches: CMsgProfileResponse_MatchInfo[];
    successful_heroes: CMsgSuccessfulHero[];
    recent_match_details: CMsgRecentMatchInfo | undefined;
    result: CMsgProfileResponse_EResponse;
    stickerbook_page: CMsgStickerbookPage | undefined;
}
export declare enum CMsgProfileResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTooBusy = 2,
    k_eDisabled = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgProfileResponse_EResponseFromJSON(object: any): CMsgProfileResponse_EResponse;
export declare function cMsgProfileResponse_EResponseToJSON(object: CMsgProfileResponse_EResponse): string;
export interface CMsgProfileResponse_FeaturedHero {
    hero_id: number;
    equipped_econ_items: CSOEconItem[];
    manually_set: boolean;
    plus_hero_xp: number;
    plus_hero_relics_item: CSOEconItem | undefined;
}
export interface CMsgProfileResponse_MatchInfo {
    match_id: string;
    match_timestamp: number;
    performance_rating: number;
    hero_id: number;
    won_match: boolean;
}
export interface CMsgProfileUpdate {
    background_item_id: string;
    featured_hero_ids: number[];
}
export interface CMsgProfileUpdateResponse {
    result: CMsgProfileUpdateResponse_Result;
}
export declare enum CMsgProfileUpdateResponse_Result {
    SUCCESS = 0,
    FAILURE = 1,
    FAILURE_BAD_HERO1 = 2,
    FAILURE_BAD_HERO2 = 3,
    FAILURE_BAD_HERO3 = 4,
    UNRECOGNIZED = -1
}
export declare function cMsgProfileUpdateResponse_ResultFromJSON(object: any): CMsgProfileUpdateResponse_Result;
export declare function cMsgProfileUpdateResponse_ResultToJSON(object: CMsgProfileUpdateResponse_Result): string;
export interface CMsgTalentWinRates {
    last_run: number;
    ability_id: number;
    game_count: number;
    win_count: number;
}
export interface CMsgGlobalHeroAverages {
    last_run: number;
    avg_gold_per_min: number;
    avg_xp_per_min: number;
    avg_kills: number;
    avg_deaths: number;
    avg_assists: number;
    avg_last_hits: number;
    avg_denies: number;
    avg_net_worth: number;
}
export interface CMsgHeroGlobalDataRequest {
    hero_id: number;
}
export interface CMsgHeroGlobalDataResponse {
    hero_id: number;
    hero_data_per_chunk: CMsgHeroGlobalDataResponse_HeroDataPerRankChunk[];
}
export interface CMsgHeroGlobalDataResponse_GraphData {
    day: number;
    win_percent: number;
    pick_percent: number;
    ban_percent: number;
}
export interface CMsgHeroGlobalDataResponse_WeekData {
    week: number;
    win_percent: number;
    pick_percent: number;
    ban_percent: number;
}
export interface CMsgHeroGlobalDataResponse_HeroDataPerRankChunk {
    rank_chunk: number;
    talent_win_rates: CMsgTalentWinRates[];
    hero_averages: CMsgGlobalHeroAverages | undefined;
    graph_data: CMsgHeroGlobalDataResponse_GraphData[];
    week_data: CMsgHeroGlobalDataResponse_WeekData[];
}
export interface CMsgHeroGlobalDataAllHeroes {
    heroes: CMsgHeroGlobalDataResponse[];
}
export interface CMsgHeroGlobalDataHeroesAlliesAndEnemies {
    ranked_hero_data: CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData[];
}
export interface CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData {
    hero_id: number;
    win_rate: number;
    first_other_hero_id: number;
    ally_win_rate: number[];
    enemy_win_rate: number[];
}
export interface CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData {
    rank: number;
    hero_data: CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData[];
}
export interface CMsgPrivateMetadataKeyRequest {
    match_id: string;
}
export interface CMsgPrivateMetadataKeyResponse {
    private_key: number;
}
export interface CMsgActivatePlusFreeTrialResponse {
    result: CMsgActivatePlusFreeTrialResponse_Result;
}
export declare enum CMsgActivatePlusFreeTrialResponse_Result {
    SUCCESS = 0,
    ERROR_GENERIC = 1,
    ERROR_ALREADY_IN_FREE_TRIAL = 2,
    ERROR_ALREADY_USED_FREE_TRIAL = 3,
    ERROR_OFFER_NOT_VALID = 4,
    UNRECOGNIZED = -1
}
export declare function cMsgActivatePlusFreeTrialResponse_ResultFromJSON(object: any): CMsgActivatePlusFreeTrialResponse_Result;
export declare function cMsgActivatePlusFreeTrialResponse_ResultToJSON(object: CMsgActivatePlusFreeTrialResponse_Result): string;
export interface CMsgGCToClientCavernCrawlMapPathCompleted {
    event_id: number;
    hero_id_completed: number;
    completed_paths: CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo[];
    map_variant: number;
}
export interface CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo {
    path_id_completed: number;
    received_ultra_rare_reward: boolean;
    half_completed: boolean;
}
export interface CMsgGCToClientCavernCrawlMapUpdated {
    event_id: number;
}
export interface CMsgClientToGCCavernCrawlClaimRoom {
    event_id: number;
    room_id: number;
    map_variant: number;
}
export interface CMsgClientToGCCavernCrawlClaimRoomResponse {
    result: CMsgClientToGCCavernCrawlClaimRoomResponse_Result;
}
export declare enum CMsgClientToGCCavernCrawlClaimRoomResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    RECEIVED_ULTRA_RARE_REWARD = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCCavernCrawlClaimRoomResponse_ResultFromJSON(object: any): CMsgClientToGCCavernCrawlClaimRoomResponse_Result;
export declare function cMsgClientToGCCavernCrawlClaimRoomResponse_ResultToJSON(object: CMsgClientToGCCavernCrawlClaimRoomResponse_Result): string;
export interface CMsgClientToGCCavernCrawlUseItemOnRoom {
    event_id: number;
    room_id: number;
    item_type: number;
    map_variant: number;
}
export interface CMsgClientToGCCavernCrawlUseItemOnRoomResponse {
    result: CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result;
}
export declare enum CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    RECEIVED_ULTRA_RARE_REWARD = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultFromJSON(object: any): CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result;
export declare function cMsgClientToGCCavernCrawlUseItemOnRoomResponse_ResultToJSON(object: CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result): string;
export interface CMsgClientToGCCavernCrawlUseItemOnPath {
    event_id: number;
    path_id: number;
    item_type: number;
    map_variant: number;
}
export interface CMsgClientToGCCavernCrawlUseItemOnPathResponse {
    result: CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result;
}
export declare enum CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    RECEIVED_ULTRA_RARE_REWARD = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultFromJSON(object: any): CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result;
export declare function cMsgClientToGCCavernCrawlUseItemOnPathResponse_ResultToJSON(object: CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result): string;
export interface CMsgClientToGCCavernCrawlRequestMapState {
    event_id: number;
}
export interface CMsgClientToGCCavernCrawlRequestMapStateResponse {
    result: CMsgClientToGCCavernCrawlRequestMapStateResponse_Result;
    available_map_variants_mask: number;
    inventory_item: CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem[];
    map_variants: CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant[];
}
export declare enum CMsgClientToGCCavernCrawlRequestMapStateResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    EVENT_NOT_OWNED = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultFromJSON(object: any): CMsgClientToGCCavernCrawlRequestMapStateResponse_Result;
export declare function cMsgClientToGCCavernCrawlRequestMapStateResponse_ResultToJSON(object: CMsgClientToGCCavernCrawlRequestMapStateResponse_Result): string;
export interface CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge {
    path_id_1: number;
    path_id_2: number;
}
export interface CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem {
    item_type: number;
    count: number;
}
export interface CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap {
    map_room_id: number;
    revealed_room_id: number;
}
export interface CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant {
    map_variant: number;
    claimed_rooms_1: string;
    claimed_rooms_2: string;
    revealed_rooms_1: string;
    revealed_rooms_2: string;
    completed_paths_1: string;
    completed_paths_2: string;
    completed_paths_3: string;
    completed_paths_4: string;
    half_completed_paths_1: string;
    half_completed_paths_2: string;
    half_completed_paths_3: string;
    half_completed_paths_4: string;
    swapped_challenge: CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge[];
    ultra_rare_reward_room_number: number;
    treasure_map: CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap[];
}
export interface CMsgClientToGCCavernCrawlGetClaimedRoomCount {
    event_id: number;
}
export interface CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse {
    result: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result;
    map_variants: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant[];
    available_map_variants_mask: number;
}
export declare enum CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result {
    SUCCESS = 0,
    ERROR_UNKNOWN = 1,
    EVENT_NOT_OWNED = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultFromJSON(object: any): CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result;
export declare function cMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_ResultToJSON(object: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result): string;
export interface CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant {
    map_variant: number;
    count: number;
}
export interface CMsgDOTAMutationList {
    mutations: CMsgDOTAMutationList_Mutation[];
}
export interface CMsgDOTAMutationList_Mutation {
    id: number;
    name: string;
    description: string;
}
export interface CMsgEventTipsSummaryRequest {
    event_id: EEvent;
    account_id: number;
}
export interface CMsgEventTipsSummaryResponse {
    result: boolean;
    tips_received: CMsgEventTipsSummaryResponse_Tipper[];
}
export interface CMsgEventTipsSummaryResponse_Tipper {
    tipper_account_id: number;
    tip_count: number;
}
export interface CMsgSocialFeedRequest {
    account_id: number;
    self_only: boolean;
}
export interface CMsgSocialFeedResponse {
    result: CMsgSocialFeedResponse_Result;
    feed_events: CMsgSocialFeedResponse_FeedEvent[];
}
export declare enum CMsgSocialFeedResponse_Result {
    SUCCESS = 0,
    FAILED_TO_LOAD_FRIENDS = 1,
    FAILED_TO_LOAD_FEED_DATA = 2,
    FAILED_TO_LOAD_FEED_ENTRY = 3,
    FAILED_TO_LOAD_COMMENTS = 4,
    FAILED_TOO_MANY_REQUESTS = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgSocialFeedResponse_ResultFromJSON(object: any): CMsgSocialFeedResponse_Result;
export declare function cMsgSocialFeedResponse_ResultToJSON(object: CMsgSocialFeedResponse_Result): string;
export interface CMsgSocialFeedResponse_FeedEvent {
    feed_event_id: string;
    account_id: number;
    timestamp: number;
    comment_count: number;
    event_type: number;
    event_sub_type: number;
    param_big_int_1: string;
    param_int_1: number;
    param_int_2: number;
    param_int_3: number;
    param_string: string;
}
export interface CMsgSocialFeedCommentsRequest {
    feed_event_id: string;
}
export interface CMsgSocialFeedCommentsResponse {
    result: CMsgSocialFeedCommentsResponse_Result;
    feed_comments: CMsgSocialFeedCommentsResponse_FeedComment[];
}
export declare enum CMsgSocialFeedCommentsResponse_Result {
    SUCCESS = 0,
    FAILED_TOO_MANY_REQUESTS = 1,
    FAILED_TO_LOAD_COMMENTS = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgSocialFeedCommentsResponse_ResultFromJSON(object: any): CMsgSocialFeedCommentsResponse_Result;
export declare function cMsgSocialFeedCommentsResponse_ResultToJSON(object: CMsgSocialFeedCommentsResponse_Result): string;
export interface CMsgSocialFeedCommentsResponse_FeedComment {
    commenter_account_id: number;
    timestamp: number;
    comment_text: string;
}
export interface CMsgClientToGCPlayerCardSpecificPurchaseRequest {
    player_account_id: number;
    event_id: number;
    card_dust_item_id: string;
}
export interface CMsgClientToGCPlayerCardSpecificPurchaseResponse {
    result: CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result;
    item_id: string;
}
export declare enum CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result {
    SUCCESS = 1,
    ERROR_INTERNAL = 2,
    ERROR_INSUFFICIENT_DUST = 3,
    ERROR_ITEM_NOT_DUST_ITEM = 4,
    ERROR_FAILED_CARD_PACK_CREATE = 5,
    ERROR_NOT_AVAILABLE = 6,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultFromJSON(object: any): CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result;
export declare function cMsgClientToGCPlayerCardSpecificPurchaseResponse_ResultToJSON(object: CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result): string;
export interface CMsgClientToGCRequestContestVotes {
    contest_id: number;
}
export interface CMsgClientToGCRequestContestVotesResponse {
    result: CMsgClientToGCRequestContestVotesResponse_EResponse;
    votes: CMsgClientToGCRequestContestVotesResponse_ItemVote[];
}
export declare enum CMsgClientToGCRequestContestVotesResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTooBusy = 2,
    k_eDisabled = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCRequestContestVotesResponse_EResponseFromJSON(object: any): CMsgClientToGCRequestContestVotesResponse_EResponse;
export declare function cMsgClientToGCRequestContestVotesResponse_EResponseToJSON(object: CMsgClientToGCRequestContestVotesResponse_EResponse): string;
export interface CMsgClientToGCRequestContestVotesResponse_ItemVote {
    contest_item_id: string;
    vote: number;
}
export interface CMsgClientToGCRecordContestVote {
    contest_id: number;
    contest_item_id: string;
    vote: number;
}
export interface CMsgGCToClientRecordContestVoteResponse {
    eresult: CMsgGCToClientRecordContestVoteResponse_EResult;
}
export declare enum CMsgGCToClientRecordContestVoteResponse_EResult {
    SUCCESS = 0,
    FAILED_EVENT_NOT_OWNED = 1,
    FAILED_SQL_INSERT_FAILED = 2,
    FAILED_INVALID_CONTEST = 3,
    FAILED_CONTEST_NOT_ACTIVE = 4,
    FAILED_TIMEOUT = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientRecordContestVoteResponse_EResultFromJSON(object: any): CMsgGCToClientRecordContestVoteResponse_EResult;
export declare function cMsgGCToClientRecordContestVoteResponse_EResultToJSON(object: CMsgGCToClientRecordContestVoteResponse_EResult): string;
export interface CMsgDevGrantEventPoints {
    event_id: EEvent;
    event_points: number;
    premium_points: number;
}
export interface CMsgDevGrantEventPointsResponse {
    result: EDevEventRequestResult;
}
export interface CMsgDevGrantEventAction {
    event_id: EEvent;
    action_id: number;
    action_score: number;
}
export interface CMsgDevGrantEventActionResponse {
    result: EDevEventRequestResult;
}
export interface CMsgDevDeleteEventActions {
    event_id: EEvent;
    start_action_id: number;
    end_action_id: number;
    remove_audit: boolean;
}
export interface CMsgDevDeleteEventActionsResponse {
    result: EDevEventRequestResult;
}
export interface CMsgDevResetEventState {
    event_id: EEvent;
    remove_audit: boolean;
}
export interface CMsgDevResetEventStateResponse {
    result: EDevEventRequestResult;
}
export interface CMsgConsumeEventSupportGrantItem {
    item_id: string;
}
export interface CMsgConsumeEventSupportGrantItemResponse {
    result: ESupportEventRequestResult;
}
export interface CMsgClientToGCGetFilteredPlayers {
}
export interface CMsgGCToClientGetFilteredPlayersResponse {
    result: CMsgGCToClientGetFilteredPlayersResponse_Result;
    filtered_players: CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry[];
    base_slots: number;
    additional_slots: number;
    next_slot_cost: number;
}
export declare enum CMsgGCToClientGetFilteredPlayersResponse_Result {
    SUCCESS = 0,
    FAILURE = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientGetFilteredPlayersResponse_ResultFromJSON(object: any): CMsgGCToClientGetFilteredPlayersResponse_Result;
export declare function cMsgGCToClientGetFilteredPlayersResponse_ResultToJSON(object: CMsgGCToClientGetFilteredPlayersResponse_Result): string;
export interface CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry {
    account_id: number;
    time_added: number;
    time_expires: number;
    note: string;
}
export interface CMsgClientToGCRemoveFilteredPlayer {
    account_id_to_remove: number;
}
export interface CMsgGCToClientRemoveFilteredPlayerResponse {
    result: CMsgGCToClientRemoveFilteredPlayerResponse_Result;
}
export declare enum CMsgGCToClientRemoveFilteredPlayerResponse_Result {
    SUCCESS = 0,
    FAILURE = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientRemoveFilteredPlayerResponse_ResultFromJSON(object: any): CMsgGCToClientRemoveFilteredPlayerResponse_Result;
export declare function cMsgGCToClientRemoveFilteredPlayerResponse_ResultToJSON(object: CMsgGCToClientRemoveFilteredPlayerResponse_Result): string;
export interface CMsgClientToGCPurchaseFilteredPlayerSlot {
    additional_slots_current: number;
}
export interface CMsgGCToClientPurchaseFilteredPlayerSlotResponse {
    result: CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result;
    additional_slots: number;
    next_slot_cost: number;
}
export declare enum CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result {
    SUCCESS = 0,
    FAILURE = 1,
    CURRENT_SLOTCOUNT_DOESNT_MATCH = 2,
    CANT_AFFORD = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultFromJSON(object: any): CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result;
export declare function cMsgGCToClientPurchaseFilteredPlayerSlotResponse_ResultToJSON(object: CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result): string;
export interface CMsgClientToGCUpdateFilteredPlayerNote {
    target_account_id: number;
    new_note: string;
}
export interface CMsgGCToClientUpdateFilteredPlayerNoteResponse {
    result: CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result;
}
export declare enum CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result {
    SUCCESS = 0,
    FAILURE = 1,
    NOT_FOUND = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultFromJSON(object: any): CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result;
export declare function cMsgGCToClientUpdateFilteredPlayerNoteResponse_ResultToJSON(object: CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result): string;
export interface CMsgPartySearchPlayer {
    account_id: number;
    match_id: string;
    creation_time: number;
}
export interface CMsgGCToClientPlayerBeaconState {
    num_active_beacons: number[];
}
export interface CMsgGCToClientPartyBeaconUpdate {
    beacon_added: boolean;
    beacon_type: number;
    account_id: number;
}
export interface CMsgClientToGCUpdatePartyBeacon {
    action: CMsgClientToGCUpdatePartyBeacon_Action;
}
export declare enum CMsgClientToGCUpdatePartyBeacon_Action {
    ON = 0,
    OFF = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCUpdatePartyBeacon_ActionFromJSON(object: any): CMsgClientToGCUpdatePartyBeacon_Action;
export declare function cMsgClientToGCUpdatePartyBeacon_ActionToJSON(object: CMsgClientToGCUpdatePartyBeacon_Action): string;
export interface CMsgClientToGCRequestActiveBeaconParties {
}
export interface CMsgGCToClientRequestActiveBeaconPartiesResponse {
    response: CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse;
    active_parties: CPartySearchClientParty[];
}
export declare enum CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse {
    SUCCESS = 0,
    FAILURE = 1,
    BUSY = 2,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseFromJSON(object: any): CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse;
export declare function cMsgGCToClientRequestActiveBeaconPartiesResponse_EResponseToJSON(object: CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse): string;
export interface CMsgClientToGCJoinPartyFromBeacon {
    party_id: string;
    account_id: number;
    beacon_type: number;
}
export interface CMsgGCToClientJoinPartyFromBeaconResponse {
    response: CMsgGCToClientJoinPartyFromBeaconResponse_EResponse;
}
export declare enum CMsgGCToClientJoinPartyFromBeaconResponse_EResponse {
    SUCCESS = 0,
    FAILURE = 1,
    BUSY = 2,
    NOT_LEADER = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientJoinPartyFromBeaconResponse_EResponseFromJSON(object: any): CMsgGCToClientJoinPartyFromBeaconResponse_EResponse;
export declare function cMsgGCToClientJoinPartyFromBeaconResponse_EResponseToJSON(object: CMsgGCToClientJoinPartyFromBeaconResponse_EResponse): string;
export interface CMsgClientToGCManageFavorites {
    action: CMsgClientToGCManageFavorites_Action;
    account_id: number;
    favorite_name: string;
    invite_response: boolean;
    from_friendlist: boolean;
    lobby_id: string;
}
export declare enum CMsgClientToGCManageFavorites_Action {
    ADD = 0,
    REMOVE = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCManageFavorites_ActionFromJSON(object: any): CMsgClientToGCManageFavorites_Action;
export declare function cMsgClientToGCManageFavorites_ActionToJSON(object: CMsgClientToGCManageFavorites_Action): string;
export interface CMsgGCToClientManageFavoritesResponse {
    response: CMsgGCToClientManageFavoritesResponse_EResponse;
    debug_message: string;
    player: CMsgPartySearchPlayer | undefined;
}
export declare enum CMsgGCToClientManageFavoritesResponse_EResponse {
    SUCCESS = 0,
    FAILURE = 1,
    NO_INVITE_PRESENT = 2,
    INVITE_SENT = 3,
    EXPIRED = 4,
    BUSY = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientManageFavoritesResponse_EResponseFromJSON(object: any): CMsgGCToClientManageFavoritesResponse_EResponse;
export declare function cMsgGCToClientManageFavoritesResponse_EResponseToJSON(object: CMsgGCToClientManageFavoritesResponse_EResponse): string;
export interface CMsgClientToGCGetFavoritePlayers {
    pagination_key: string;
    pagination_count: number;
}
export interface CMsgGCToClientGetFavoritePlayersResponse {
    response: CMsgGCToClientGetFavoritePlayersResponse_EResponse;
    players: CMsgPartySearchPlayer[];
    next_pagination_key: string;
}
export declare enum CMsgGCToClientGetFavoritePlayersResponse_EResponse {
    SUCCESS = 0,
    FAILURE = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientGetFavoritePlayersResponse_EResponseFromJSON(object: any): CMsgGCToClientGetFavoritePlayersResponse_EResponse;
export declare function cMsgGCToClientGetFavoritePlayersResponse_EResponseToJSON(object: CMsgGCToClientGetFavoritePlayersResponse_EResponse): string;
export interface CMsgGCToClientPartySearchInvite {
    account_id: number;
}
export interface CMsgClientToGCVerifyFavoritePlayers {
    account_ids: number[];
}
export interface CMsgGCToClientVerifyFavoritePlayersResponse {
    results: CMsgGCToClientVerifyFavoritePlayersResponse_Result[];
}
export interface CMsgGCToClientVerifyFavoritePlayersResponse_Result {
    player: CMsgPartySearchPlayer | undefined;
    is_favorite: boolean;
}
export interface CMsgClientToGCRequestPlayerRecentAccomplishments {
    account_id: number;
}
export interface CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse {
    result: CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse;
    player_accomplishments: CMsgPlayerRecentAccomplishments | undefined;
}
export declare enum CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTooBusy = 2,
    k_eDisabled = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseFromJSON(object: any): CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse;
export declare function cMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponseToJSON(object: CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse): string;
export interface CMsgClientToGCRequestPlayerHeroRecentAccomplishments {
    account_id: number;
    hero_id: number;
}
export interface CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse {
    result: CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse;
    hero_accomplishments: CMsgPlayerHeroRecentAccomplishments | undefined;
}
export declare enum CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTooBusy = 2,
    k_eDisabled = 3,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseFromJSON(object: any): CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse;
export declare function cMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponseToJSON(object: CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse): string;
export interface CMsgClientToGCSubmitPlayerMatchSurvey {
    match_id: string;
    rating: number;
    flags: number;
}
export interface CMsgClientToGCSubmitPlayerMatchSurveyResponse {
    eresult: CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse;
    account_id: number;
}
export declare enum CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTooBusy = 2,
    k_eDisabled = 3,
    k_eAlreadySubmitted = 4,
    k_ePlayerNotValid = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseFromJSON(object: any): CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse;
export declare function cMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponseToJSON(object: CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse): string;
export interface CMsgGCToClientVACReminder {
}
export interface CMsgClientToGCUnderDraftRequest {
    account_id: number;
    event_id: number;
}
export interface CMsgClientToGCUnderDraftResponse {
    result: EUnderDraftResponse;
    account_id: number;
    event_id: number;
    draft_data: CMsgUnderDraftData | undefined;
}
export interface CMsgClientToGCUnderDraftReroll {
    event_id: number;
}
export interface CMsgClientToGCUnderDraftRerollResponse {
    result: EUnderDraftResponse;
    event_id: number;
    draft_data: CMsgUnderDraftData | undefined;
}
export interface CMsgClientToGCUnderDraftBuy {
    event_id: number;
    slot_id: number;
}
export interface CMsgGCToClientGuildUnderDraftGoldUpdated {
    event_id: number;
}
export interface CMsgClientToGCUnderDraftBuyResponse {
    result: EUnderDraftResponse;
    event_id: number;
    slot_id: number;
    draft_data: CMsgUnderDraftData | undefined;
}
export interface CMsgClientToGCUnderDraftRollBackBench {
    event_id: number;
}
export interface CMsgClientToGCUnderDraftRollBackBenchResponse {
    result: EUnderDraftResponse;
    event_id: number;
    draft_data: CMsgUnderDraftData | undefined;
}
export interface CMsgClientToGCUnderDraftSell {
    event_id: number;
    slot_id: number;
}
export interface CMsgClientToGCUnderDraftSellResponse {
    result: EUnderDraftResponse;
    event_id: number;
    slot_id: number;
    draft_data: CMsgUnderDraftData | undefined;
}
export interface CMsgClientToGCUnderDraftRedeemReward {
    event_id: number;
    action_id: number;
}
export interface CMsgClientToGCUnderDraftRedeemRewardResponse {
    result: EUnderDraftResponse;
}
export interface CMsgClientToGCSubmitDraftTriviaMatchAnswer {
    chose_radiant_as_winner: boolean;
    event_id: number;
    end_time: number;
}
export interface CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse {
    result: EDOTADraftTriviaAnswerResult;
}
export interface CMsgDraftTriviaVoteCount {
    total_votes: number;
    radiant_votes: number;
    dire_votes: number;
}
export interface CMsgClientToGCRecalibrateMMR {
}
export interface CMsgClientToGCRecalibrateMMRResponse {
    result: CMsgClientToGCRecalibrateMMRResponse_EResponse;
}
export declare enum CMsgClientToGCRecalibrateMMRResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooBusy = 3,
    k_eNotPermitted = 4,
    k_eNotToSoon = 5,
    k_eNotValid = 6,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCRecalibrateMMRResponse_EResponseFromJSON(object: any): CMsgClientToGCRecalibrateMMRResponse_EResponse;
export declare function cMsgClientToGCRecalibrateMMRResponse_EResponseToJSON(object: CMsgClientToGCRecalibrateMMRResponse_EResponse): string;
export interface CMsgDOTAPostGameItemAwardNotification {
    receiver_account_id: number;
    item_def_index: number[];
    action_id: number;
}
export interface CMsgClientToGCGetOWMatchDetails {
}
export interface CMsgClientToGCGetOWMatchDetailsResponse {
    result: CMsgClientToGCGetOWMatchDetailsResponse_EResponse;
    overwatch_replay_id: string;
    decryption_key: string;
    cluster: number;
    overwatch_salt: number;
    target_player_slot: number;
    markers: CMsgClientToGCGetOWMatchDetailsResponse_Marker[];
    report_reason: EOverwatchReportReason;
    target_hero_id: number;
    rank_tier: number;
    lane_selection_flags: number;
}
export declare enum CMsgClientToGCGetOWMatchDetailsResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooBusy = 3,
    k_eNotPermitted = 4,
    k_eNoCaseAvailable = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCGetOWMatchDetailsResponse_EResponseFromJSON(object: any): CMsgClientToGCGetOWMatchDetailsResponse_EResponse;
export declare function cMsgClientToGCGetOWMatchDetailsResponse_EResponseToJSON(object: CMsgClientToGCGetOWMatchDetailsResponse_EResponse): string;
export interface CMsgClientToGCGetOWMatchDetailsResponse_Marker {
    start_game_time_s: number;
    end_game_time_s: number;
}
export interface CMsgClientToGCSubmitOWConviction {
    overwatch_replay_id: string;
    target_player_slot: number;
    cheating_conviction: EOverwatchConviction;
    griefing_conviction: EOverwatchConviction;
}
export interface CMsgClientToGCSubmitOWConvictionResponse {
    result: CMsgClientToGCSubmitOWConvictionResponse_EResponse;
    overwatch_replay_id: string;
}
export declare enum CMsgClientToGCSubmitOWConvictionResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooBusy = 3,
    k_eNotPermitted = 4,
    k_eInvalidReplayID = 5,
    k_eInvalidConviction = 6,
    k_eInvalidPlayerSlot = 7,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCSubmitOWConvictionResponse_EResponseFromJSON(object: any): CMsgClientToGCSubmitOWConvictionResponse_EResponse;
export declare function cMsgClientToGCSubmitOWConvictionResponse_EResponseToJSON(object: CMsgClientToGCSubmitOWConvictionResponse_EResponse): string;
export interface CMsgClientToGCChinaSSAURLRequest {
}
export interface CMsgClientToGCChinaSSAURLResponse {
    agreement_url: string;
}
export interface CMsgClientToGCChinaSSAAcceptedRequest {
}
export interface CMsgClientToGCChinaSSAAcceptedResponse {
    agreement_accepted: boolean;
}
export interface CMsgGCToClientOverwatchCasesAvailable {
    expire_time: number;
}
export interface CMsgClientToGCStartWatchingOverwatch {
    overwatch_replay_id: string;
    target_player_slot: number;
}
export interface CMsgClientToGCStopWatchingOverwatch {
    overwatch_replay_id: string;
    target_player_slot: number;
}
export interface CMsgClientToGCOverwatchReplayError {
    overwatch_replay_id: string;
}
export interface CMsgClientToGCGetDPCFavorites {
}
export interface CMsgClientToGCGetDPCFavoritesResponse {
    result: CMsgClientToGCGetDPCFavoritesResponse_EResponse;
    favorites: CMsgClientToGCGetDPCFavoritesResponse_Favorite[];
}
export declare enum CMsgClientToGCGetDPCFavoritesResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTooBusy = 2,
    k_eDisabled = 3,
    k_eTimeout = 4,
    k_eInvalidRequest = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCGetDPCFavoritesResponse_EResponseFromJSON(object: any): CMsgClientToGCGetDPCFavoritesResponse_EResponse;
export declare function cMsgClientToGCGetDPCFavoritesResponse_EResponseToJSON(object: CMsgClientToGCGetDPCFavoritesResponse_EResponse): string;
export interface CMsgClientToGCGetDPCFavoritesResponse_Favorite {
    favorite_type: EDPCFavoriteType;
    favorite_id: number;
}
export interface CMsgClientToGCSetDPCFavoriteState {
    favorite_type: EDPCFavoriteType;
    favorite_id: number;
    enabled: boolean;
}
export interface CMsgClientToGCSetDPCFavoriteStateResponse {
    result: CMsgClientToGCSetDPCFavoriteStateResponse_EResponse;
}
export declare enum CMsgClientToGCSetDPCFavoriteStateResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eFavoriteTypeOutOfRange = 2,
    k_eLockFailed = 3,
    k_eAlreadyFavorited = 4,
    k_eAlreadyUnfavorited = 5,
    k_eInsertRecordFailed = 6,
    k_eRemoveRecordFailed = 7,
    k_eTimeout = 8,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCSetDPCFavoriteStateResponse_EResponseFromJSON(object: any): CMsgClientToGCSetDPCFavoriteStateResponse_EResponse;
export declare function cMsgClientToGCSetDPCFavoriteStateResponse_EResponseToJSON(object: CMsgClientToGCSetDPCFavoriteStateResponse_EResponse): string;
export interface CMsgClientToGCSetEventActiveSeasonID {
    event_id: number;
    active_season_id: number;
}
export interface CMsgClientToGCSetEventActiveSeasonIDResponse {
    result: CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse;
}
export declare enum CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eDisabled = 2,
    k_eTooBusy = 3,
    k_eNotAllowed = 4,
    k_eTimeout = 5,
    k_eInternalSuccessNoChange = 6,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseFromJSON(object: any): CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse;
export declare function cMsgClientToGCSetEventActiveSeasonIDResponse_EResponseToJSON(object: CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse): string;
export interface CMsgClientToGCPurchaseLabyrinthBlessings {
    event_id: EEvent;
    blessing_ids: number[];
    debug: boolean;
    debug_remove: boolean;
}
export interface CMsgClientToGCPurchaseLabyrinthBlessingsResponse {
    result: CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse;
}
export declare enum CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eNoSuchBlessing = 2,
    k_eNotEnoughShards = 3,
    k_eNoPath = 4,
    k_eTimeout = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseFromJSON(object: any): CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse;
export declare function cMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponseToJSON(object: CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse): string;
export interface CMsgClientToGCGetStickerbookRequest {
    account_id: number;
}
export interface CMsgClientToGCGetStickerbookResponse {
    response: CMsgClientToGCGetStickerbookResponse_EResponse;
    stickerbook: CMsgStickerbook | undefined;
}
export declare enum CMsgClientToGCGetStickerbookResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eNotAllowed = 3,
    k_eTooBusy = 4,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCGetStickerbookResponse_EResponseFromJSON(object: any): CMsgClientToGCGetStickerbookResponse_EResponse;
export declare function cMsgClientToGCGetStickerbookResponse_EResponseToJSON(object: CMsgClientToGCGetStickerbookResponse_EResponse): string;
export interface CMsgClientToGCCreateStickerbookPageRequest {
    team_id: number;
    event_id: EEvent;
    page_type: EStickerbookPageType;
}
export interface CMsgClientToGCCreateStickerbookPageResponse {
    response: CMsgClientToGCCreateStickerbookPageResponse_EResponse;
    page_number: number;
}
export declare enum CMsgClientToGCCreateStickerbookPageResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooManyPages = 3,
    k_eTooBusy = 4,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCCreateStickerbookPageResponse_EResponseFromJSON(object: any): CMsgClientToGCCreateStickerbookPageResponse_EResponse;
export declare function cMsgClientToGCCreateStickerbookPageResponse_EResponseToJSON(object: CMsgClientToGCCreateStickerbookPageResponse_EResponse): string;
export interface CMsgClientToGCDeleteStickerbookPageRequest {
    page_num: number;
    sticker_count: number;
    sticker_max: number;
}
export interface CMsgClientToGCDeleteStickerbookPageResponse {
    response: CMsgClientToGCDeleteStickerbookPageResponse_EResponse;
}
export declare enum CMsgClientToGCDeleteStickerbookPageResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eInvalidStickerCount = 3,
    k_eTooBusy = 4,
    k_eInvalidStickerMax = 5,
    k_eInvalidPage = 6,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCDeleteStickerbookPageResponse_EResponseFromJSON(object: any): CMsgClientToGCDeleteStickerbookPageResponse_EResponse;
export declare function cMsgClientToGCDeleteStickerbookPageResponse_EResponseToJSON(object: CMsgClientToGCDeleteStickerbookPageResponse_EResponse): string;
export interface CMsgClientToGCPlaceStickersRequest {
    sticker_items: CMsgClientToGCPlaceStickersRequest_StickerItem[];
}
export interface CMsgClientToGCPlaceStickersRequest_StickerItem {
    page_num: number;
    sticker: CMsgStickerbookSticker | undefined;
}
export interface CMsgClientToGCPlaceStickersResponse {
    response: CMsgClientToGCPlaceStickersResponse_EResponse;
}
export declare enum CMsgClientToGCPlaceStickersResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eMissingItem = 3,
    k_eTooBusy = 4,
    k_eDuplicateItem = 5,
    k_eInvalidPage = 6,
    k_ePageTypeMismatch = 7,
    k_eTooManyStickers = 8,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCPlaceStickersResponse_EResponseFromJSON(object: any): CMsgClientToGCPlaceStickersResponse_EResponse;
export declare function cMsgClientToGCPlaceStickersResponse_EResponseToJSON(object: CMsgClientToGCPlaceStickersResponse_EResponse): string;
export interface CMsgClientToGCPlaceCollectionStickersRequest {
    slots: CMsgClientToGCPlaceCollectionStickersRequest_Slot[];
}
export interface CMsgClientToGCPlaceCollectionStickersRequest_Slot {
    page_num: number;
    slot: number;
    new_item_id: string;
    old_item_def_id: number;
    old_quality: number;
}
export interface CMsgClientToGCPlaceCollectionStickersResponse {
    response: CMsgClientToGCPlaceCollectionStickersResponse_EResponse;
}
export declare enum CMsgClientToGCPlaceCollectionStickersResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eMissingItem = 3,
    k_eTooBusy = 4,
    k_eDuplicateItem = 5,
    k_eInvalidPage = 6,
    k_ePageTypeMismatch = 7,
    k_eOldItemMismatch = 8,
    k_eInvalidSlot = 9,
    k_eSlotTypeMismatch = 10,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCPlaceCollectionStickersResponse_EResponseFromJSON(object: any): CMsgClientToGCPlaceCollectionStickersResponse_EResponse;
export declare function cMsgClientToGCPlaceCollectionStickersResponse_EResponseToJSON(object: CMsgClientToGCPlaceCollectionStickersResponse_EResponse): string;
export interface CMsgClientToGCOrderStickerbookTeamPageRequest {
    page_order_sequence: CMsgStickerbookTeamPageOrderSequence | undefined;
}
export interface CMsgClientToGCOrderStickerbookTeamPageResponse {
    response: CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse;
}
export declare enum CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooManyPages = 3,
    k_eTooBusy = 4,
    k_eInvalidPage = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseFromJSON(object: any): CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse;
export declare function cMsgClientToGCOrderStickerbookTeamPageResponse_EResponseToJSON(object: CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse): string;
export interface CMsgClientToGCSetHeroSticker {
    hero_id: number;
    new_item_id: string;
    old_item_id: string;
}
export interface CMsgClientToGCSetHeroStickerResponse {
    response: CMsgClientToGCSetHeroStickerResponse_EResponse;
}
export declare enum CMsgClientToGCSetHeroStickerResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eMissingItem = 3,
    k_eTooBusy = 4,
    k_eOldItemMismatch = 5,
    k_eInvalidHero = 6,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCSetHeroStickerResponse_EResponseFromJSON(object: any): CMsgClientToGCSetHeroStickerResponse_EResponse;
export declare function cMsgClientToGCSetHeroStickerResponse_EResponseToJSON(object: CMsgClientToGCSetHeroStickerResponse_EResponse): string;
export interface CMsgClientToGCGetHeroStickers {
}
export interface CMsgClientToGCGetHeroStickersResponse {
    response: CMsgClientToGCGetHeroStickersResponse_EResponse;
    sticker_heroes: CMsgStickerHeroes | undefined;
}
export declare enum CMsgClientToGCGetHeroStickersResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooBusy = 4,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCGetHeroStickersResponse_EResponseFromJSON(object: any): CMsgClientToGCGetHeroStickersResponse_EResponse;
export declare function cMsgClientToGCGetHeroStickersResponse_EResponseToJSON(object: CMsgClientToGCGetHeroStickersResponse_EResponse): string;
export interface CMsgClientToGCSetFavoritePage {
    page_num: number;
    clear: boolean;
}
export interface CMsgClientToGCSetFavoritePageResponse {
    response: CMsgClientToGCSetFavoritePageResponse_EResponse;
}
export declare enum CMsgClientToGCSetFavoritePageResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooBusy = 4,
    k_eInvalidPage = 5,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCSetFavoritePageResponse_EResponseFromJSON(object: any): CMsgClientToGCSetFavoritePageResponse_EResponse;
export declare function cMsgClientToGCSetFavoritePageResponse_EResponseToJSON(object: CMsgClientToGCSetFavoritePageResponse_EResponse): string;
export interface CMsgClientToGCClaimSwag {
    event_id: EEvent;
    action_id: number;
    data: number;
}
export interface CMsgClientToGCClaimSwagResponse {
    response: CMsgClientToGCClaimSwagResponse_EResponse;
}
export declare enum CMsgClientToGCClaimSwagResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooBusy = 4,
    k_eAlreadyClaimed = 5,
    k_eDisabled = 6,
    k_eInvalidRequest = 7,
    k_eUserNotEligible = 8,
    k_eStorageError = 9,
    k_eRewardDisabled = 10,
    UNRECOGNIZED = -1
}
export declare function cMsgClientToGCClaimSwagResponse_EResponseFromJSON(object: any): CMsgClientToGCClaimSwagResponse_EResponse;
export declare function cMsgClientToGCClaimSwagResponse_EResponseToJSON(object: CMsgClientToGCClaimSwagResponse_EResponse): string;
export interface CMsgClientToGCCollectorsCacheAvailableDataRequest {
    contest_id: number;
}
export interface CMsgGCToClientCollectorsCacheAvailableDataResponse {
    votes: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote[];
}
export interface CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote {
    item_def: number;
    vote_type: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
}
export declare enum CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType {
    k_eUp = 0,
    k_eDown = 1,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeFromJSON(object: any): CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
export declare function cMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteTypeToJSON(object: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType): string;
export interface CMsgClientToGCUploadMatchClip {
    match_clip: CMatchClip | undefined;
}
export interface CMsgGCToClientUploadMatchClipResponse {
    response: CMsgGCToClientUploadMatchClipResponse_EResponse;
}
export declare enum CMsgGCToClientUploadMatchClipResponse_EResponse {
    k_eInternalError = 0,
    k_eSuccess = 1,
    k_eTimeout = 2,
    k_eTooBusy = 4,
    UNRECOGNIZED = -1
}
export declare function cMsgGCToClientUploadMatchClipResponse_EResponseFromJSON(object: any): CMsgGCToClientUploadMatchClipResponse_EResponse;
export declare function cMsgGCToClientUploadMatchClipResponse_EResponseToJSON(object: CMsgGCToClientUploadMatchClipResponse_EResponse): string;
export declare const CMsgClientSuspended: {
    fromJSON(object: any): CMsgClientSuspended;
    toJSON(message: CMsgClientSuspended): unknown;
    create<I extends {
        time_end?: number;
    } & {
        time_end?: number;
    } & { [K in Exclude<keyof I, "time_end">]: never; }>(base?: I): CMsgClientSuspended;
    fromPartial<I_1 extends {
        time_end?: number;
    } & {
        time_end?: number;
    } & { [K_1 in Exclude<keyof I_1, "time_end">]: never; }>(object: I_1): CMsgClientSuspended;
};
export declare const CMsgBalancedShuffleLobby: {
    fromJSON(_: any): CMsgBalancedShuffleLobby;
    toJSON(_: CMsgBalancedShuffleLobby): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgBalancedShuffleLobby;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgBalancedShuffleLobby;
};
export declare const CMsgInitialQuestionnaireResponse: {
    fromJSON(object: any): CMsgInitialQuestionnaireResponse;
    toJSON(message: CMsgInitialQuestionnaireResponse): unknown;
    create<I extends {
        initial_skill?: number;
    } & {
        initial_skill?: number;
    } & { [K in Exclude<keyof I, "initial_skill">]: never; }>(base?: I): CMsgInitialQuestionnaireResponse;
    fromPartial<I_1 extends {
        initial_skill?: number;
    } & {
        initial_skill?: number;
    } & { [K_1 in Exclude<keyof I_1, "initial_skill">]: never; }>(object: I_1): CMsgInitialQuestionnaireResponse;
};
export declare const CMsgDOTARequestMatchesResponse: {
    fromJSON(object: any): CMsgDOTARequestMatchesResponse;
    toJSON(message: CMsgDOTARequestMatchesResponse): unknown;
    create<I extends {
        matches?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[];
        series?: {
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[];
            series_id?: number;
            series_type?: number;
        }[];
        request_id?: number;
        total_results?: number;
        results_remaining?: number;
    } & {
        matches?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[] & ({
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        } & {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[] & ({
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K in Exclude<keyof I["matches"][number]["players"][number]["ability_upgrades"][number], keyof import("./dota_gcmessages_common").CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_1 in Exclude<keyof I["matches"][number]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_2 in Exclude<keyof I["matches"][number]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_3 in Exclude<keyof I["matches"][number]["players"][number]["additional_units_inventory"][number], keyof import("./dota_gcmessages_common").CMatchAdditionalUnitInventory>]: never; })[] & { [K_4 in Exclude<keyof I["matches"][number]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_5 in Exclude<keyof I["matches"][number]["players"][number]["permanent_buffs"][number], keyof import("./dota_gcmessages_common").CMatchPlayerPermanentBuff>]: never; })[] & { [K_6 in Exclude<keyof I["matches"][number]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_7 in Exclude<keyof I["matches"][number]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_8 in Exclude<keyof I["matches"][number]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_9 in Exclude<keyof I["matches"][number]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_10 in Exclude<keyof I["matches"][number]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_11 in Exclude<keyof I["matches"][number]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & { [K_12 in Exclude<keyof I["matches"][number]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_13 in Exclude<keyof I["matches"][number]["players"], keyof {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[]>]: never; };
            match_id?: string;
            tower_status?: number[] & number[] & { [K_14 in Exclude<keyof I["matches"][number]["tower_status"], keyof number[]>]: never; };
            barracks_status?: number[] & number[] & { [K_15 in Exclude<keyof I["matches"][number]["barracks_status"], keyof number[]>]: never; };
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[] & ({
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & { [K_16 in Exclude<keyof I["matches"][number]["picks_bans"][number], keyof import("./dota_gcmessages_common").CMatchHeroSelectEvent>]: never; })[] & { [K_17 in Exclude<keyof I["matches"][number]["picks_bans"], keyof {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[]>]: never; };
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[] & ({
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            } & {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[] & ({
                    account_id?: number;
                    name?: string;
                } & {
                    account_id?: number;
                    name?: string;
                } & { [K_18 in Exclude<keyof I["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_19 in Exclude<keyof I["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                    account_id?: number;
                    name?: string;
                }[]>]: never; };
                language_code?: string;
            } & { [K_20 in Exclude<keyof I["matches"][number]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_21 in Exclude<keyof I["matches"][number]["broadcaster_channels"], keyof {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[]>]: never; };
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            } & {
                custom_game_id?: string;
                map_name?: string;
            } & { [K_22 in Exclude<keyof I["matches"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[] & ({
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & { [K_23 in Exclude<keyof I["matches"][number]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_24 in Exclude<keyof I["matches"][number]["coaches"], keyof {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[]>]: never; };
        } & { [K_25 in Exclude<keyof I["matches"][number], keyof CMsgDOTAMatch>]: never; })[] & { [K_26 in Exclude<keyof I["matches"], keyof {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[]>]: never; };
        series?: {
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[];
            series_id?: number;
            series_type?: number;
        }[] & ({
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[];
            series_id?: number;
            series_type?: number;
        } & {
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[] & ({
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            } & {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[] & ({
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                } & {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[] & ({
                        ability?: number;
                        time?: number;
                    } & {
                        ability?: number;
                        time?: number;
                    } & { [K_27 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["ability_upgrades"][number], keyof import("./dota_gcmessages_common").CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_28 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["ability_upgrades"], keyof {
                        ability?: number;
                        time?: number;
                    }[]>]: never; };
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[] & ({
                        unit_name?: string;
                        items?: number[];
                    } & {
                        unit_name?: string;
                        items?: number[] & number[] & { [K_29 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                    } & { [K_30 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["additional_units_inventory"][number], keyof import("./dota_gcmessages_common").CMatchAdditionalUnitInventory>]: never; })[] & { [K_31 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["additional_units_inventory"], keyof {
                        unit_name?: string;
                        items?: number[];
                    }[]>]: never; };
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[] & ({
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    } & {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    } & { [K_32 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["permanent_buffs"][number], keyof import("./dota_gcmessages_common").CMatchPlayerPermanentBuff>]: never; })[] & { [K_33 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["permanent_buffs"], keyof {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[]>]: never; };
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    } & {
                        dota_team?: number;
                        winner?: boolean;
                    } & { [K_34 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[] & ({
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    } & {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    } & { [K_35 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_36 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["hero_damage_received"], keyof {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[]>]: never; };
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[] & ({
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    } & {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    } & { [K_37 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_38 in Exclude<keyof I["series"][number]["matches"][number]["players"][number]["hero_damage_dealt"], keyof {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[]>]: never; };
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                } & { [K_39 in Exclude<keyof I["series"][number]["matches"][number]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_40 in Exclude<keyof I["series"][number]["matches"][number]["players"], keyof {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[]>]: never; };
                match_id?: string;
                tower_status?: number[] & number[] & { [K_41 in Exclude<keyof I["series"][number]["matches"][number]["tower_status"], keyof number[]>]: never; };
                barracks_status?: number[] & number[] & { [K_42 in Exclude<keyof I["series"][number]["matches"][number]["barracks_status"], keyof number[]>]: never; };
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[] & ({
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                } & {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                } & { [K_43 in Exclude<keyof I["series"][number]["matches"][number]["picks_bans"][number], keyof import("./dota_gcmessages_common").CMatchHeroSelectEvent>]: never; })[] & { [K_44 in Exclude<keyof I["series"][number]["matches"][number]["picks_bans"], keyof {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[]>]: never; };
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[] & ({
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                } & {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[] & ({
                        account_id?: number;
                        name?: string;
                    } & {
                        account_id?: number;
                        name?: string;
                    } & { [K_45 in Exclude<keyof I["series"][number]["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_46 in Exclude<keyof I["series"][number]["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                        account_id?: number;
                        name?: string;
                    }[]>]: never; };
                    language_code?: string;
                } & { [K_47 in Exclude<keyof I["series"][number]["matches"][number]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_48 in Exclude<keyof I["series"][number]["matches"][number]["broadcaster_channels"], keyof {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[]>]: never; };
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                } & {
                    custom_game_id?: string;
                    map_name?: string;
                } & { [K_49 in Exclude<keyof I["series"][number]["matches"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[] & ({
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                } & {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                } & { [K_50 in Exclude<keyof I["series"][number]["matches"][number]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_51 in Exclude<keyof I["series"][number]["matches"][number]["coaches"], keyof {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[]>]: never; };
            } & { [K_52 in Exclude<keyof I["series"][number]["matches"][number], keyof CMsgDOTAMatch>]: never; })[] & { [K_53 in Exclude<keyof I["series"][number]["matches"], keyof {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[]>]: never; };
            series_id?: number;
            series_type?: number;
        } & { [K_54 in Exclude<keyof I["series"][number], keyof CMsgDOTARequestMatchesResponse_Series>]: never; })[] & { [K_55 in Exclude<keyof I["series"], keyof {
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[];
            series_id?: number;
            series_type?: number;
        }[]>]: never; };
        request_id?: number;
        total_results?: number;
        results_remaining?: number;
    } & { [K_56 in Exclude<keyof I, keyof CMsgDOTARequestMatchesResponse>]: never; }>(base?: I): CMsgDOTARequestMatchesResponse;
    fromPartial<I_1 extends {
        matches?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[];
        series?: {
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[];
            series_id?: number;
            series_type?: number;
        }[];
        request_id?: number;
        total_results?: number;
        results_remaining?: number;
    } & {
        matches?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[] & ({
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        } & {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[] & ({
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K_57 in Exclude<keyof I_1["matches"][number]["players"][number]["ability_upgrades"][number], keyof import("./dota_gcmessages_common").CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_58 in Exclude<keyof I_1["matches"][number]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_59 in Exclude<keyof I_1["matches"][number]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_60 in Exclude<keyof I_1["matches"][number]["players"][number]["additional_units_inventory"][number], keyof import("./dota_gcmessages_common").CMatchAdditionalUnitInventory>]: never; })[] & { [K_61 in Exclude<keyof I_1["matches"][number]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_62 in Exclude<keyof I_1["matches"][number]["players"][number]["permanent_buffs"][number], keyof import("./dota_gcmessages_common").CMatchPlayerPermanentBuff>]: never; })[] & { [K_63 in Exclude<keyof I_1["matches"][number]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_64 in Exclude<keyof I_1["matches"][number]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_65 in Exclude<keyof I_1["matches"][number]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_66 in Exclude<keyof I_1["matches"][number]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_67 in Exclude<keyof I_1["matches"][number]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_68 in Exclude<keyof I_1["matches"][number]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & { [K_69 in Exclude<keyof I_1["matches"][number]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_70 in Exclude<keyof I_1["matches"][number]["players"], keyof {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[]>]: never; };
            match_id?: string;
            tower_status?: number[] & number[] & { [K_71 in Exclude<keyof I_1["matches"][number]["tower_status"], keyof number[]>]: never; };
            barracks_status?: number[] & number[] & { [K_72 in Exclude<keyof I_1["matches"][number]["barracks_status"], keyof number[]>]: never; };
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[] & ({
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & { [K_73 in Exclude<keyof I_1["matches"][number]["picks_bans"][number], keyof import("./dota_gcmessages_common").CMatchHeroSelectEvent>]: never; })[] & { [K_74 in Exclude<keyof I_1["matches"][number]["picks_bans"], keyof {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[]>]: never; };
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[] & ({
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            } & {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[] & ({
                    account_id?: number;
                    name?: string;
                } & {
                    account_id?: number;
                    name?: string;
                } & { [K_75 in Exclude<keyof I_1["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_76 in Exclude<keyof I_1["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                    account_id?: number;
                    name?: string;
                }[]>]: never; };
                language_code?: string;
            } & { [K_77 in Exclude<keyof I_1["matches"][number]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_78 in Exclude<keyof I_1["matches"][number]["broadcaster_channels"], keyof {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[]>]: never; };
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            } & {
                custom_game_id?: string;
                map_name?: string;
            } & { [K_79 in Exclude<keyof I_1["matches"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[] & ({
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & { [K_80 in Exclude<keyof I_1["matches"][number]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_81 in Exclude<keyof I_1["matches"][number]["coaches"], keyof {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[]>]: never; };
        } & { [K_82 in Exclude<keyof I_1["matches"][number], keyof CMsgDOTAMatch>]: never; })[] & { [K_83 in Exclude<keyof I_1["matches"], keyof {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[]>]: never; };
        series?: {
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[];
            series_id?: number;
            series_type?: number;
        }[] & ({
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[];
            series_id?: number;
            series_type?: number;
        } & {
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[] & ({
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            } & {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[] & ({
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                } & {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[] & ({
                        ability?: number;
                        time?: number;
                    } & {
                        ability?: number;
                        time?: number;
                    } & { [K_84 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["ability_upgrades"][number], keyof import("./dota_gcmessages_common").CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_85 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["ability_upgrades"], keyof {
                        ability?: number;
                        time?: number;
                    }[]>]: never; };
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[] & ({
                        unit_name?: string;
                        items?: number[];
                    } & {
                        unit_name?: string;
                        items?: number[] & number[] & { [K_86 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                    } & { [K_87 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["additional_units_inventory"][number], keyof import("./dota_gcmessages_common").CMatchAdditionalUnitInventory>]: never; })[] & { [K_88 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["additional_units_inventory"], keyof {
                        unit_name?: string;
                        items?: number[];
                    }[]>]: never; };
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[] & ({
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    } & {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    } & { [K_89 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["permanent_buffs"][number], keyof import("./dota_gcmessages_common").CMatchPlayerPermanentBuff>]: never; })[] & { [K_90 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["permanent_buffs"], keyof {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[]>]: never; };
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    } & {
                        dota_team?: number;
                        winner?: boolean;
                    } & { [K_91 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[] & ({
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    } & {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    } & { [K_92 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_93 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["hero_damage_received"], keyof {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[]>]: never; };
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[] & ({
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    } & {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    } & { [K_94 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_95 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number]["hero_damage_dealt"], keyof {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[]>]: never; };
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                } & { [K_96 in Exclude<keyof I_1["series"][number]["matches"][number]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_97 in Exclude<keyof I_1["series"][number]["matches"][number]["players"], keyof {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[]>]: never; };
                match_id?: string;
                tower_status?: number[] & number[] & { [K_98 in Exclude<keyof I_1["series"][number]["matches"][number]["tower_status"], keyof number[]>]: never; };
                barracks_status?: number[] & number[] & { [K_99 in Exclude<keyof I_1["series"][number]["matches"][number]["barracks_status"], keyof number[]>]: never; };
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[] & ({
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                } & {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                } & { [K_100 in Exclude<keyof I_1["series"][number]["matches"][number]["picks_bans"][number], keyof import("./dota_gcmessages_common").CMatchHeroSelectEvent>]: never; })[] & { [K_101 in Exclude<keyof I_1["series"][number]["matches"][number]["picks_bans"], keyof {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[]>]: never; };
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[] & ({
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                } & {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[] & ({
                        account_id?: number;
                        name?: string;
                    } & {
                        account_id?: number;
                        name?: string;
                    } & { [K_102 in Exclude<keyof I_1["series"][number]["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_103 in Exclude<keyof I_1["series"][number]["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                        account_id?: number;
                        name?: string;
                    }[]>]: never; };
                    language_code?: string;
                } & { [K_104 in Exclude<keyof I_1["series"][number]["matches"][number]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_105 in Exclude<keyof I_1["series"][number]["matches"][number]["broadcaster_channels"], keyof {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[]>]: never; };
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                } & {
                    custom_game_id?: string;
                    map_name?: string;
                } & { [K_106 in Exclude<keyof I_1["series"][number]["matches"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[] & ({
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                } & {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                } & { [K_107 in Exclude<keyof I_1["series"][number]["matches"][number]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_108 in Exclude<keyof I_1["series"][number]["matches"][number]["coaches"], keyof {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[]>]: never; };
            } & { [K_109 in Exclude<keyof I_1["series"][number]["matches"][number], keyof CMsgDOTAMatch>]: never; })[] & { [K_110 in Exclude<keyof I_1["series"][number]["matches"], keyof {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[]>]: never; };
            series_id?: number;
            series_type?: number;
        } & { [K_111 in Exclude<keyof I_1["series"][number], keyof CMsgDOTARequestMatchesResponse_Series>]: never; })[] & { [K_112 in Exclude<keyof I_1["series"], keyof {
            matches?: {
                duration?: number;
                starttime?: number;
                players?: {
                    account_id?: number;
                    player_slot?: number;
                    hero_id?: number;
                    item_0?: number;
                    item_1?: number;
                    item_2?: number;
                    item_3?: number;
                    item_4?: number;
                    item_5?: number;
                    item_6?: number;
                    item_7?: number;
                    item_8?: number;
                    item_9?: number;
                    expected_team_contribution?: number;
                    scaled_metric?: number;
                    previous_rank?: number;
                    rank_change?: number;
                    mmr_type?: number;
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    leaver_status?: number;
                    gold?: number;
                    last_hits?: number;
                    denies?: number;
                    gold_per_min?: number;
                    xp_per_min?: number;
                    gold_spent?: number;
                    hero_damage?: number;
                    tower_damage?: number;
                    hero_healing?: number;
                    level?: number;
                    time_last_seen?: number;
                    player_name?: string;
                    support_ability_value?: number;
                    feeding_detected?: boolean;
                    search_rank?: number;
                    search_rank_uncertainty?: number;
                    rank_uncertainty_change?: number;
                    hero_play_count?: number;
                    party_id?: string;
                    scaled_hero_damage?: number;
                    scaled_tower_damage?: number;
                    scaled_hero_healing?: number;
                    scaled_kills?: number;
                    scaled_deaths?: number;
                    scaled_assists?: number;
                    claimed_farm_gold?: number;
                    support_gold?: number;
                    claimed_denies?: number;
                    claimed_misses?: number;
                    misses?: number;
                    ability_upgrades?: {
                        ability?: number;
                        time?: number;
                    }[];
                    additional_units_inventory?: {
                        unit_name?: string;
                        items?: number[];
                    }[];
                    permanent_buffs?: {
                        permanent_buff?: number;
                        stack_count?: number;
                        grant_time?: number;
                    }[];
                    pro_name?: string;
                    real_name?: string;
                    custom_game_data?: {
                        dota_team?: number;
                        winner?: boolean;
                    };
                    active_plus_subscription?: boolean;
                    net_worth?: number;
                    bot_difficulty?: number;
                    hero_pick_order?: number;
                    hero_was_randomed?: boolean;
                    hero_was_dota_plus_suggestion?: boolean;
                    hero_damage_received?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    hero_damage_dealt?: {
                        pre_reduction?: number;
                        post_reduction?: number;
                        damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                    }[];
                    seconds_dead?: number;
                    gold_lost_to_death?: number;
                    lane_selection_flags?: number;
                    bounty_runes?: number;
                    outposts_captured?: number;
                    team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                    team_slot?: number;
                }[];
                match_id?: string;
                tower_status?: number[];
                barracks_status?: number[];
                cluster?: number;
                first_blood_time?: number;
                replay_salt?: number;
                server_ip?: number;
                server_port?: number;
                lobby_type?: number;
                human_players?: number;
                average_skill?: number;
                game_balance?: number;
                radiant_team_id?: number;
                dire_team_id?: number;
                leagueid?: number;
                radiant_team_name?: string;
                dire_team_name?: string;
                radiant_team_logo?: string;
                dire_team_logo?: string;
                radiant_team_logo_url?: string;
                dire_team_logo_url?: string;
                radiant_team_complete?: number;
                dire_team_complete?: number;
                positive_votes?: number;
                negative_votes?: number;
                game_mode?: DOTA_GameMode;
                picks_bans?: {
                    is_pick?: boolean;
                    team?: number;
                    hero_id?: number;
                }[];
                match_seq_num?: string;
                replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
                radiant_guild_id?: number;
                dire_guild_id?: number;
                radiant_team_tag?: string;
                dire_team_tag?: string;
                series_id?: number;
                series_type?: number;
                broadcaster_channels?: {
                    country_code?: string;
                    description?: string;
                    broadcaster_infos?: {
                        account_id?: number;
                        name?: string;
                    }[];
                    language_code?: string;
                }[];
                engine?: number;
                custom_game_data?: {
                    custom_game_id?: string;
                    map_name?: string;
                };
                match_flags?: number;
                private_metadata_key?: number;
                radiant_team_score?: number;
                dire_team_score?: number;
                match_outcome?: import("./dota_shared_enums").EMatchOutcome;
                tournament_id?: number;
                tournament_round?: number;
                pre_game_duration?: number;
                coaches?: {
                    account_id?: number;
                    coach_name?: string;
                    coach_rating?: number;
                    coach_team?: number;
                    coach_party_id?: string;
                    is_private_coach?: boolean;
                }[];
            }[];
            series_id?: number;
            series_type?: number;
        }[]>]: never; };
        request_id?: number;
        total_results?: number;
        results_remaining?: number;
    } & { [K_113 in Exclude<keyof I_1, keyof CMsgDOTARequestMatchesResponse>]: never; }>(object: I_1): CMsgDOTARequestMatchesResponse;
};
export declare const CMsgDOTARequestMatchesResponse_Series: {
    fromJSON(object: any): CMsgDOTARequestMatchesResponse_Series;
    toJSON(message: CMsgDOTARequestMatchesResponse_Series): unknown;
    create<I extends {
        matches?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[];
        series_id?: number;
        series_type?: number;
    } & {
        matches?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[] & ({
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        } & {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[] & ({
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K in Exclude<keyof I["matches"][number]["players"][number]["ability_upgrades"][number], keyof import("./dota_gcmessages_common").CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_1 in Exclude<keyof I["matches"][number]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_2 in Exclude<keyof I["matches"][number]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_3 in Exclude<keyof I["matches"][number]["players"][number]["additional_units_inventory"][number], keyof import("./dota_gcmessages_common").CMatchAdditionalUnitInventory>]: never; })[] & { [K_4 in Exclude<keyof I["matches"][number]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_5 in Exclude<keyof I["matches"][number]["players"][number]["permanent_buffs"][number], keyof import("./dota_gcmessages_common").CMatchPlayerPermanentBuff>]: never; })[] & { [K_6 in Exclude<keyof I["matches"][number]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_7 in Exclude<keyof I["matches"][number]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_8 in Exclude<keyof I["matches"][number]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_9 in Exclude<keyof I["matches"][number]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_10 in Exclude<keyof I["matches"][number]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_11 in Exclude<keyof I["matches"][number]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & { [K_12 in Exclude<keyof I["matches"][number]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_13 in Exclude<keyof I["matches"][number]["players"], keyof {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[]>]: never; };
            match_id?: string;
            tower_status?: number[] & number[] & { [K_14 in Exclude<keyof I["matches"][number]["tower_status"], keyof number[]>]: never; };
            barracks_status?: number[] & number[] & { [K_15 in Exclude<keyof I["matches"][number]["barracks_status"], keyof number[]>]: never; };
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[] & ({
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & { [K_16 in Exclude<keyof I["matches"][number]["picks_bans"][number], keyof import("./dota_gcmessages_common").CMatchHeroSelectEvent>]: never; })[] & { [K_17 in Exclude<keyof I["matches"][number]["picks_bans"], keyof {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[]>]: never; };
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[] & ({
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            } & {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[] & ({
                    account_id?: number;
                    name?: string;
                } & {
                    account_id?: number;
                    name?: string;
                } & { [K_18 in Exclude<keyof I["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_19 in Exclude<keyof I["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                    account_id?: number;
                    name?: string;
                }[]>]: never; };
                language_code?: string;
            } & { [K_20 in Exclude<keyof I["matches"][number]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_21 in Exclude<keyof I["matches"][number]["broadcaster_channels"], keyof {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[]>]: never; };
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            } & {
                custom_game_id?: string;
                map_name?: string;
            } & { [K_22 in Exclude<keyof I["matches"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[] & ({
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & { [K_23 in Exclude<keyof I["matches"][number]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_24 in Exclude<keyof I["matches"][number]["coaches"], keyof {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[]>]: never; };
        } & { [K_25 in Exclude<keyof I["matches"][number], keyof CMsgDOTAMatch>]: never; })[] & { [K_26 in Exclude<keyof I["matches"], keyof {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[]>]: never; };
        series_id?: number;
        series_type?: number;
    } & { [K_27 in Exclude<keyof I, keyof CMsgDOTARequestMatchesResponse_Series>]: never; }>(base?: I): CMsgDOTARequestMatchesResponse_Series;
    fromPartial<I_1 extends {
        matches?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[];
        series_id?: number;
        series_type?: number;
    } & {
        matches?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[] & ({
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        } & {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[] & ({
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K_28 in Exclude<keyof I_1["matches"][number]["players"][number]["ability_upgrades"][number], keyof import("./dota_gcmessages_common").CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_29 in Exclude<keyof I_1["matches"][number]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_30 in Exclude<keyof I_1["matches"][number]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_31 in Exclude<keyof I_1["matches"][number]["players"][number]["additional_units_inventory"][number], keyof import("./dota_gcmessages_common").CMatchAdditionalUnitInventory>]: never; })[] & { [K_32 in Exclude<keyof I_1["matches"][number]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_33 in Exclude<keyof I_1["matches"][number]["players"][number]["permanent_buffs"][number], keyof import("./dota_gcmessages_common").CMatchPlayerPermanentBuff>]: never; })[] & { [K_34 in Exclude<keyof I_1["matches"][number]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_35 in Exclude<keyof I_1["matches"][number]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_36 in Exclude<keyof I_1["matches"][number]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_37 in Exclude<keyof I_1["matches"][number]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_38 in Exclude<keyof I_1["matches"][number]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_39 in Exclude<keyof I_1["matches"][number]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & { [K_40 in Exclude<keyof I_1["matches"][number]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_41 in Exclude<keyof I_1["matches"][number]["players"], keyof {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[]>]: never; };
            match_id?: string;
            tower_status?: number[] & number[] & { [K_42 in Exclude<keyof I_1["matches"][number]["tower_status"], keyof number[]>]: never; };
            barracks_status?: number[] & number[] & { [K_43 in Exclude<keyof I_1["matches"][number]["barracks_status"], keyof number[]>]: never; };
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[] & ({
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & { [K_44 in Exclude<keyof I_1["matches"][number]["picks_bans"][number], keyof import("./dota_gcmessages_common").CMatchHeroSelectEvent>]: never; })[] & { [K_45 in Exclude<keyof I_1["matches"][number]["picks_bans"], keyof {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[]>]: never; };
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[] & ({
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            } & {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[] & ({
                    account_id?: number;
                    name?: string;
                } & {
                    account_id?: number;
                    name?: string;
                } & { [K_46 in Exclude<keyof I_1["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_47 in Exclude<keyof I_1["matches"][number]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                    account_id?: number;
                    name?: string;
                }[]>]: never; };
                language_code?: string;
            } & { [K_48 in Exclude<keyof I_1["matches"][number]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_49 in Exclude<keyof I_1["matches"][number]["broadcaster_channels"], keyof {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[]>]: never; };
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            } & {
                custom_game_id?: string;
                map_name?: string;
            } & { [K_50 in Exclude<keyof I_1["matches"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[] & ({
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & { [K_51 in Exclude<keyof I_1["matches"][number]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_52 in Exclude<keyof I_1["matches"][number]["coaches"], keyof {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[]>]: never; };
        } & { [K_53 in Exclude<keyof I_1["matches"][number], keyof CMsgDOTAMatch>]: never; })[] & { [K_54 in Exclude<keyof I_1["matches"], keyof {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        }[]>]: never; };
        series_id?: number;
        series_type?: number;
    } & { [K_55 in Exclude<keyof I_1, keyof CMsgDOTARequestMatchesResponse_Series>]: never; }>(object: I_1): CMsgDOTARequestMatchesResponse_Series;
};
export declare const CMsgDOTAPopup: {
    fromJSON(object: any): CMsgDOTAPopup;
    toJSON(message: CMsgDOTAPopup): unknown;
    create<I extends {
        id?: CMsgDOTAPopup_PopupID;
        custom_text?: string;
        int_data?: number;
        popup_data?: string;
        loc_token_header?: string;
        loc_token_msg?: string;
        var_names?: string[];
        var_values?: string[];
        debug_text?: string;
    } & {
        id?: CMsgDOTAPopup_PopupID;
        custom_text?: string;
        int_data?: number;
        popup_data?: string;
        loc_token_header?: string;
        loc_token_msg?: string;
        var_names?: string[] & string[] & { [K in Exclude<keyof I["var_names"], keyof string[]>]: never; };
        var_values?: string[] & string[] & { [K_1 in Exclude<keyof I["var_values"], keyof string[]>]: never; };
        debug_text?: string;
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAPopup>]: never; }>(base?: I): CMsgDOTAPopup;
    fromPartial<I_1 extends {
        id?: CMsgDOTAPopup_PopupID;
        custom_text?: string;
        int_data?: number;
        popup_data?: string;
        loc_token_header?: string;
        loc_token_msg?: string;
        var_names?: string[];
        var_values?: string[];
        debug_text?: string;
    } & {
        id?: CMsgDOTAPopup_PopupID;
        custom_text?: string;
        int_data?: number;
        popup_data?: string;
        loc_token_header?: string;
        loc_token_msg?: string;
        var_names?: string[] & string[] & { [K_3 in Exclude<keyof I_1["var_names"], keyof string[]>]: never; };
        var_values?: string[] & string[] & { [K_4 in Exclude<keyof I_1["var_values"], keyof string[]>]: never; };
        debug_text?: string;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAPopup>]: never; }>(object: I_1): CMsgDOTAPopup;
};
export declare const CMsgDOTAReportsRemainingRequest: {
    fromJSON(_: any): CMsgDOTAReportsRemainingRequest;
    toJSON(_: CMsgDOTAReportsRemainingRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgDOTAReportsRemainingRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgDOTAReportsRemainingRequest;
};
export declare const CMsgDOTAReportsRemainingResponse: {
    fromJSON(object: any): CMsgDOTAReportsRemainingResponse;
    toJSON(message: CMsgDOTAReportsRemainingResponse): unknown;
    create<I extends {
        num_positive_reports_remaining?: number;
        num_negative_reports_remaining?: number;
        num_positive_reports_total?: number;
        num_negative_reports_total?: number;
        num_comms_reports_remaining?: number;
        num_comms_reports_total?: number;
    } & {
        num_positive_reports_remaining?: number;
        num_negative_reports_remaining?: number;
        num_positive_reports_total?: number;
        num_negative_reports_total?: number;
        num_comms_reports_remaining?: number;
        num_comms_reports_total?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAReportsRemainingResponse>]: never; }>(base?: I): CMsgDOTAReportsRemainingResponse;
    fromPartial<I_1 extends {
        num_positive_reports_remaining?: number;
        num_negative_reports_remaining?: number;
        num_positive_reports_total?: number;
        num_negative_reports_total?: number;
        num_comms_reports_remaining?: number;
        num_comms_reports_total?: number;
    } & {
        num_positive_reports_remaining?: number;
        num_negative_reports_remaining?: number;
        num_positive_reports_total?: number;
        num_negative_reports_total?: number;
        num_comms_reports_remaining?: number;
        num_comms_reports_total?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAReportsRemainingResponse>]: never; }>(object: I_1): CMsgDOTAReportsRemainingResponse;
};
export declare const CMsgDOTASubmitPlayerReport: {
    fromJSON(object: any): CMsgDOTASubmitPlayerReport;
    toJSON(message: CMsgDOTASubmitPlayerReport): unknown;
    create<I extends {
        target_account_id?: number;
        report_flags?: number;
        lobby_id?: string;
        comment?: string;
    } & {
        target_account_id?: number;
        report_flags?: number;
        lobby_id?: string;
        comment?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTASubmitPlayerReport>]: never; }>(base?: I): CMsgDOTASubmitPlayerReport;
    fromPartial<I_1 extends {
        target_account_id?: number;
        report_flags?: number;
        lobby_id?: string;
        comment?: string;
    } & {
        target_account_id?: number;
        report_flags?: number;
        lobby_id?: string;
        comment?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTASubmitPlayerReport>]: never; }>(object: I_1): CMsgDOTASubmitPlayerReport;
};
export declare const CMsgDOTASubmitPlayerReportResponse: {
    fromJSON(object: any): CMsgDOTASubmitPlayerReportResponse;
    toJSON(message: CMsgDOTASubmitPlayerReportResponse): unknown;
    create<I extends {
        target_account_id?: number;
        report_flags?: number;
        debug_message?: string;
        enum_result?: CMsgDOTASubmitPlayerReportResponse_EResult;
    } & {
        target_account_id?: number;
        report_flags?: number;
        debug_message?: string;
        enum_result?: CMsgDOTASubmitPlayerReportResponse_EResult;
    } & { [K in Exclude<keyof I, keyof CMsgDOTASubmitPlayerReportResponse>]: never; }>(base?: I): CMsgDOTASubmitPlayerReportResponse;
    fromPartial<I_1 extends {
        target_account_id?: number;
        report_flags?: number;
        debug_message?: string;
        enum_result?: CMsgDOTASubmitPlayerReportResponse_EResult;
    } & {
        target_account_id?: number;
        report_flags?: number;
        debug_message?: string;
        enum_result?: CMsgDOTASubmitPlayerReportResponse_EResult;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTASubmitPlayerReportResponse>]: never; }>(object: I_1): CMsgDOTASubmitPlayerReportResponse;
};
export declare const CMsgDOTASubmitPlayerAvoidRequest: {
    fromJSON(object: any): CMsgDOTASubmitPlayerAvoidRequest;
    toJSON(message: CMsgDOTASubmitPlayerAvoidRequest): unknown;
    create<I extends {
        target_account_id?: number;
        lobby_id?: string;
        user_note?: string;
    } & {
        target_account_id?: number;
        lobby_id?: string;
        user_note?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTASubmitPlayerAvoidRequest>]: never; }>(base?: I): CMsgDOTASubmitPlayerAvoidRequest;
    fromPartial<I_1 extends {
        target_account_id?: number;
        lobby_id?: string;
        user_note?: string;
    } & {
        target_account_id?: number;
        lobby_id?: string;
        user_note?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTASubmitPlayerAvoidRequest>]: never; }>(object: I_1): CMsgDOTASubmitPlayerAvoidRequest;
};
export declare const CMsgDOTASubmitPlayerAvoidRequestResponse: {
    fromJSON(object: any): CMsgDOTASubmitPlayerAvoidRequestResponse;
    toJSON(message: CMsgDOTASubmitPlayerAvoidRequestResponse): unknown;
    create<I extends {
        target_account_id?: number;
        result?: number;
        debug_message?: string;
    } & {
        target_account_id?: number;
        result?: number;
        debug_message?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTASubmitPlayerAvoidRequestResponse>]: never; }>(base?: I): CMsgDOTASubmitPlayerAvoidRequestResponse;
    fromPartial<I_1 extends {
        target_account_id?: number;
        result?: number;
        debug_message?: string;
    } & {
        target_account_id?: number;
        result?: number;
        debug_message?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTASubmitPlayerAvoidRequestResponse>]: never; }>(object: I_1): CMsgDOTASubmitPlayerAvoidRequestResponse;
};
export declare const CMsgDOTASubmitLobbyMVPVote: {
    fromJSON(object: any): CMsgDOTASubmitLobbyMVPVote;
    toJSON(message: CMsgDOTASubmitLobbyMVPVote): unknown;
    create<I extends {
        target_account_id?: number;
    } & {
        target_account_id?: number;
    } & { [K in Exclude<keyof I, "target_account_id">]: never; }>(base?: I): CMsgDOTASubmitLobbyMVPVote;
    fromPartial<I_1 extends {
        target_account_id?: number;
    } & {
        target_account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "target_account_id">]: never; }>(object: I_1): CMsgDOTASubmitLobbyMVPVote;
};
export declare const CMsgDOTASubmitLobbyMVPVoteResponse: {
    fromJSON(object: any): CMsgDOTASubmitLobbyMVPVoteResponse;
    toJSON(message: CMsgDOTASubmitLobbyMVPVoteResponse): unknown;
    create<I extends {
        target_account_id?: number;
        eresult?: number;
    } & {
        target_account_id?: number;
        eresult?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTASubmitLobbyMVPVoteResponse>]: never; }>(base?: I): CMsgDOTASubmitLobbyMVPVoteResponse;
    fromPartial<I_1 extends {
        target_account_id?: number;
        eresult?: number;
    } & {
        target_account_id?: number;
        eresult?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTASubmitLobbyMVPVoteResponse>]: never; }>(object: I_1): CMsgDOTASubmitLobbyMVPVoteResponse;
};
export declare const CMsgDOTALobbyMVPAwarded: {
    fromJSON(object: any): CMsgDOTALobbyMVPAwarded;
    toJSON(message: CMsgDOTALobbyMVPAwarded): unknown;
    create<I extends {
        match_id?: string;
        mvp_account_id?: number[];
    } & {
        match_id?: string;
        mvp_account_id?: number[] & number[] & { [K in Exclude<keyof I["mvp_account_id"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgDOTALobbyMVPAwarded>]: never; }>(base?: I): CMsgDOTALobbyMVPAwarded;
    fromPartial<I_1 extends {
        match_id?: string;
        mvp_account_id?: number[];
    } & {
        match_id?: string;
        mvp_account_id?: number[] & number[] & { [K_2 in Exclude<keyof I_1["mvp_account_id"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgDOTALobbyMVPAwarded>]: never; }>(object: I_1): CMsgDOTALobbyMVPAwarded;
};
export declare const CMsgDOTAKickedFromMatchmakingQueue: {
    fromJSON(object: any): CMsgDOTAKickedFromMatchmakingQueue;
    toJSON(message: CMsgDOTAKickedFromMatchmakingQueue): unknown;
    create<I extends {
        match_type?: MatchType;
    } & {
        match_type?: MatchType;
    } & { [K in Exclude<keyof I, "match_type">]: never; }>(base?: I): CMsgDOTAKickedFromMatchmakingQueue;
    fromPartial<I_1 extends {
        match_type?: MatchType;
    } & {
        match_type?: MatchType;
    } & { [K_1 in Exclude<keyof I_1, "match_type">]: never; }>(object: I_1): CMsgDOTAKickedFromMatchmakingQueue;
};
export declare const CMsgGCMatchDetailsRequest: {
    fromJSON(object: any): CMsgGCMatchDetailsRequest;
    toJSON(message: CMsgGCMatchDetailsRequest): unknown;
    create<I extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K in Exclude<keyof I, "match_id">]: never; }>(base?: I): CMsgGCMatchDetailsRequest;
    fromPartial<I_1 extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "match_id">]: never; }>(object: I_1): CMsgGCMatchDetailsRequest;
};
export declare const CMsgGCMatchDetailsResponse: {
    fromJSON(object: any): CMsgGCMatchDetailsResponse;
    toJSON(message: CMsgGCMatchDetailsResponse): unknown;
    create<I extends {
        result?: number;
        match?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        };
        vote?: DOTAMatchVote;
    } & {
        result?: number;
        match?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        } & {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[] & ({
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K in Exclude<keyof I["match"]["players"][number]["ability_upgrades"][number], keyof import("./dota_gcmessages_common").CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_1 in Exclude<keyof I["match"]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_2 in Exclude<keyof I["match"]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_3 in Exclude<keyof I["match"]["players"][number]["additional_units_inventory"][number], keyof import("./dota_gcmessages_common").CMatchAdditionalUnitInventory>]: never; })[] & { [K_4 in Exclude<keyof I["match"]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_5 in Exclude<keyof I["match"]["players"][number]["permanent_buffs"][number], keyof import("./dota_gcmessages_common").CMatchPlayerPermanentBuff>]: never; })[] & { [K_6 in Exclude<keyof I["match"]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_7 in Exclude<keyof I["match"]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_8 in Exclude<keyof I["match"]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_9 in Exclude<keyof I["match"]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_10 in Exclude<keyof I["match"]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_11 in Exclude<keyof I["match"]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & { [K_12 in Exclude<keyof I["match"]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_13 in Exclude<keyof I["match"]["players"], keyof {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[]>]: never; };
            match_id?: string;
            tower_status?: number[] & number[] & { [K_14 in Exclude<keyof I["match"]["tower_status"], keyof number[]>]: never; };
            barracks_status?: number[] & number[] & { [K_15 in Exclude<keyof I["match"]["barracks_status"], keyof number[]>]: never; };
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[] & ({
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & { [K_16 in Exclude<keyof I["match"]["picks_bans"][number], keyof import("./dota_gcmessages_common").CMatchHeroSelectEvent>]: never; })[] & { [K_17 in Exclude<keyof I["match"]["picks_bans"], keyof {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[]>]: never; };
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[] & ({
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            } & {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[] & ({
                    account_id?: number;
                    name?: string;
                } & {
                    account_id?: number;
                    name?: string;
                } & { [K_18 in Exclude<keyof I["match"]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_19 in Exclude<keyof I["match"]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                    account_id?: number;
                    name?: string;
                }[]>]: never; };
                language_code?: string;
            } & { [K_20 in Exclude<keyof I["match"]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_21 in Exclude<keyof I["match"]["broadcaster_channels"], keyof {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[]>]: never; };
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            } & {
                custom_game_id?: string;
                map_name?: string;
            } & { [K_22 in Exclude<keyof I["match"]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[] & ({
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & { [K_23 in Exclude<keyof I["match"]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_24 in Exclude<keyof I["match"]["coaches"], keyof {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[]>]: never; };
        } & { [K_25 in Exclude<keyof I["match"], keyof CMsgDOTAMatch>]: never; };
        vote?: DOTAMatchVote;
    } & { [K_26 in Exclude<keyof I, keyof CMsgGCMatchDetailsResponse>]: never; }>(base?: I): CMsgGCMatchDetailsResponse;
    fromPartial<I_1 extends {
        result?: number;
        match?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        };
        vote?: DOTAMatchVote;
    } & {
        result?: number;
        match?: {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[];
            match_id?: string;
            tower_status?: number[];
            barracks_status?: number[];
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[];
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[];
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[];
        } & {
            duration?: number;
            starttime?: number;
            players?: {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[] & ({
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[] & ({
                    ability?: number;
                    time?: number;
                } & {
                    ability?: number;
                    time?: number;
                } & { [K_27 in Exclude<keyof I_1["match"]["players"][number]["ability_upgrades"][number], keyof import("./dota_gcmessages_common").CMatchPlayerAbilityUpgrade>]: never; })[] & { [K_28 in Exclude<keyof I_1["match"]["players"][number]["ability_upgrades"], keyof {
                    ability?: number;
                    time?: number;
                }[]>]: never; };
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[] & ({
                    unit_name?: string;
                    items?: number[];
                } & {
                    unit_name?: string;
                    items?: number[] & number[] & { [K_29 in Exclude<keyof I_1["match"]["players"][number]["additional_units_inventory"][number]["items"], keyof number[]>]: never; };
                } & { [K_30 in Exclude<keyof I_1["match"]["players"][number]["additional_units_inventory"][number], keyof import("./dota_gcmessages_common").CMatchAdditionalUnitInventory>]: never; })[] & { [K_31 in Exclude<keyof I_1["match"]["players"][number]["additional_units_inventory"], keyof {
                    unit_name?: string;
                    items?: number[];
                }[]>]: never; };
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[] & ({
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                } & { [K_32 in Exclude<keyof I_1["match"]["players"][number]["permanent_buffs"][number], keyof import("./dota_gcmessages_common").CMatchPlayerPermanentBuff>]: never; })[] & { [K_33 in Exclude<keyof I_1["match"]["players"][number]["permanent_buffs"], keyof {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[]>]: never; };
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                } & {
                    dota_team?: number;
                    winner?: boolean;
                } & { [K_34 in Exclude<keyof I_1["match"]["players"][number]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_CustomGameData>]: never; };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_35 in Exclude<keyof I_1["match"]["players"][number]["hero_damage_received"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_36 in Exclude<keyof I_1["match"]["players"][number]["hero_damage_received"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[] & ({
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                } & { [K_37 in Exclude<keyof I_1["match"]["players"][number]["hero_damage_dealt"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageReceived>]: never; })[] & { [K_38 in Exclude<keyof I_1["match"]["players"][number]["hero_damage_dealt"], keyof {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[]>]: never; };
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            } & { [K_39 in Exclude<keyof I_1["match"]["players"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Player>]: never; })[] & { [K_40 in Exclude<keyof I_1["match"]["players"], keyof {
                account_id?: number;
                player_slot?: number;
                hero_id?: number;
                item_0?: number;
                item_1?: number;
                item_2?: number;
                item_3?: number;
                item_4?: number;
                item_5?: number;
                item_6?: number;
                item_7?: number;
                item_8?: number;
                item_9?: number;
                expected_team_contribution?: number;
                scaled_metric?: number;
                previous_rank?: number;
                rank_change?: number;
                mmr_type?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
                leaver_status?: number;
                gold?: number;
                last_hits?: number;
                denies?: number;
                gold_per_min?: number;
                xp_per_min?: number;
                gold_spent?: number;
                hero_damage?: number;
                tower_damage?: number;
                hero_healing?: number;
                level?: number;
                time_last_seen?: number;
                player_name?: string;
                support_ability_value?: number;
                feeding_detected?: boolean;
                search_rank?: number;
                search_rank_uncertainty?: number;
                rank_uncertainty_change?: number;
                hero_play_count?: number;
                party_id?: string;
                scaled_hero_damage?: number;
                scaled_tower_damage?: number;
                scaled_hero_healing?: number;
                scaled_kills?: number;
                scaled_deaths?: number;
                scaled_assists?: number;
                claimed_farm_gold?: number;
                support_gold?: number;
                claimed_denies?: number;
                claimed_misses?: number;
                misses?: number;
                ability_upgrades?: {
                    ability?: number;
                    time?: number;
                }[];
                additional_units_inventory?: {
                    unit_name?: string;
                    items?: number[];
                }[];
                permanent_buffs?: {
                    permanent_buff?: number;
                    stack_count?: number;
                    grant_time?: number;
                }[];
                pro_name?: string;
                real_name?: string;
                custom_game_data?: {
                    dota_team?: number;
                    winner?: boolean;
                };
                active_plus_subscription?: boolean;
                net_worth?: number;
                bot_difficulty?: number;
                hero_pick_order?: number;
                hero_was_randomed?: boolean;
                hero_was_dota_plus_suggestion?: boolean;
                hero_damage_received?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                hero_damage_dealt?: {
                    pre_reduction?: number;
                    post_reduction?: number;
                    damage_type?: import("./dota_gcmessages_common").CMsgDOTAMatch_Player_HeroDamageType;
                }[];
                seconds_dead?: number;
                gold_lost_to_death?: number;
                lane_selection_flags?: number;
                bounty_runes?: number;
                outposts_captured?: number;
                team_number?: import("./dota_shared_enums").DOTA_GC_TEAM;
                team_slot?: number;
            }[]>]: never; };
            match_id?: string;
            tower_status?: number[] & number[] & { [K_41 in Exclude<keyof I_1["match"]["tower_status"], keyof number[]>]: never; };
            barracks_status?: number[] & number[] & { [K_42 in Exclude<keyof I_1["match"]["barracks_status"], keyof number[]>]: never; };
            cluster?: number;
            first_blood_time?: number;
            replay_salt?: number;
            server_ip?: number;
            server_port?: number;
            lobby_type?: number;
            human_players?: number;
            average_skill?: number;
            game_balance?: number;
            radiant_team_id?: number;
            dire_team_id?: number;
            leagueid?: number;
            radiant_team_name?: string;
            dire_team_name?: string;
            radiant_team_logo?: string;
            dire_team_logo?: string;
            radiant_team_logo_url?: string;
            dire_team_logo_url?: string;
            radiant_team_complete?: number;
            dire_team_complete?: number;
            positive_votes?: number;
            negative_votes?: number;
            game_mode?: DOTA_GameMode;
            picks_bans?: {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[] & ({
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            } & { [K_43 in Exclude<keyof I_1["match"]["picks_bans"][number], keyof import("./dota_gcmessages_common").CMatchHeroSelectEvent>]: never; })[] & { [K_44 in Exclude<keyof I_1["match"]["picks_bans"], keyof {
                is_pick?: boolean;
                team?: number;
                hero_id?: number;
            }[]>]: never; };
            match_seq_num?: string;
            replay_state?: import("./dota_gcmessages_common").CMsgDOTAMatch_ReplayState;
            radiant_guild_id?: number;
            dire_guild_id?: number;
            radiant_team_tag?: string;
            dire_team_tag?: string;
            series_id?: number;
            series_type?: number;
            broadcaster_channels?: {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[] & ({
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            } & {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[] & ({
                    account_id?: number;
                    name?: string;
                } & {
                    account_id?: number;
                    name?: string;
                } & { [K_45 in Exclude<keyof I_1["match"]["broadcaster_channels"][number]["broadcaster_infos"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterInfo>]: never; })[] & { [K_46 in Exclude<keyof I_1["match"]["broadcaster_channels"][number]["broadcaster_infos"], keyof {
                    account_id?: number;
                    name?: string;
                }[]>]: never; };
                language_code?: string;
            } & { [K_47 in Exclude<keyof I_1["match"]["broadcaster_channels"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_BroadcasterChannel>]: never; })[] & { [K_48 in Exclude<keyof I_1["match"]["broadcaster_channels"], keyof {
                country_code?: string;
                description?: string;
                broadcaster_infos?: {
                    account_id?: number;
                    name?: string;
                }[];
                language_code?: string;
            }[]>]: never; };
            engine?: number;
            custom_game_data?: {
                custom_game_id?: string;
                map_name?: string;
            } & {
                custom_game_id?: string;
                map_name?: string;
            } & { [K_49 in Exclude<keyof I_1["match"]["custom_game_data"], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_CustomGameData>]: never; };
            match_flags?: number;
            private_metadata_key?: number;
            radiant_team_score?: number;
            dire_team_score?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            tournament_id?: number;
            tournament_round?: number;
            pre_game_duration?: number;
            coaches?: {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[] & ({
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            } & { [K_50 in Exclude<keyof I_1["match"]["coaches"][number], keyof import("./dota_gcmessages_common").CMsgDOTAMatch_Coach>]: never; })[] & { [K_51 in Exclude<keyof I_1["match"]["coaches"], keyof {
                account_id?: number;
                coach_name?: string;
                coach_rating?: number;
                coach_team?: number;
                coach_party_id?: string;
                is_private_coach?: boolean;
            }[]>]: never; };
        } & { [K_52 in Exclude<keyof I_1["match"], keyof CMsgDOTAMatch>]: never; };
        vote?: DOTAMatchVote;
    } & { [K_53 in Exclude<keyof I_1, keyof CMsgGCMatchDetailsResponse>]: never; }>(object: I_1): CMsgGCMatchDetailsResponse;
};
export declare const CMsgDOTAProfileTickets: {
    fromJSON(object: any): CMsgDOTAProfileTickets;
    toJSON(message: CMsgDOTAProfileTickets): unknown;
    create<I extends {
        result?: number;
        account_id?: number;
        league_passes?: {
            league_id?: number;
            item_def?: number;
        }[];
    } & {
        result?: number;
        account_id?: number;
        league_passes?: {
            league_id?: number;
            item_def?: number;
        }[] & ({
            league_id?: number;
            item_def?: number;
        } & {
            league_id?: number;
            item_def?: number;
        } & { [K in Exclude<keyof I["league_passes"][number], keyof CMsgDOTAProfileTickets_LeaguePass>]: never; })[] & { [K_1 in Exclude<keyof I["league_passes"], keyof {
            league_id?: number;
            item_def?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAProfileTickets>]: never; }>(base?: I): CMsgDOTAProfileTickets;
    fromPartial<I_1 extends {
        result?: number;
        account_id?: number;
        league_passes?: {
            league_id?: number;
            item_def?: number;
        }[];
    } & {
        result?: number;
        account_id?: number;
        league_passes?: {
            league_id?: number;
            item_def?: number;
        }[] & ({
            league_id?: number;
            item_def?: number;
        } & {
            league_id?: number;
            item_def?: number;
        } & { [K_3 in Exclude<keyof I_1["league_passes"][number], keyof CMsgDOTAProfileTickets_LeaguePass>]: never; })[] & { [K_4 in Exclude<keyof I_1["league_passes"], keyof {
            league_id?: number;
            item_def?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAProfileTickets>]: never; }>(object: I_1): CMsgDOTAProfileTickets;
};
export declare const CMsgDOTAProfileTickets_LeaguePass: {
    fromJSON(object: any): CMsgDOTAProfileTickets_LeaguePass;
    toJSON(message: CMsgDOTAProfileTickets_LeaguePass): unknown;
    create<I extends {
        league_id?: number;
        item_def?: number;
    } & {
        league_id?: number;
        item_def?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAProfileTickets_LeaguePass>]: never; }>(base?: I): CMsgDOTAProfileTickets_LeaguePass;
    fromPartial<I_1 extends {
        league_id?: number;
        item_def?: number;
    } & {
        league_id?: number;
        item_def?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAProfileTickets_LeaguePass>]: never; }>(object: I_1): CMsgDOTAProfileTickets_LeaguePass;
};
export declare const CMsgClientToGCGetProfileTickets: {
    fromJSON(object: any): CMsgClientToGCGetProfileTickets;
    toJSON(message: CMsgClientToGCGetProfileTickets): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgClientToGCGetProfileTickets;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgClientToGCGetProfileTickets;
};
export declare const CMsgGCToClientPartySearchInvites: {
    fromJSON(object: any): CMsgGCToClientPartySearchInvites;
    toJSON(message: CMsgGCToClientPartySearchInvites): unknown;
    create<I extends {
        invites?: {
            account_id?: number;
        }[];
    } & {
        invites?: {
            account_id?: number;
        }[] & ({
            account_id?: number;
        } & {
            account_id?: number;
        } & { [K in Exclude<keyof I["invites"][number], "account_id">]: never; })[] & { [K_1 in Exclude<keyof I["invites"], keyof {
            account_id?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "invites">]: never; }>(base?: I): CMsgGCToClientPartySearchInvites;
    fromPartial<I_1 extends {
        invites?: {
            account_id?: number;
        }[];
    } & {
        invites?: {
            account_id?: number;
        }[] & ({
            account_id?: number;
        } & {
            account_id?: number;
        } & { [K_3 in Exclude<keyof I_1["invites"][number], "account_id">]: never; })[] & { [K_4 in Exclude<keyof I_1["invites"], keyof {
            account_id?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "invites">]: never; }>(object: I_1): CMsgGCToClientPartySearchInvites;
};
export declare const CMsgDOTAWelcome: {
    fromJSON(object: any): CMsgDOTAWelcome;
    toJSON(message: CMsgDOTAWelcome): unknown;
    create<I extends {
        store_item_hash?: number;
        timeplayedconsecutively?: number;
        allow_3rd_party_match_history?: boolean;
        last_ip_address?: number;
        profile_private?: boolean;
        currency?: number;
        should_request_player_origin?: boolean;
        gc_socache_file_version?: number;
        is_perfect_world_test_account?: boolean;
        extra_messages?: {
            id?: number;
            contents?: string;
        }[];
        minimum_recent_item_id?: string;
        active_event?: EEvent;
        additional_user_message?: number;
        custom_game_whitelist_version?: number;
        party_search_friend_invites?: {
            invites?: {
                account_id?: number;
            }[];
        };
        remaining_playtime?: number;
        disable_guild_persona_info?: boolean;
        extra_message_blocks?: {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[];
    } & {
        store_item_hash?: number;
        timeplayedconsecutively?: number;
        allow_3rd_party_match_history?: boolean;
        last_ip_address?: number;
        profile_private?: boolean;
        currency?: number;
        should_request_player_origin?: boolean;
        gc_socache_file_version?: number;
        is_perfect_world_test_account?: boolean;
        extra_messages?: {
            id?: number;
            contents?: string;
        }[] & ({
            id?: number;
            contents?: string;
        } & {
            id?: number;
            contents?: string;
        } & { [K in Exclude<keyof I["extra_messages"][number], keyof CMsgDOTAWelcome_CExtraMsg>]: never; })[] & { [K_1 in Exclude<keyof I["extra_messages"], keyof {
            id?: number;
            contents?: string;
        }[]>]: never; };
        minimum_recent_item_id?: string;
        active_event?: EEvent;
        additional_user_message?: number;
        custom_game_whitelist_version?: number;
        party_search_friend_invites?: {
            invites?: {
                account_id?: number;
            }[];
        } & {
            invites?: {
                account_id?: number;
            }[] & ({
                account_id?: number;
            } & {
                account_id?: number;
            } & { [K_2 in Exclude<keyof I["party_search_friend_invites"]["invites"][number], "account_id">]: never; })[] & { [K_3 in Exclude<keyof I["party_search_friend_invites"]["invites"], keyof {
                account_id?: number;
            }[]>]: never; };
        } & { [K_4 in Exclude<keyof I["party_search_friend_invites"], "invites">]: never; };
        remaining_playtime?: number;
        disable_guild_persona_info?: boolean;
        extra_message_blocks?: {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[] & ({
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        } & {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        } & { [K_5 in Exclude<keyof I["extra_message_blocks"][number], keyof CExtraMsgBlock>]: never; })[] & { [K_6 in Exclude<keyof I["extra_message_blocks"], keyof {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I, keyof CMsgDOTAWelcome>]: never; }>(base?: I): CMsgDOTAWelcome;
    fromPartial<I_1 extends {
        store_item_hash?: number;
        timeplayedconsecutively?: number;
        allow_3rd_party_match_history?: boolean;
        last_ip_address?: number;
        profile_private?: boolean;
        currency?: number;
        should_request_player_origin?: boolean;
        gc_socache_file_version?: number;
        is_perfect_world_test_account?: boolean;
        extra_messages?: {
            id?: number;
            contents?: string;
        }[];
        minimum_recent_item_id?: string;
        active_event?: EEvent;
        additional_user_message?: number;
        custom_game_whitelist_version?: number;
        party_search_friend_invites?: {
            invites?: {
                account_id?: number;
            }[];
        };
        remaining_playtime?: number;
        disable_guild_persona_info?: boolean;
        extra_message_blocks?: {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[];
    } & {
        store_item_hash?: number;
        timeplayedconsecutively?: number;
        allow_3rd_party_match_history?: boolean;
        last_ip_address?: number;
        profile_private?: boolean;
        currency?: number;
        should_request_player_origin?: boolean;
        gc_socache_file_version?: number;
        is_perfect_world_test_account?: boolean;
        extra_messages?: {
            id?: number;
            contents?: string;
        }[] & ({
            id?: number;
            contents?: string;
        } & {
            id?: number;
            contents?: string;
        } & { [K_8 in Exclude<keyof I_1["extra_messages"][number], keyof CMsgDOTAWelcome_CExtraMsg>]: never; })[] & { [K_9 in Exclude<keyof I_1["extra_messages"], keyof {
            id?: number;
            contents?: string;
        }[]>]: never; };
        minimum_recent_item_id?: string;
        active_event?: EEvent;
        additional_user_message?: number;
        custom_game_whitelist_version?: number;
        party_search_friend_invites?: {
            invites?: {
                account_id?: number;
            }[];
        } & {
            invites?: {
                account_id?: number;
            }[] & ({
                account_id?: number;
            } & {
                account_id?: number;
            } & { [K_10 in Exclude<keyof I_1["party_search_friend_invites"]["invites"][number], "account_id">]: never; })[] & { [K_11 in Exclude<keyof I_1["party_search_friend_invites"]["invites"], keyof {
                account_id?: number;
            }[]>]: never; };
        } & { [K_12 in Exclude<keyof I_1["party_search_friend_invites"], "invites">]: never; };
        remaining_playtime?: number;
        disable_guild_persona_info?: boolean;
        extra_message_blocks?: {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[] & ({
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        } & {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        } & { [K_13 in Exclude<keyof I_1["extra_message_blocks"][number], keyof CExtraMsgBlock>]: never; })[] & { [K_14 in Exclude<keyof I_1["extra_message_blocks"], keyof {
            msg_type?: number;
            contents?: string;
            msg_key?: string;
            is_compressed?: boolean;
        }[]>]: never; };
    } & { [K_15 in Exclude<keyof I_1, keyof CMsgDOTAWelcome>]: never; }>(object: I_1): CMsgDOTAWelcome;
};
export declare const CMsgDOTAWelcome_CExtraMsg: {
    fromJSON(object: any): CMsgDOTAWelcome_CExtraMsg;
    toJSON(message: CMsgDOTAWelcome_CExtraMsg): unknown;
    create<I extends {
        id?: number;
        contents?: string;
    } & {
        id?: number;
        contents?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAWelcome_CExtraMsg>]: never; }>(base?: I): CMsgDOTAWelcome_CExtraMsg;
    fromPartial<I_1 extends {
        id?: number;
        contents?: string;
    } & {
        id?: number;
        contents?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAWelcome_CExtraMsg>]: never; }>(object: I_1): CMsgDOTAWelcome_CExtraMsg;
};
export declare const CSODOTAGameHeroFavorites: {
    fromJSON(object: any): CSODOTAGameHeroFavorites;
    toJSON(message: CSODOTAGameHeroFavorites): unknown;
    create<I extends {
        account_id?: number;
        hero_id?: number;
    } & {
        account_id?: number;
        hero_id?: number;
    } & { [K in Exclude<keyof I, keyof CSODOTAGameHeroFavorites>]: never; }>(base?: I): CSODOTAGameHeroFavorites;
    fromPartial<I_1 extends {
        account_id?: number;
        hero_id?: number;
    } & {
        account_id?: number;
        hero_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CSODOTAGameHeroFavorites>]: never; }>(object: I_1): CSODOTAGameHeroFavorites;
};
export declare const CMsgDOTAMatchVotes: {
    fromJSON(object: any): CMsgDOTAMatchVotes;
    toJSON(message: CMsgDOTAMatchVotes): unknown;
    create<I extends {
        match_id?: string;
        votes?: {
            account_id?: number;
            vote?: number;
        }[];
    } & {
        match_id?: string;
        votes?: {
            account_id?: number;
            vote?: number;
        }[] & ({
            account_id?: number;
            vote?: number;
        } & {
            account_id?: number;
            vote?: number;
        } & { [K in Exclude<keyof I["votes"][number], keyof CMsgDOTAMatchVotes_PlayerVote>]: never; })[] & { [K_1 in Exclude<keyof I["votes"], keyof {
            account_id?: number;
            vote?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAMatchVotes>]: never; }>(base?: I): CMsgDOTAMatchVotes;
    fromPartial<I_1 extends {
        match_id?: string;
        votes?: {
            account_id?: number;
            vote?: number;
        }[];
    } & {
        match_id?: string;
        votes?: {
            account_id?: number;
            vote?: number;
        }[] & ({
            account_id?: number;
            vote?: number;
        } & {
            account_id?: number;
            vote?: number;
        } & { [K_3 in Exclude<keyof I_1["votes"][number], keyof CMsgDOTAMatchVotes_PlayerVote>]: never; })[] & { [K_4 in Exclude<keyof I_1["votes"], keyof {
            account_id?: number;
            vote?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAMatchVotes>]: never; }>(object: I_1): CMsgDOTAMatchVotes;
};
export declare const CMsgDOTAMatchVotes_PlayerVote: {
    fromJSON(object: any): CMsgDOTAMatchVotes_PlayerVote;
    toJSON(message: CMsgDOTAMatchVotes_PlayerVote): unknown;
    create<I extends {
        account_id?: number;
        vote?: number;
    } & {
        account_id?: number;
        vote?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAMatchVotes_PlayerVote>]: never; }>(base?: I): CMsgDOTAMatchVotes_PlayerVote;
    fromPartial<I_1 extends {
        account_id?: number;
        vote?: number;
    } & {
        account_id?: number;
        vote?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAMatchVotes_PlayerVote>]: never; }>(object: I_1): CMsgDOTAMatchVotes_PlayerVote;
};
export declare const CMsgMatchmakingMatchGroupInfo: {
    fromJSON(object: any): CMsgMatchmakingMatchGroupInfo;
    toJSON(message: CMsgMatchmakingMatchGroupInfo): unknown;
    create<I extends {
        players_searching?: number;
        auto_region_select_ping_penalty?: number;
        auto_region_select_ping_penalty_custom?: number;
        status?: EMatchGroupServerStatus;
    } & {
        players_searching?: number;
        auto_region_select_ping_penalty?: number;
        auto_region_select_ping_penalty_custom?: number;
        status?: EMatchGroupServerStatus;
    } & { [K in Exclude<keyof I, keyof CMsgMatchmakingMatchGroupInfo>]: never; }>(base?: I): CMsgMatchmakingMatchGroupInfo;
    fromPartial<I_1 extends {
        players_searching?: number;
        auto_region_select_ping_penalty?: number;
        auto_region_select_ping_penalty_custom?: number;
        status?: EMatchGroupServerStatus;
    } & {
        players_searching?: number;
        auto_region_select_ping_penalty?: number;
        auto_region_select_ping_penalty_custom?: number;
        status?: EMatchGroupServerStatus;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgMatchmakingMatchGroupInfo>]: never; }>(object: I_1): CMsgMatchmakingMatchGroupInfo;
};
export declare const CMsgDOTAMatchmakingStatsRequest: {
    fromJSON(_: any): CMsgDOTAMatchmakingStatsRequest;
    toJSON(_: CMsgDOTAMatchmakingStatsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgDOTAMatchmakingStatsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgDOTAMatchmakingStatsRequest;
};
export declare const CMsgDOTAMatchmakingStatsResponse: {
    fromJSON(object: any): CMsgDOTAMatchmakingStatsResponse;
    toJSON(message: CMsgDOTAMatchmakingStatsResponse): unknown;
    create<I extends {
        matchgroups_version?: number;
        legacy_searching_players_by_group_source2?: number[];
        match_groups?: {
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        }[];
    } & {
        matchgroups_version?: number;
        legacy_searching_players_by_group_source2?: number[] & number[] & { [K in Exclude<keyof I["legacy_searching_players_by_group_source2"], keyof number[]>]: never; };
        match_groups?: {
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        }[] & ({
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        } & {
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        } & { [K_1 in Exclude<keyof I["match_groups"][number], keyof CMsgMatchmakingMatchGroupInfo>]: never; })[] & { [K_2 in Exclude<keyof I["match_groups"], keyof {
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgDOTAMatchmakingStatsResponse>]: never; }>(base?: I): CMsgDOTAMatchmakingStatsResponse;
    fromPartial<I_1 extends {
        matchgroups_version?: number;
        legacy_searching_players_by_group_source2?: number[];
        match_groups?: {
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        }[];
    } & {
        matchgroups_version?: number;
        legacy_searching_players_by_group_source2?: number[] & number[] & { [K_4 in Exclude<keyof I_1["legacy_searching_players_by_group_source2"], keyof number[]>]: never; };
        match_groups?: {
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        }[] & ({
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        } & {
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        } & { [K_5 in Exclude<keyof I_1["match_groups"][number], keyof CMsgMatchmakingMatchGroupInfo>]: never; })[] & { [K_6 in Exclude<keyof I_1["match_groups"], keyof {
            players_searching?: number;
            auto_region_select_ping_penalty?: number;
            auto_region_select_ping_penalty_custom?: number;
            status?: EMatchGroupServerStatus;
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgDOTAMatchmakingStatsResponse>]: never; }>(object: I_1): CMsgDOTAMatchmakingStatsResponse;
};
export declare const CMsgDOTAUpdateMatchmakingStats: {
    fromJSON(object: any): CMsgDOTAUpdateMatchmakingStats;
    toJSON(message: CMsgDOTAUpdateMatchmakingStats): unknown;
    create<I extends {
        stats?: {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[];
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[];
        };
    } & {
        stats?: {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[];
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[];
        } & {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[] & number[] & { [K in Exclude<keyof I["stats"]["legacy_searching_players_by_group_source2"], keyof number[]>]: never; };
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[] & ({
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            } & {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            } & { [K_1 in Exclude<keyof I["stats"]["match_groups"][number], keyof CMsgMatchmakingMatchGroupInfo>]: never; })[] & { [K_2 in Exclude<keyof I["stats"]["match_groups"], keyof {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[]>]: never; };
        } & { [K_3 in Exclude<keyof I["stats"], keyof CMsgDOTAMatchmakingStatsResponse>]: never; };
    } & { [K_4 in Exclude<keyof I, "stats">]: never; }>(base?: I): CMsgDOTAUpdateMatchmakingStats;
    fromPartial<I_1 extends {
        stats?: {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[];
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[];
        };
    } & {
        stats?: {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[];
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[];
        } & {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[] & number[] & { [K_5 in Exclude<keyof I_1["stats"]["legacy_searching_players_by_group_source2"], keyof number[]>]: never; };
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[] & ({
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            } & {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            } & { [K_6 in Exclude<keyof I_1["stats"]["match_groups"][number], keyof CMsgMatchmakingMatchGroupInfo>]: never; })[] & { [K_7 in Exclude<keyof I_1["stats"]["match_groups"], keyof {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[]>]: never; };
        } & { [K_8 in Exclude<keyof I_1["stats"], keyof CMsgDOTAMatchmakingStatsResponse>]: never; };
    } & { [K_9 in Exclude<keyof I_1, "stats">]: never; }>(object: I_1): CMsgDOTAUpdateMatchmakingStats;
};
export declare const CMsgDOTAUpdateMatchManagementStats: {
    fromJSON(object: any): CMsgDOTAUpdateMatchManagementStats;
    toJSON(message: CMsgDOTAUpdateMatchManagementStats): unknown;
    create<I extends {
        stats?: {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[];
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[];
        };
    } & {
        stats?: {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[];
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[];
        } & {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[] & number[] & { [K in Exclude<keyof I["stats"]["legacy_searching_players_by_group_source2"], keyof number[]>]: never; };
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[] & ({
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            } & {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            } & { [K_1 in Exclude<keyof I["stats"]["match_groups"][number], keyof CMsgMatchmakingMatchGroupInfo>]: never; })[] & { [K_2 in Exclude<keyof I["stats"]["match_groups"], keyof {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[]>]: never; };
        } & { [K_3 in Exclude<keyof I["stats"], keyof CMsgDOTAMatchmakingStatsResponse>]: never; };
    } & { [K_4 in Exclude<keyof I, "stats">]: never; }>(base?: I): CMsgDOTAUpdateMatchManagementStats;
    fromPartial<I_1 extends {
        stats?: {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[];
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[];
        };
    } & {
        stats?: {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[];
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[];
        } & {
            matchgroups_version?: number;
            legacy_searching_players_by_group_source2?: number[] & number[] & { [K_5 in Exclude<keyof I_1["stats"]["legacy_searching_players_by_group_source2"], keyof number[]>]: never; };
            match_groups?: {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[] & ({
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            } & {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            } & { [K_6 in Exclude<keyof I_1["stats"]["match_groups"][number], keyof CMsgMatchmakingMatchGroupInfo>]: never; })[] & { [K_7 in Exclude<keyof I_1["stats"]["match_groups"], keyof {
                players_searching?: number;
                auto_region_select_ping_penalty?: number;
                auto_region_select_ping_penalty_custom?: number;
                status?: EMatchGroupServerStatus;
            }[]>]: never; };
        } & { [K_8 in Exclude<keyof I_1["stats"], keyof CMsgDOTAMatchmakingStatsResponse>]: never; };
    } & { [K_9 in Exclude<keyof I_1, "stats">]: never; }>(object: I_1): CMsgDOTAUpdateMatchManagementStats;
};
export declare const CMsgDOTASetMatchHistoryAccess: {
    fromJSON(object: any): CMsgDOTASetMatchHistoryAccess;
    toJSON(message: CMsgDOTASetMatchHistoryAccess): unknown;
    create<I extends {
        allow_3rd_party_match_history?: boolean;
    } & {
        allow_3rd_party_match_history?: boolean;
    } & { [K in Exclude<keyof I, "allow_3rd_party_match_history">]: never; }>(base?: I): CMsgDOTASetMatchHistoryAccess;
    fromPartial<I_1 extends {
        allow_3rd_party_match_history?: boolean;
    } & {
        allow_3rd_party_match_history?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "allow_3rd_party_match_history">]: never; }>(object: I_1): CMsgDOTASetMatchHistoryAccess;
};
export declare const CMsgDOTASetMatchHistoryAccessResponse: {
    fromJSON(object: any): CMsgDOTASetMatchHistoryAccessResponse;
    toJSON(message: CMsgDOTASetMatchHistoryAccessResponse): unknown;
    create<I extends {
        eresult?: number;
    } & {
        eresult?: number;
    } & { [K in Exclude<keyof I, "eresult">]: never; }>(base?: I): CMsgDOTASetMatchHistoryAccessResponse;
    fromPartial<I_1 extends {
        eresult?: number;
    } & {
        eresult?: number;
    } & { [K_1 in Exclude<keyof I_1, "eresult">]: never; }>(object: I_1): CMsgDOTASetMatchHistoryAccessResponse;
};
export declare const CMsgDOTANotifyAccountFlagsChange: {
    fromJSON(object: any): CMsgDOTANotifyAccountFlagsChange;
    toJSON(message: CMsgDOTANotifyAccountFlagsChange): unknown;
    create<I extends {
        accountid?: number;
        account_flags?: number;
    } & {
        accountid?: number;
        account_flags?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTANotifyAccountFlagsChange>]: never; }>(base?: I): CMsgDOTANotifyAccountFlagsChange;
    fromPartial<I_1 extends {
        accountid?: number;
        account_flags?: number;
    } & {
        accountid?: number;
        account_flags?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTANotifyAccountFlagsChange>]: never; }>(object: I_1): CMsgDOTANotifyAccountFlagsChange;
};
export declare const CMsgDOTASetProfilePrivacy: {
    fromJSON(object: any): CMsgDOTASetProfilePrivacy;
    toJSON(message: CMsgDOTASetProfilePrivacy): unknown;
    create<I extends {
        profile_private?: boolean;
    } & {
        profile_private?: boolean;
    } & { [K in Exclude<keyof I, "profile_private">]: never; }>(base?: I): CMsgDOTASetProfilePrivacy;
    fromPartial<I_1 extends {
        profile_private?: boolean;
    } & {
        profile_private?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "profile_private">]: never; }>(object: I_1): CMsgDOTASetProfilePrivacy;
};
export declare const CMsgDOTASetProfilePrivacyResponse: {
    fromJSON(object: any): CMsgDOTASetProfilePrivacyResponse;
    toJSON(message: CMsgDOTASetProfilePrivacyResponse): unknown;
    create<I extends {
        eresult?: number;
    } & {
        eresult?: number;
    } & { [K in Exclude<keyof I, "eresult">]: never; }>(base?: I): CMsgDOTASetProfilePrivacyResponse;
    fromPartial<I_1 extends {
        eresult?: number;
    } & {
        eresult?: number;
    } & { [K_1 in Exclude<keyof I_1, "eresult">]: never; }>(object: I_1): CMsgDOTASetProfilePrivacyResponse;
};
export declare const CMsgUpgradeLeagueItem: {
    fromJSON(object: any): CMsgUpgradeLeagueItem;
    toJSON(message: CMsgUpgradeLeagueItem): unknown;
    create<I extends {
        match_id?: string;
        league_id?: number;
    } & {
        match_id?: string;
        league_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgUpgradeLeagueItem>]: never; }>(base?: I): CMsgUpgradeLeagueItem;
    fromPartial<I_1 extends {
        match_id?: string;
        league_id?: number;
    } & {
        match_id?: string;
        league_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgUpgradeLeagueItem>]: never; }>(object: I_1): CMsgUpgradeLeagueItem;
};
export declare const CMsgUpgradeLeagueItemResponse: {
    fromJSON(_: any): CMsgUpgradeLeagueItemResponse;
    toJSON(_: CMsgUpgradeLeagueItemResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgUpgradeLeagueItemResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgUpgradeLeagueItemResponse;
};
export declare const CMsgGCWatchDownloadedReplay: {
    fromJSON(object: any): CMsgGCWatchDownloadedReplay;
    toJSON(message: CMsgGCWatchDownloadedReplay): unknown;
    create<I extends {
        match_id?: string;
        watch_type?: DOTA_WatchReplayType;
    } & {
        match_id?: string;
        watch_type?: DOTA_WatchReplayType;
    } & { [K in Exclude<keyof I, keyof CMsgGCWatchDownloadedReplay>]: never; }>(base?: I): CMsgGCWatchDownloadedReplay;
    fromPartial<I_1 extends {
        match_id?: string;
        watch_type?: DOTA_WatchReplayType;
    } & {
        match_id?: string;
        watch_type?: DOTA_WatchReplayType;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCWatchDownloadedReplay>]: never; }>(object: I_1): CMsgGCWatchDownloadedReplay;
};
export declare const CMsgClientsRejoinChatChannels: {
    fromJSON(_: any): CMsgClientsRejoinChatChannels;
    toJSON(_: CMsgClientsRejoinChatChannels): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientsRejoinChatChannels;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientsRejoinChatChannels;
};
export declare const CMsgGCGetHeroStandings: {
    fromJSON(_: any): CMsgGCGetHeroStandings;
    toJSON(_: CMsgGCGetHeroStandings): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgGCGetHeroStandings;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgGCGetHeroStandings;
};
export declare const CMsgGCGetHeroStandingsResponse: {
    fromJSON(object: any): CMsgGCGetHeroStandingsResponse;
    toJSON(message: CMsgGCGetHeroStandingsResponse): unknown;
    create<I extends {
        standings?: {
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        }[];
    } & {
        standings?: {
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        }[] & ({
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        } & {
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        } & { [K in Exclude<keyof I["standings"][number], keyof CMsgGCGetHeroStandingsResponse_Hero>]: never; })[] & { [K_1 in Exclude<keyof I["standings"], keyof {
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "standings">]: never; }>(base?: I): CMsgGCGetHeroStandingsResponse;
    fromPartial<I_1 extends {
        standings?: {
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        }[];
    } & {
        standings?: {
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        }[] & ({
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        } & {
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        } & { [K_3 in Exclude<keyof I_1["standings"][number], keyof CMsgGCGetHeroStandingsResponse_Hero>]: never; })[] & { [K_4 in Exclude<keyof I_1["standings"], keyof {
            hero_id?: number;
            wins?: number;
            losses?: number;
            win_streak?: number;
            best_win_streak?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_gpm?: number;
            avg_xpm?: number;
            best_kills?: number;
            best_assists?: number;
            best_gpm?: number;
            best_xpm?: number;
            performance?: number;
            wins_with_ally?: number;
            losses_with_ally?: number;
            wins_against_enemy?: number;
            losses_against_enemy?: number;
            networth_peak?: number;
            lasthit_peak?: number;
            deny_peak?: number;
            damage_peak?: number;
            longest_game_peak?: number;
            healing_peak?: number;
            avg_lasthits?: number;
            avg_denies?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "standings">]: never; }>(object: I_1): CMsgGCGetHeroStandingsResponse;
};
export declare const CMsgGCGetHeroStandingsResponse_Hero: {
    fromJSON(object: any): CMsgGCGetHeroStandingsResponse_Hero;
    toJSON(message: CMsgGCGetHeroStandingsResponse_Hero): unknown;
    create<I extends {
        hero_id?: number;
        wins?: number;
        losses?: number;
        win_streak?: number;
        best_win_streak?: number;
        avg_kills?: number;
        avg_deaths?: number;
        avg_assists?: number;
        avg_gpm?: number;
        avg_xpm?: number;
        best_kills?: number;
        best_assists?: number;
        best_gpm?: number;
        best_xpm?: number;
        performance?: number;
        wins_with_ally?: number;
        losses_with_ally?: number;
        wins_against_enemy?: number;
        losses_against_enemy?: number;
        networth_peak?: number;
        lasthit_peak?: number;
        deny_peak?: number;
        damage_peak?: number;
        longest_game_peak?: number;
        healing_peak?: number;
        avg_lasthits?: number;
        avg_denies?: number;
    } & {
        hero_id?: number;
        wins?: number;
        losses?: number;
        win_streak?: number;
        best_win_streak?: number;
        avg_kills?: number;
        avg_deaths?: number;
        avg_assists?: number;
        avg_gpm?: number;
        avg_xpm?: number;
        best_kills?: number;
        best_assists?: number;
        best_gpm?: number;
        best_xpm?: number;
        performance?: number;
        wins_with_ally?: number;
        losses_with_ally?: number;
        wins_against_enemy?: number;
        losses_against_enemy?: number;
        networth_peak?: number;
        lasthit_peak?: number;
        deny_peak?: number;
        damage_peak?: number;
        longest_game_peak?: number;
        healing_peak?: number;
        avg_lasthits?: number;
        avg_denies?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCGetHeroStandingsResponse_Hero>]: never; }>(base?: I): CMsgGCGetHeroStandingsResponse_Hero;
    fromPartial<I_1 extends {
        hero_id?: number;
        wins?: number;
        losses?: number;
        win_streak?: number;
        best_win_streak?: number;
        avg_kills?: number;
        avg_deaths?: number;
        avg_assists?: number;
        avg_gpm?: number;
        avg_xpm?: number;
        best_kills?: number;
        best_assists?: number;
        best_gpm?: number;
        best_xpm?: number;
        performance?: number;
        wins_with_ally?: number;
        losses_with_ally?: number;
        wins_against_enemy?: number;
        losses_against_enemy?: number;
        networth_peak?: number;
        lasthit_peak?: number;
        deny_peak?: number;
        damage_peak?: number;
        longest_game_peak?: number;
        healing_peak?: number;
        avg_lasthits?: number;
        avg_denies?: number;
    } & {
        hero_id?: number;
        wins?: number;
        losses?: number;
        win_streak?: number;
        best_win_streak?: number;
        avg_kills?: number;
        avg_deaths?: number;
        avg_assists?: number;
        avg_gpm?: number;
        avg_xpm?: number;
        best_kills?: number;
        best_assists?: number;
        best_gpm?: number;
        best_xpm?: number;
        performance?: number;
        wins_with_ally?: number;
        losses_with_ally?: number;
        wins_against_enemy?: number;
        losses_against_enemy?: number;
        networth_peak?: number;
        lasthit_peak?: number;
        deny_peak?: number;
        damage_peak?: number;
        longest_game_peak?: number;
        healing_peak?: number;
        avg_lasthits?: number;
        avg_denies?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCGetHeroStandingsResponse_Hero>]: never; }>(object: I_1): CMsgGCGetHeroStandingsResponse_Hero;
};
export declare const CMatchPlayerTimedStatAverages: {
    fromJSON(object: any): CMatchPlayerTimedStatAverages;
    toJSON(message: CMatchPlayerTimedStatAverages): unknown;
    create<I extends {
        kills?: number;
        deaths?: number;
        assists?: number;
        net_worth?: number;
        last_hits?: number;
        denies?: number;
        item_value?: number;
        support_gold_spent?: number;
        camps_stacked?: number;
        wards_placed?: number;
        dewards?: number;
        triple_kills?: number;
        rampages?: number;
    } & {
        kills?: number;
        deaths?: number;
        assists?: number;
        net_worth?: number;
        last_hits?: number;
        denies?: number;
        item_value?: number;
        support_gold_spent?: number;
        camps_stacked?: number;
        wards_placed?: number;
        dewards?: number;
        triple_kills?: number;
        rampages?: number;
    } & { [K in Exclude<keyof I, keyof CMatchPlayerTimedStatAverages>]: never; }>(base?: I): CMatchPlayerTimedStatAverages;
    fromPartial<I_1 extends {
        kills?: number;
        deaths?: number;
        assists?: number;
        net_worth?: number;
        last_hits?: number;
        denies?: number;
        item_value?: number;
        support_gold_spent?: number;
        camps_stacked?: number;
        wards_placed?: number;
        dewards?: number;
        triple_kills?: number;
        rampages?: number;
    } & {
        kills?: number;
        deaths?: number;
        assists?: number;
        net_worth?: number;
        last_hits?: number;
        denies?: number;
        item_value?: number;
        support_gold_spent?: number;
        camps_stacked?: number;
        wards_placed?: number;
        dewards?: number;
        triple_kills?: number;
        rampages?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMatchPlayerTimedStatAverages>]: never; }>(object: I_1): CMatchPlayerTimedStatAverages;
};
export declare const CMatchPlayerTimedStatStdDeviations: {
    fromJSON(object: any): CMatchPlayerTimedStatStdDeviations;
    toJSON(message: CMatchPlayerTimedStatStdDeviations): unknown;
    create<I extends {
        kills?: number;
        deaths?: number;
        assists?: number;
        net_worth?: number;
        last_hits?: number;
        denies?: number;
        item_value?: number;
        support_gold_spent?: number;
        camps_stacked?: number;
        wards_placed?: number;
        dewards?: number;
        triple_kills?: number;
        rampages?: number;
    } & {
        kills?: number;
        deaths?: number;
        assists?: number;
        net_worth?: number;
        last_hits?: number;
        denies?: number;
        item_value?: number;
        support_gold_spent?: number;
        camps_stacked?: number;
        wards_placed?: number;
        dewards?: number;
        triple_kills?: number;
        rampages?: number;
    } & { [K in Exclude<keyof I, keyof CMatchPlayerTimedStatStdDeviations>]: never; }>(base?: I): CMatchPlayerTimedStatStdDeviations;
    fromPartial<I_1 extends {
        kills?: number;
        deaths?: number;
        assists?: number;
        net_worth?: number;
        last_hits?: number;
        denies?: number;
        item_value?: number;
        support_gold_spent?: number;
        camps_stacked?: number;
        wards_placed?: number;
        dewards?: number;
        triple_kills?: number;
        rampages?: number;
    } & {
        kills?: number;
        deaths?: number;
        assists?: number;
        net_worth?: number;
        last_hits?: number;
        denies?: number;
        item_value?: number;
        support_gold_spent?: number;
        camps_stacked?: number;
        wards_placed?: number;
        dewards?: number;
        triple_kills?: number;
        rampages?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMatchPlayerTimedStatStdDeviations>]: never; }>(object: I_1): CMatchPlayerTimedStatStdDeviations;
};
export declare const CMsgGCGetHeroTimedStatsResponse: {
    fromJSON(object: any): CMsgGCGetHeroTimedStatsResponse;
    toJSON(message: CMsgGCGetHeroTimedStatsResponse): unknown;
    create<I extends {
        hero_id?: number;
        rank_chunked_stats?: {
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[];
        }[];
    } & {
        hero_id?: number;
        rank_chunked_stats?: {
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[];
        }[] & ({
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[];
        } & {
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[] & ({
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            } & {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K in Exclude<keyof I["rank_chunked_stats"][number]["timed_stats"][number]["all_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_1 in Exclude<keyof I["rank_chunked_stats"][number]["timed_stats"][number]["winning_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_2 in Exclude<keyof I["rank_chunked_stats"][number]["timed_stats"][number]["losing_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_3 in Exclude<keyof I["rank_chunked_stats"][number]["timed_stats"][number]["winning_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_4 in Exclude<keyof I["rank_chunked_stats"][number]["timed_stats"][number]["losing_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
            } & { [K_5 in Exclude<keyof I["rank_chunked_stats"][number]["timed_stats"][number], keyof CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer>]: never; })[] & { [K_6 in Exclude<keyof I["rank_chunked_stats"][number]["timed_stats"], keyof {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[]>]: never; };
        } & { [K_7 in Exclude<keyof I["rank_chunked_stats"][number], keyof CMsgGCGetHeroTimedStatsResponse_RankChunkedStats>]: never; })[] & { [K_8 in Exclude<keyof I["rank_chunked_stats"], keyof {
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[];
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I, keyof CMsgGCGetHeroTimedStatsResponse>]: never; }>(base?: I): CMsgGCGetHeroTimedStatsResponse;
    fromPartial<I_1 extends {
        hero_id?: number;
        rank_chunked_stats?: {
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[];
        }[];
    } & {
        hero_id?: number;
        rank_chunked_stats?: {
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[];
        }[] & ({
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[];
        } & {
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[] & ({
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            } & {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_10 in Exclude<keyof I_1["rank_chunked_stats"][number]["timed_stats"][number]["all_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_11 in Exclude<keyof I_1["rank_chunked_stats"][number]["timed_stats"][number]["winning_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_12 in Exclude<keyof I_1["rank_chunked_stats"][number]["timed_stats"][number]["losing_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_13 in Exclude<keyof I_1["rank_chunked_stats"][number]["timed_stats"][number]["winning_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                } & { [K_14 in Exclude<keyof I_1["rank_chunked_stats"][number]["timed_stats"][number]["losing_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
            } & { [K_15 in Exclude<keyof I_1["rank_chunked_stats"][number]["timed_stats"][number], keyof CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer>]: never; })[] & { [K_16 in Exclude<keyof I_1["rank_chunked_stats"][number]["timed_stats"], keyof {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[]>]: never; };
        } & { [K_17 in Exclude<keyof I_1["rank_chunked_stats"][number], keyof CMsgGCGetHeroTimedStatsResponse_RankChunkedStats>]: never; })[] & { [K_18 in Exclude<keyof I_1["rank_chunked_stats"], keyof {
            rank_chunk?: number;
            timed_stats?: {
                time?: number;
                all_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stats?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                winning_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
                losing_stddevs?: {
                    kills?: number;
                    deaths?: number;
                    assists?: number;
                    net_worth?: number;
                    last_hits?: number;
                    denies?: number;
                    item_value?: number;
                    support_gold_spent?: number;
                    camps_stacked?: number;
                    wards_placed?: number;
                    dewards?: number;
                    triple_kills?: number;
                    rampages?: number;
                };
            }[];
        }[]>]: never; };
    } & { [K_19 in Exclude<keyof I_1, keyof CMsgGCGetHeroTimedStatsResponse>]: never; }>(object: I_1): CMsgGCGetHeroTimedStatsResponse;
};
export declare const CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer: {
    fromJSON(object: any): CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer;
    toJSON(message: CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer): unknown;
    create<I extends {
        time?: number;
        all_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
        winning_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
        losing_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
        winning_stddevs?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
        losing_stddevs?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
    } & {
        time?: number;
        all_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K in Exclude<keyof I["all_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
        winning_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_1 in Exclude<keyof I["winning_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
        losing_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_2 in Exclude<keyof I["losing_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
        winning_stddevs?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_3 in Exclude<keyof I["winning_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
        losing_stddevs?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_4 in Exclude<keyof I["losing_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer>]: never; }>(base?: I): CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer;
    fromPartial<I_1 extends {
        time?: number;
        all_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
        winning_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
        losing_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
        winning_stddevs?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
        losing_stddevs?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        };
    } & {
        time?: number;
        all_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_6 in Exclude<keyof I_1["all_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
        winning_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_7 in Exclude<keyof I_1["winning_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
        losing_stats?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_8 in Exclude<keyof I_1["losing_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
        winning_stddevs?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_9 in Exclude<keyof I_1["winning_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
        losing_stddevs?: {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & {
            kills?: number;
            deaths?: number;
            assists?: number;
            net_worth?: number;
            last_hits?: number;
            denies?: number;
            item_value?: number;
            support_gold_spent?: number;
            camps_stacked?: number;
            wards_placed?: number;
            dewards?: number;
            triple_kills?: number;
            rampages?: number;
        } & { [K_10 in Exclude<keyof I_1["losing_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer>]: never; }>(object: I_1): CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer;
};
export declare const CMsgGCGetHeroTimedStatsResponse_RankChunkedStats: {
    fromJSON(object: any): CMsgGCGetHeroTimedStatsResponse_RankChunkedStats;
    toJSON(message: CMsgGCGetHeroTimedStatsResponse_RankChunkedStats): unknown;
    create<I extends {
        rank_chunk?: number;
        timed_stats?: {
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
        }[];
    } & {
        rank_chunk?: number;
        timed_stats?: {
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
        }[] & ({
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
        } & {
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K in Exclude<keyof I["timed_stats"][number]["all_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_1 in Exclude<keyof I["timed_stats"][number]["winning_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_2 in Exclude<keyof I["timed_stats"][number]["losing_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_3 in Exclude<keyof I["timed_stats"][number]["winning_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_4 in Exclude<keyof I["timed_stats"][number]["losing_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
        } & { [K_5 in Exclude<keyof I["timed_stats"][number], keyof CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer>]: never; })[] & { [K_6 in Exclude<keyof I["timed_stats"], keyof {
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I, keyof CMsgGCGetHeroTimedStatsResponse_RankChunkedStats>]: never; }>(base?: I): CMsgGCGetHeroTimedStatsResponse_RankChunkedStats;
    fromPartial<I_1 extends {
        rank_chunk?: number;
        timed_stats?: {
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
        }[];
    } & {
        rank_chunk?: number;
        timed_stats?: {
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
        }[] & ({
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
        } & {
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_8 in Exclude<keyof I_1["timed_stats"][number]["all_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_9 in Exclude<keyof I_1["timed_stats"][number]["winning_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_10 in Exclude<keyof I_1["timed_stats"][number]["losing_stats"], keyof CMatchPlayerTimedStatAverages>]: never; };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_11 in Exclude<keyof I_1["timed_stats"][number]["winning_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            } & { [K_12 in Exclude<keyof I_1["timed_stats"][number]["losing_stddevs"], keyof CMatchPlayerTimedStatStdDeviations>]: never; };
        } & { [K_13 in Exclude<keyof I_1["timed_stats"][number], keyof CMsgGCGetHeroTimedStatsResponse_TimedStatsContainer>]: never; })[] & { [K_14 in Exclude<keyof I_1["timed_stats"], keyof {
            time?: number;
            all_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stats?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            winning_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
            losing_stddevs?: {
                kills?: number;
                deaths?: number;
                assists?: number;
                net_worth?: number;
                last_hits?: number;
                denies?: number;
                item_value?: number;
                support_gold_spent?: number;
                camps_stacked?: number;
                wards_placed?: number;
                dewards?: number;
                triple_kills?: number;
                rampages?: number;
            };
        }[]>]: never; };
    } & { [K_15 in Exclude<keyof I_1, keyof CMsgGCGetHeroTimedStatsResponse_RankChunkedStats>]: never; }>(object: I_1): CMsgGCGetHeroTimedStatsResponse_RankChunkedStats;
};
export declare const CMsgGCItemEditorReservationsRequest: {
    fromJSON(_: any): CMsgGCItemEditorReservationsRequest;
    toJSON(_: CMsgGCItemEditorReservationsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgGCItemEditorReservationsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgGCItemEditorReservationsRequest;
};
export declare const CMsgGCItemEditorReservation: {
    fromJSON(object: any): CMsgGCItemEditorReservation;
    toJSON(message: CMsgGCItemEditorReservation): unknown;
    create<I extends {
        def_index?: number;
        name?: string;
    } & {
        def_index?: number;
        name?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGCItemEditorReservation>]: never; }>(base?: I): CMsgGCItemEditorReservation;
    fromPartial<I_1 extends {
        def_index?: number;
        name?: string;
    } & {
        def_index?: number;
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCItemEditorReservation>]: never; }>(object: I_1): CMsgGCItemEditorReservation;
};
export declare const CMsgGCItemEditorReservationsResponse: {
    fromJSON(object: any): CMsgGCItemEditorReservationsResponse;
    toJSON(message: CMsgGCItemEditorReservationsResponse): unknown;
    create<I extends {
        reservations?: {
            def_index?: number;
            name?: string;
        }[];
    } & {
        reservations?: {
            def_index?: number;
            name?: string;
        }[] & ({
            def_index?: number;
            name?: string;
        } & {
            def_index?: number;
            name?: string;
        } & { [K in Exclude<keyof I["reservations"][number], keyof CMsgGCItemEditorReservation>]: never; })[] & { [K_1 in Exclude<keyof I["reservations"], keyof {
            def_index?: number;
            name?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "reservations">]: never; }>(base?: I): CMsgGCItemEditorReservationsResponse;
    fromPartial<I_1 extends {
        reservations?: {
            def_index?: number;
            name?: string;
        }[];
    } & {
        reservations?: {
            def_index?: number;
            name?: string;
        }[] & ({
            def_index?: number;
            name?: string;
        } & {
            def_index?: number;
            name?: string;
        } & { [K_3 in Exclude<keyof I_1["reservations"][number], keyof CMsgGCItemEditorReservation>]: never; })[] & { [K_4 in Exclude<keyof I_1["reservations"], keyof {
            def_index?: number;
            name?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "reservations">]: never; }>(object: I_1): CMsgGCItemEditorReservationsResponse;
};
export declare const CMsgGCItemEditorReserveItemDef: {
    fromJSON(object: any): CMsgGCItemEditorReserveItemDef;
    toJSON(message: CMsgGCItemEditorReserveItemDef): unknown;
    create<I extends {
        def_index?: number;
        username?: string;
    } & {
        def_index?: number;
        username?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGCItemEditorReserveItemDef>]: never; }>(base?: I): CMsgGCItemEditorReserveItemDef;
    fromPartial<I_1 extends {
        def_index?: number;
        username?: string;
    } & {
        def_index?: number;
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCItemEditorReserveItemDef>]: never; }>(object: I_1): CMsgGCItemEditorReserveItemDef;
};
export declare const CMsgGCItemEditorReserveItemDefResponse: {
    fromJSON(object: any): CMsgGCItemEditorReserveItemDefResponse;
    toJSON(message: CMsgGCItemEditorReserveItemDefResponse): unknown;
    create<I extends {
        def_index?: number;
        username?: string;
        result?: number;
    } & {
        def_index?: number;
        username?: string;
        result?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCItemEditorReserveItemDefResponse>]: never; }>(base?: I): CMsgGCItemEditorReserveItemDefResponse;
    fromPartial<I_1 extends {
        def_index?: number;
        username?: string;
        result?: number;
    } & {
        def_index?: number;
        username?: string;
        result?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCItemEditorReserveItemDefResponse>]: never; }>(object: I_1): CMsgGCItemEditorReserveItemDefResponse;
};
export declare const CMsgGCItemEditorReleaseReservation: {
    fromJSON(object: any): CMsgGCItemEditorReleaseReservation;
    toJSON(message: CMsgGCItemEditorReleaseReservation): unknown;
    create<I extends {
        def_index?: number;
        username?: string;
    } & {
        def_index?: number;
        username?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGCItemEditorReleaseReservation>]: never; }>(base?: I): CMsgGCItemEditorReleaseReservation;
    fromPartial<I_1 extends {
        def_index?: number;
        username?: string;
    } & {
        def_index?: number;
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCItemEditorReleaseReservation>]: never; }>(object: I_1): CMsgGCItemEditorReleaseReservation;
};
export declare const CMsgGCItemEditorReleaseReservationResponse: {
    fromJSON(object: any): CMsgGCItemEditorReleaseReservationResponse;
    toJSON(message: CMsgGCItemEditorReleaseReservationResponse): unknown;
    create<I extends {
        def_index?: number;
        released?: boolean;
    } & {
        def_index?: number;
        released?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgGCItemEditorReleaseReservationResponse>]: never; }>(base?: I): CMsgGCItemEditorReleaseReservationResponse;
    fromPartial<I_1 extends {
        def_index?: number;
        released?: boolean;
    } & {
        def_index?: number;
        released?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCItemEditorReleaseReservationResponse>]: never; }>(object: I_1): CMsgGCItemEditorReleaseReservationResponse;
};
export declare const CMsgDOTARewardTutorialPrizes: {
    fromJSON(object: any): CMsgDOTARewardTutorialPrizes;
    toJSON(message: CMsgDOTARewardTutorialPrizes): unknown;
    create<I extends {
        location_id?: number;
        tracking_only?: boolean;
    } & {
        location_id?: number;
        tracking_only?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgDOTARewardTutorialPrizes>]: never; }>(base?: I): CMsgDOTARewardTutorialPrizes;
    fromPartial<I_1 extends {
        location_id?: number;
        tracking_only?: boolean;
    } & {
        location_id?: number;
        tracking_only?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTARewardTutorialPrizes>]: never; }>(object: I_1): CMsgDOTARewardTutorialPrizes;
};
export declare const CMsgFlipLobbyTeams: {
    fromJSON(_: any): CMsgFlipLobbyTeams;
    toJSON(_: CMsgFlipLobbyTeams): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgFlipLobbyTeams;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgFlipLobbyTeams;
};
export declare const CMsgGCLobbyUpdateBroadcastChannelInfo: {
    fromJSON(object: any): CMsgGCLobbyUpdateBroadcastChannelInfo;
    toJSON(message: CMsgGCLobbyUpdateBroadcastChannelInfo): unknown;
    create<I extends {
        channel_id?: number;
        country_code?: string;
        description?: string;
        language_code?: string;
    } & {
        channel_id?: number;
        country_code?: string;
        description?: string;
        language_code?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGCLobbyUpdateBroadcastChannelInfo>]: never; }>(base?: I): CMsgGCLobbyUpdateBroadcastChannelInfo;
    fromPartial<I_1 extends {
        channel_id?: number;
        country_code?: string;
        description?: string;
        language_code?: string;
    } & {
        channel_id?: number;
        country_code?: string;
        description?: string;
        language_code?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCLobbyUpdateBroadcastChannelInfo>]: never; }>(object: I_1): CMsgGCLobbyUpdateBroadcastChannelInfo;
};
export declare const CMsgDOTAClaimEventActionData: {
    fromJSON(object: any): CMsgDOTAClaimEventActionData;
    toJSON(message: CMsgDOTAClaimEventActionData): unknown;
    create<I extends {
        grant_item_gift_data?: {
            give_to_account_id?: number;
            gift_message?: string;
        };
    } & {
        grant_item_gift_data?: {
            give_to_account_id?: number;
            gift_message?: string;
        } & {
            give_to_account_id?: number;
            gift_message?: string;
        } & { [K in Exclude<keyof I["grant_item_gift_data"], keyof CMsgDOTAClaimEventActionData_GrantItemGiftData>]: never; };
    } & { [K_1 in Exclude<keyof I, "grant_item_gift_data">]: never; }>(base?: I): CMsgDOTAClaimEventActionData;
    fromPartial<I_1 extends {
        grant_item_gift_data?: {
            give_to_account_id?: number;
            gift_message?: string;
        };
    } & {
        grant_item_gift_data?: {
            give_to_account_id?: number;
            gift_message?: string;
        } & {
            give_to_account_id?: number;
            gift_message?: string;
        } & { [K_2 in Exclude<keyof I_1["grant_item_gift_data"], keyof CMsgDOTAClaimEventActionData_GrantItemGiftData>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "grant_item_gift_data">]: never; }>(object: I_1): CMsgDOTAClaimEventActionData;
};
export declare const CMsgDOTAClaimEventActionData_GrantItemGiftData: {
    fromJSON(object: any): CMsgDOTAClaimEventActionData_GrantItemGiftData;
    toJSON(message: CMsgDOTAClaimEventActionData_GrantItemGiftData): unknown;
    create<I extends {
        give_to_account_id?: number;
        gift_message?: string;
    } & {
        give_to_account_id?: number;
        gift_message?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAClaimEventActionData_GrantItemGiftData>]: never; }>(base?: I): CMsgDOTAClaimEventActionData_GrantItemGiftData;
    fromPartial<I_1 extends {
        give_to_account_id?: number;
        gift_message?: string;
    } & {
        give_to_account_id?: number;
        gift_message?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAClaimEventActionData_GrantItemGiftData>]: never; }>(object: I_1): CMsgDOTAClaimEventActionData_GrantItemGiftData;
};
export declare const CMsgDOTAClaimEventAction: {
    fromJSON(object: any): CMsgDOTAClaimEventAction;
    toJSON(message: CMsgDOTAClaimEventAction): unknown;
    create<I extends {
        event_id?: number;
        action_id?: number;
        quantity?: number;
        data?: {
            grant_item_gift_data?: {
                give_to_account_id?: number;
                gift_message?: string;
            };
        };
    } & {
        event_id?: number;
        action_id?: number;
        quantity?: number;
        data?: {
            grant_item_gift_data?: {
                give_to_account_id?: number;
                gift_message?: string;
            };
        } & {
            grant_item_gift_data?: {
                give_to_account_id?: number;
                gift_message?: string;
            } & {
                give_to_account_id?: number;
                gift_message?: string;
            } & { [K in Exclude<keyof I["data"]["grant_item_gift_data"], keyof CMsgDOTAClaimEventActionData_GrantItemGiftData>]: never; };
        } & { [K_1 in Exclude<keyof I["data"], "grant_item_gift_data">]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAClaimEventAction>]: never; }>(base?: I): CMsgDOTAClaimEventAction;
    fromPartial<I_1 extends {
        event_id?: number;
        action_id?: number;
        quantity?: number;
        data?: {
            grant_item_gift_data?: {
                give_to_account_id?: number;
                gift_message?: string;
            };
        };
    } & {
        event_id?: number;
        action_id?: number;
        quantity?: number;
        data?: {
            grant_item_gift_data?: {
                give_to_account_id?: number;
                gift_message?: string;
            };
        } & {
            grant_item_gift_data?: {
                give_to_account_id?: number;
                gift_message?: string;
            } & {
                give_to_account_id?: number;
                gift_message?: string;
            } & { [K_3 in Exclude<keyof I_1["data"]["grant_item_gift_data"], keyof CMsgDOTAClaimEventActionData_GrantItemGiftData>]: never; };
        } & { [K_4 in Exclude<keyof I_1["data"], "grant_item_gift_data">]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAClaimEventAction>]: never; }>(object: I_1): CMsgDOTAClaimEventAction;
};
export declare const CMsgDOTAClaimEventActionResponse: {
    fromJSON(object: any): CMsgDOTAClaimEventActionResponse;
    toJSON(message: CMsgDOTAClaimEventActionResponse): unknown;
    create<I extends {
        result?: CMsgDOTAClaimEventActionResponse_ResultCode;
        reward_results?: {
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        }[];
    } & {
        result?: CMsgDOTAClaimEventActionResponse_ResultCode;
        reward_results?: {
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        }[] & ({
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        } & {
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        } & { [K in Exclude<keyof I["reward_results"][number], keyof CMsgDOTAClaimEventActionResponse_GrantedRewardData>]: never; })[] & { [K_1 in Exclude<keyof I["reward_results"], keyof {
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAClaimEventActionResponse>]: never; }>(base?: I): CMsgDOTAClaimEventActionResponse;
    fromPartial<I_1 extends {
        result?: CMsgDOTAClaimEventActionResponse_ResultCode;
        reward_results?: {
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        }[];
    } & {
        result?: CMsgDOTAClaimEventActionResponse_ResultCode;
        reward_results?: {
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        }[] & ({
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        } & {
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        } & { [K_3 in Exclude<keyof I_1["reward_results"][number], keyof CMsgDOTAClaimEventActionResponse_GrantedRewardData>]: never; })[] & { [K_4 in Exclude<keyof I_1["reward_results"], keyof {
            grant_index?: number;
            score_index?: number;
            reward_index?: number;
            reward_data?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAClaimEventActionResponse>]: never; }>(object: I_1): CMsgDOTAClaimEventActionResponse;
};
export declare const CMsgDOTAClaimEventActionResponse_MysteryItemRewardData: {
    fromJSON(object: any): CMsgDOTAClaimEventActionResponse_MysteryItemRewardData;
    toJSON(message: CMsgDOTAClaimEventActionResponse_MysteryItemRewardData): unknown;
    create<I extends {
        item_def?: number;
        item_category?: number;
    } & {
        item_def?: number;
        item_category?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAClaimEventActionResponse_MysteryItemRewardData>]: never; }>(base?: I): CMsgDOTAClaimEventActionResponse_MysteryItemRewardData;
    fromPartial<I_1 extends {
        item_def?: number;
        item_category?: number;
    } & {
        item_def?: number;
        item_category?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAClaimEventActionResponse_MysteryItemRewardData>]: never; }>(object: I_1): CMsgDOTAClaimEventActionResponse_MysteryItemRewardData;
};
export declare const CMsgDOTAClaimEventActionResponse_LootListRewardData: {
    fromJSON(object: any): CMsgDOTAClaimEventActionResponse_LootListRewardData;
    toJSON(message: CMsgDOTAClaimEventActionResponse_LootListRewardData): unknown;
    create<I extends {
        item_def?: number[];
    } & {
        item_def?: number[] & number[] & { [K in Exclude<keyof I["item_def"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "item_def">]: never; }>(base?: I): CMsgDOTAClaimEventActionResponse_LootListRewardData;
    fromPartial<I_1 extends {
        item_def?: number[];
    } & {
        item_def?: number[] & number[] & { [K_2 in Exclude<keyof I_1["item_def"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "item_def">]: never; }>(object: I_1): CMsgDOTAClaimEventActionResponse_LootListRewardData;
};
export declare const CMsgDOTAClaimEventActionResponse_ActionListRewardData: {
    fromJSON(object: any): CMsgDOTAClaimEventActionResponse_ActionListRewardData;
    toJSON(message: CMsgDOTAClaimEventActionResponse_ActionListRewardData): unknown;
    create<I extends {
        action_id?: number;
        result_reward_data?: string;
    } & {
        action_id?: number;
        result_reward_data?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAClaimEventActionResponse_ActionListRewardData>]: never; }>(base?: I): CMsgDOTAClaimEventActionResponse_ActionListRewardData;
    fromPartial<I_1 extends {
        action_id?: number;
        result_reward_data?: string;
    } & {
        action_id?: number;
        result_reward_data?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAClaimEventActionResponse_ActionListRewardData>]: never; }>(object: I_1): CMsgDOTAClaimEventActionResponse_ActionListRewardData;
};
export declare const CMsgDOTAClaimEventActionResponse_GrantedRewardData: {
    fromJSON(object: any): CMsgDOTAClaimEventActionResponse_GrantedRewardData;
    toJSON(message: CMsgDOTAClaimEventActionResponse_GrantedRewardData): unknown;
    create<I extends {
        grant_index?: number;
        score_index?: number;
        reward_index?: number;
        reward_data?: string;
    } & {
        grant_index?: number;
        score_index?: number;
        reward_index?: number;
        reward_data?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAClaimEventActionResponse_GrantedRewardData>]: never; }>(base?: I): CMsgDOTAClaimEventActionResponse_GrantedRewardData;
    fromPartial<I_1 extends {
        grant_index?: number;
        score_index?: number;
        reward_index?: number;
        reward_data?: string;
    } & {
        grant_index?: number;
        score_index?: number;
        reward_index?: number;
        reward_data?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAClaimEventActionResponse_GrantedRewardData>]: never; }>(object: I_1): CMsgDOTAClaimEventActionResponse_GrantedRewardData;
};
export declare const CMsgClientToGCClaimEventActionUsingItem: {
    fromJSON(object: any): CMsgClientToGCClaimEventActionUsingItem;
    toJSON(message: CMsgClientToGCClaimEventActionUsingItem): unknown;
    create<I extends {
        event_id?: number;
        action_id?: number;
        item_id?: string;
        quantity?: number;
    } & {
        event_id?: number;
        action_id?: number;
        item_id?: string;
        quantity?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCClaimEventActionUsingItem>]: never; }>(base?: I): CMsgClientToGCClaimEventActionUsingItem;
    fromPartial<I_1 extends {
        event_id?: number;
        action_id?: number;
        item_id?: string;
        quantity?: number;
    } & {
        event_id?: number;
        action_id?: number;
        item_id?: string;
        quantity?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCClaimEventActionUsingItem>]: never; }>(object: I_1): CMsgClientToGCClaimEventActionUsingItem;
};
export declare const CMsgClientToGCClaimEventActionUsingItemResponse: {
    fromJSON(object: any): CMsgClientToGCClaimEventActionUsingItemResponse;
    toJSON(message: CMsgClientToGCClaimEventActionUsingItemResponse): unknown;
    create<I extends {
        action_results?: {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[];
        };
    } & {
        action_results?: {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[];
        } & {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[] & ({
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            } & {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            } & { [K in Exclude<keyof I["action_results"]["reward_results"][number], keyof CMsgDOTAClaimEventActionResponse_GrantedRewardData>]: never; })[] & { [K_1 in Exclude<keyof I["action_results"]["reward_results"], keyof {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["action_results"], keyof CMsgDOTAClaimEventActionResponse>]: never; };
    } & { [K_3 in Exclude<keyof I, "action_results">]: never; }>(base?: I): CMsgClientToGCClaimEventActionUsingItemResponse;
    fromPartial<I_1 extends {
        action_results?: {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[];
        };
    } & {
        action_results?: {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[];
        } & {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[] & ({
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            } & {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            } & { [K_4 in Exclude<keyof I_1["action_results"]["reward_results"][number], keyof CMsgDOTAClaimEventActionResponse_GrantedRewardData>]: never; })[] & { [K_5 in Exclude<keyof I_1["action_results"]["reward_results"], keyof {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I_1["action_results"], keyof CMsgDOTAClaimEventActionResponse>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "action_results">]: never; }>(object: I_1): CMsgClientToGCClaimEventActionUsingItemResponse;
};
export declare const CMsgGCToClientClaimEventActionUsingItemCompleted: {
    fromJSON(object: any): CMsgGCToClientClaimEventActionUsingItemCompleted;
    toJSON(message: CMsgGCToClientClaimEventActionUsingItemCompleted): unknown;
    create<I extends {
        item_id?: string;
        action_results?: {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[];
        };
    } & {
        item_id?: string;
        action_results?: {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[];
        } & {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[] & ({
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            } & {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            } & { [K in Exclude<keyof I["action_results"]["reward_results"][number], keyof CMsgDOTAClaimEventActionResponse_GrantedRewardData>]: never; })[] & { [K_1 in Exclude<keyof I["action_results"]["reward_results"], keyof {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["action_results"], keyof CMsgDOTAClaimEventActionResponse>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgGCToClientClaimEventActionUsingItemCompleted>]: never; }>(base?: I): CMsgGCToClientClaimEventActionUsingItemCompleted;
    fromPartial<I_1 extends {
        item_id?: string;
        action_results?: {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[];
        };
    } & {
        item_id?: string;
        action_results?: {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[];
        } & {
            result?: CMsgDOTAClaimEventActionResponse_ResultCode;
            reward_results?: {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[] & ({
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            } & {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            } & { [K_4 in Exclude<keyof I_1["action_results"]["reward_results"][number], keyof CMsgDOTAClaimEventActionResponse_GrantedRewardData>]: never; })[] & { [K_5 in Exclude<keyof I_1["action_results"]["reward_results"], keyof {
                grant_index?: number;
                score_index?: number;
                reward_index?: number;
                reward_data?: string;
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I_1["action_results"], keyof CMsgDOTAClaimEventActionResponse>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgGCToClientClaimEventActionUsingItemCompleted>]: never; }>(object: I_1): CMsgGCToClientClaimEventActionUsingItemCompleted;
};
export declare const CMsgDOTAGetEventPoints: {
    fromJSON(object: any): CMsgDOTAGetEventPoints;
    toJSON(message: CMsgDOTAGetEventPoints): unknown;
    create<I extends {
        event_id?: number;
        account_id?: number;
    } & {
        event_id?: number;
        account_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAGetEventPoints>]: never; }>(base?: I): CMsgDOTAGetEventPoints;
    fromPartial<I_1 extends {
        event_id?: number;
        account_id?: number;
    } & {
        event_id?: number;
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAGetEventPoints>]: never; }>(object: I_1): CMsgDOTAGetEventPoints;
};
export declare const CMsgDOTAGetEventPointsResponse: {
    fromJSON(object: any): CMsgDOTAGetEventPointsResponse;
    toJSON(message: CMsgDOTAGetEventPointsResponse): unknown;
    create<I extends {
        total_points?: number;
        total_premium_points?: number;
        event_id?: number;
        points?: number;
        premium_points?: number;
        completed_actions?: {
            action_id?: number;
            times_completed?: number;
        }[];
        account_id?: number;
        owned?: boolean;
        audit_action?: number;
        active_season_id?: number;
    } & {
        total_points?: number;
        total_premium_points?: number;
        event_id?: number;
        points?: number;
        premium_points?: number;
        completed_actions?: {
            action_id?: number;
            times_completed?: number;
        }[] & ({
            action_id?: number;
            times_completed?: number;
        } & {
            action_id?: number;
            times_completed?: number;
        } & { [K in Exclude<keyof I["completed_actions"][number], keyof CMsgDOTAGetEventPointsResponse_Action>]: never; })[] & { [K_1 in Exclude<keyof I["completed_actions"], keyof {
            action_id?: number;
            times_completed?: number;
        }[]>]: never; };
        account_id?: number;
        owned?: boolean;
        audit_action?: number;
        active_season_id?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAGetEventPointsResponse>]: never; }>(base?: I): CMsgDOTAGetEventPointsResponse;
    fromPartial<I_1 extends {
        total_points?: number;
        total_premium_points?: number;
        event_id?: number;
        points?: number;
        premium_points?: number;
        completed_actions?: {
            action_id?: number;
            times_completed?: number;
        }[];
        account_id?: number;
        owned?: boolean;
        audit_action?: number;
        active_season_id?: number;
    } & {
        total_points?: number;
        total_premium_points?: number;
        event_id?: number;
        points?: number;
        premium_points?: number;
        completed_actions?: {
            action_id?: number;
            times_completed?: number;
        }[] & ({
            action_id?: number;
            times_completed?: number;
        } & {
            action_id?: number;
            times_completed?: number;
        } & { [K_3 in Exclude<keyof I_1["completed_actions"][number], keyof CMsgDOTAGetEventPointsResponse_Action>]: never; })[] & { [K_4 in Exclude<keyof I_1["completed_actions"], keyof {
            action_id?: number;
            times_completed?: number;
        }[]>]: never; };
        account_id?: number;
        owned?: boolean;
        audit_action?: number;
        active_season_id?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAGetEventPointsResponse>]: never; }>(object: I_1): CMsgDOTAGetEventPointsResponse;
};
export declare const CMsgDOTAGetEventPointsResponse_Action: {
    fromJSON(object: any): CMsgDOTAGetEventPointsResponse_Action;
    toJSON(message: CMsgDOTAGetEventPointsResponse_Action): unknown;
    create<I extends {
        action_id?: number;
        times_completed?: number;
    } & {
        action_id?: number;
        times_completed?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAGetEventPointsResponse_Action>]: never; }>(base?: I): CMsgDOTAGetEventPointsResponse_Action;
    fromPartial<I_1 extends {
        action_id?: number;
        times_completed?: number;
    } & {
        action_id?: number;
        times_completed?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAGetEventPointsResponse_Action>]: never; }>(object: I_1): CMsgDOTAGetEventPointsResponse_Action;
};
export declare const CMsgDOTAGetPeriodicResource: {
    fromJSON(object: any): CMsgDOTAGetPeriodicResource;
    toJSON(message: CMsgDOTAGetPeriodicResource): unknown;
    create<I extends {
        account_id?: number;
        periodic_resource_id?: number;
        timestamp?: number;
    } & {
        account_id?: number;
        periodic_resource_id?: number;
        timestamp?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAGetPeriodicResource>]: never; }>(base?: I): CMsgDOTAGetPeriodicResource;
    fromPartial<I_1 extends {
        account_id?: number;
        periodic_resource_id?: number;
        timestamp?: number;
    } & {
        account_id?: number;
        periodic_resource_id?: number;
        timestamp?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAGetPeriodicResource>]: never; }>(object: I_1): CMsgDOTAGetPeriodicResource;
};
export declare const CMsgDOTAGetPeriodicResourceResponse: {
    fromJSON(object: any): CMsgDOTAGetPeriodicResourceResponse;
    toJSON(message: CMsgDOTAGetPeriodicResourceResponse): unknown;
    create<I extends {
        periodic_resource_max?: number;
        periodic_resource_used?: number;
    } & {
        periodic_resource_max?: number;
        periodic_resource_used?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAGetPeriodicResourceResponse>]: never; }>(base?: I): CMsgDOTAGetPeriodicResourceResponse;
    fromPartial<I_1 extends {
        periodic_resource_max?: number;
        periodic_resource_used?: number;
    } & {
        periodic_resource_max?: number;
        periodic_resource_used?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAGetPeriodicResourceResponse>]: never; }>(object: I_1): CMsgDOTAGetPeriodicResourceResponse;
};
export declare const CMsgDOTAPeriodicResourceUpdated: {
    fromJSON(object: any): CMsgDOTAPeriodicResourceUpdated;
    toJSON(message: CMsgDOTAPeriodicResourceUpdated): unknown;
    create<I extends {
        periodic_resource_key?: {
            account_id?: number;
            periodic_resource_id?: number;
            timestamp?: number;
        };
        periodic_resource_value?: {
            periodic_resource_max?: number;
            periodic_resource_used?: number;
        };
    } & {
        periodic_resource_key?: {
            account_id?: number;
            periodic_resource_id?: number;
            timestamp?: number;
        } & {
            account_id?: number;
            periodic_resource_id?: number;
            timestamp?: number;
        } & { [K in Exclude<keyof I["periodic_resource_key"], keyof CMsgDOTAGetPeriodicResource>]: never; };
        periodic_resource_value?: {
            periodic_resource_max?: number;
            periodic_resource_used?: number;
        } & {
            periodic_resource_max?: number;
            periodic_resource_used?: number;
        } & { [K_1 in Exclude<keyof I["periodic_resource_value"], keyof CMsgDOTAGetPeriodicResourceResponse>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAPeriodicResourceUpdated>]: never; }>(base?: I): CMsgDOTAPeriodicResourceUpdated;
    fromPartial<I_1 extends {
        periodic_resource_key?: {
            account_id?: number;
            periodic_resource_id?: number;
            timestamp?: number;
        };
        periodic_resource_value?: {
            periodic_resource_max?: number;
            periodic_resource_used?: number;
        };
    } & {
        periodic_resource_key?: {
            account_id?: number;
            periodic_resource_id?: number;
            timestamp?: number;
        } & {
            account_id?: number;
            periodic_resource_id?: number;
            timestamp?: number;
        } & { [K_3 in Exclude<keyof I_1["periodic_resource_key"], keyof CMsgDOTAGetPeriodicResource>]: never; };
        periodic_resource_value?: {
            periodic_resource_max?: number;
            periodic_resource_used?: number;
        } & {
            periodic_resource_max?: number;
            periodic_resource_used?: number;
        } & { [K_4 in Exclude<keyof I_1["periodic_resource_value"], keyof CMsgDOTAGetPeriodicResourceResponse>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAPeriodicResourceUpdated>]: never; }>(object: I_1): CMsgDOTAPeriodicResourceUpdated;
};
export declare const CMsgDOTACompendiumSelection: {
    fromJSON(object: any): CMsgDOTACompendiumSelection;
    toJSON(message: CMsgDOTACompendiumSelection): unknown;
    create<I extends {
        selection_index?: number;
        selection?: number;
        leagueid?: number;
    } & {
        selection_index?: number;
        selection?: number;
        leagueid?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTACompendiumSelection>]: never; }>(base?: I): CMsgDOTACompendiumSelection;
    fromPartial<I_1 extends {
        selection_index?: number;
        selection?: number;
        leagueid?: number;
    } & {
        selection_index?: number;
        selection?: number;
        leagueid?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTACompendiumSelection>]: never; }>(object: I_1): CMsgDOTACompendiumSelection;
};
export declare const CMsgDOTACompendiumSelectionResponse: {
    fromJSON(object: any): CMsgDOTACompendiumSelectionResponse;
    toJSON(message: CMsgDOTACompendiumSelectionResponse): unknown;
    create<I extends {
        eresult?: number;
    } & {
        eresult?: number;
    } & { [K in Exclude<keyof I, "eresult">]: never; }>(base?: I): CMsgDOTACompendiumSelectionResponse;
    fromPartial<I_1 extends {
        eresult?: number;
    } & {
        eresult?: number;
    } & { [K_1 in Exclude<keyof I_1, "eresult">]: never; }>(object: I_1): CMsgDOTACompendiumSelectionResponse;
};
export declare const CMsgDOTACompendiumData: {
    fromJSON(object: any): CMsgDOTACompendiumData;
    toJSON(message: CMsgDOTACompendiumData): unknown;
    create<I extends {
        selections?: {
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        }[];
    } & {
        selections?: {
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        }[] & ({
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        } & {
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        } & { [K in Exclude<keyof I["selections"][number], keyof CMsgDOTACompendiumSelection>]: never; })[] & { [K_1 in Exclude<keyof I["selections"], keyof {
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "selections">]: never; }>(base?: I): CMsgDOTACompendiumData;
    fromPartial<I_1 extends {
        selections?: {
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        }[];
    } & {
        selections?: {
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        }[] & ({
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        } & {
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        } & { [K_3 in Exclude<keyof I_1["selections"][number], keyof CMsgDOTACompendiumSelection>]: never; })[] & { [K_4 in Exclude<keyof I_1["selections"], keyof {
            selection_index?: number;
            selection?: number;
            leagueid?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "selections">]: never; }>(object: I_1): CMsgDOTACompendiumData;
};
export declare const CMsgDOTACompendiumDataRequest: {
    fromJSON(object: any): CMsgDOTACompendiumDataRequest;
    toJSON(message: CMsgDOTACompendiumDataRequest): unknown;
    create<I extends {
        account_id?: number;
        leagueid?: number;
    } & {
        account_id?: number;
        leagueid?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTACompendiumDataRequest>]: never; }>(base?: I): CMsgDOTACompendiumDataRequest;
    fromPartial<I_1 extends {
        account_id?: number;
        leagueid?: number;
    } & {
        account_id?: number;
        leagueid?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTACompendiumDataRequest>]: never; }>(object: I_1): CMsgDOTACompendiumDataRequest;
};
export declare const CMsgDOTACompendiumDataResponse: {
    fromJSON(object: any): CMsgDOTACompendiumDataResponse;
    toJSON(message: CMsgDOTACompendiumDataResponse): unknown;
    create<I extends {
        account_id?: number;
        leagueid?: number;
        result?: number;
        compendium_data?: {
            selections?: {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            }[];
        };
    } & {
        account_id?: number;
        leagueid?: number;
        result?: number;
        compendium_data?: {
            selections?: {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            }[];
        } & {
            selections?: {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            }[] & ({
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            } & {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            } & { [K in Exclude<keyof I["compendium_data"]["selections"][number], keyof CMsgDOTACompendiumSelection>]: never; })[] & { [K_1 in Exclude<keyof I["compendium_data"]["selections"], keyof {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["compendium_data"], "selections">]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgDOTACompendiumDataResponse>]: never; }>(base?: I): CMsgDOTACompendiumDataResponse;
    fromPartial<I_1 extends {
        account_id?: number;
        leagueid?: number;
        result?: number;
        compendium_data?: {
            selections?: {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            }[];
        };
    } & {
        account_id?: number;
        leagueid?: number;
        result?: number;
        compendium_data?: {
            selections?: {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            }[];
        } & {
            selections?: {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            }[] & ({
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            } & {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            } & { [K_4 in Exclude<keyof I_1["compendium_data"]["selections"][number], keyof CMsgDOTACompendiumSelection>]: never; })[] & { [K_5 in Exclude<keyof I_1["compendium_data"]["selections"], keyof {
                selection_index?: number;
                selection?: number;
                leagueid?: number;
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I_1["compendium_data"], "selections">]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgDOTACompendiumDataResponse>]: never; }>(object: I_1): CMsgDOTACompendiumDataResponse;
};
export declare const CMsgDOTAGetPlayerMatchHistory: {
    fromJSON(object: any): CMsgDOTAGetPlayerMatchHistory;
    toJSON(message: CMsgDOTAGetPlayerMatchHistory): unknown;
    create<I extends {
        account_id?: number;
        start_at_match_id?: string;
        matches_requested?: number;
        hero_id?: number;
        request_id?: number;
        include_practice_matches?: boolean;
        include_custom_games?: boolean;
        include_event_games?: boolean;
    } & {
        account_id?: number;
        start_at_match_id?: string;
        matches_requested?: number;
        hero_id?: number;
        request_id?: number;
        include_practice_matches?: boolean;
        include_custom_games?: boolean;
        include_event_games?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAGetPlayerMatchHistory>]: never; }>(base?: I): CMsgDOTAGetPlayerMatchHistory;
    fromPartial<I_1 extends {
        account_id?: number;
        start_at_match_id?: string;
        matches_requested?: number;
        hero_id?: number;
        request_id?: number;
        include_practice_matches?: boolean;
        include_custom_games?: boolean;
        include_event_games?: boolean;
    } & {
        account_id?: number;
        start_at_match_id?: string;
        matches_requested?: number;
        hero_id?: number;
        request_id?: number;
        include_practice_matches?: boolean;
        include_custom_games?: boolean;
        include_event_games?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAGetPlayerMatchHistory>]: never; }>(object: I_1): CMsgDOTAGetPlayerMatchHistory;
};
export declare const CMsgDOTAGetPlayerMatchHistoryResponse: {
    fromJSON(object: any): CMsgDOTAGetPlayerMatchHistoryResponse;
    toJSON(message: CMsgDOTAGetPlayerMatchHistoryResponse): unknown;
    create<I extends {
        matches?: {
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        }[];
        request_id?: number;
    } & {
        matches?: {
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        }[] & ({
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        } & {
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        } & { [K in Exclude<keyof I["matches"][number], keyof CMsgDOTAGetPlayerMatchHistoryResponse_Match>]: never; })[] & { [K_1 in Exclude<keyof I["matches"], keyof {
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        }[]>]: never; };
        request_id?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgDOTAGetPlayerMatchHistoryResponse>]: never; }>(base?: I): CMsgDOTAGetPlayerMatchHistoryResponse;
    fromPartial<I_1 extends {
        matches?: {
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        }[];
        request_id?: number;
    } & {
        matches?: {
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        }[] & ({
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        } & {
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        } & { [K_3 in Exclude<keyof I_1["matches"][number], keyof CMsgDOTAGetPlayerMatchHistoryResponse_Match>]: never; })[] & { [K_4 in Exclude<keyof I_1["matches"], keyof {
            match_id?: string;
            start_time?: number;
            hero_id?: number;
            winner?: boolean;
            game_mode?: number;
            rank_change?: number;
            previous_rank?: number;
            lobby_type?: number;
            solo_rank?: boolean;
            abandon?: boolean;
            duration?: number;
            engine?: number;
            active_plus_subscription?: boolean;
            seasonal_rank?: boolean;
            tourney_id?: number;
            tourney_round?: number;
            tourney_tier?: number;
            tourney_division?: number;
            team_id?: number;
            team_name?: string;
            ugc_team_ui_logo?: string;
        }[]>]: never; };
        request_id?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgDOTAGetPlayerMatchHistoryResponse>]: never; }>(object: I_1): CMsgDOTAGetPlayerMatchHistoryResponse;
};
export declare const CMsgDOTAGetPlayerMatchHistoryResponse_Match: {
    fromJSON(object: any): CMsgDOTAGetPlayerMatchHistoryResponse_Match;
    toJSON(message: CMsgDOTAGetPlayerMatchHistoryResponse_Match): unknown;
    create<I extends {
        match_id?: string;
        start_time?: number;
        hero_id?: number;
        winner?: boolean;
        game_mode?: number;
        rank_change?: number;
        previous_rank?: number;
        lobby_type?: number;
        solo_rank?: boolean;
        abandon?: boolean;
        duration?: number;
        engine?: number;
        active_plus_subscription?: boolean;
        seasonal_rank?: boolean;
        tourney_id?: number;
        tourney_round?: number;
        tourney_tier?: number;
        tourney_division?: number;
        team_id?: number;
        team_name?: string;
        ugc_team_ui_logo?: string;
    } & {
        match_id?: string;
        start_time?: number;
        hero_id?: number;
        winner?: boolean;
        game_mode?: number;
        rank_change?: number;
        previous_rank?: number;
        lobby_type?: number;
        solo_rank?: boolean;
        abandon?: boolean;
        duration?: number;
        engine?: number;
        active_plus_subscription?: boolean;
        seasonal_rank?: boolean;
        tourney_id?: number;
        tourney_round?: number;
        tourney_tier?: number;
        tourney_division?: number;
        team_id?: number;
        team_name?: string;
        ugc_team_ui_logo?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAGetPlayerMatchHistoryResponse_Match>]: never; }>(base?: I): CMsgDOTAGetPlayerMatchHistoryResponse_Match;
    fromPartial<I_1 extends {
        match_id?: string;
        start_time?: number;
        hero_id?: number;
        winner?: boolean;
        game_mode?: number;
        rank_change?: number;
        previous_rank?: number;
        lobby_type?: number;
        solo_rank?: boolean;
        abandon?: boolean;
        duration?: number;
        engine?: number;
        active_plus_subscription?: boolean;
        seasonal_rank?: boolean;
        tourney_id?: number;
        tourney_round?: number;
        tourney_tier?: number;
        tourney_division?: number;
        team_id?: number;
        team_name?: string;
        ugc_team_ui_logo?: string;
    } & {
        match_id?: string;
        start_time?: number;
        hero_id?: number;
        winner?: boolean;
        game_mode?: number;
        rank_change?: number;
        previous_rank?: number;
        lobby_type?: number;
        solo_rank?: boolean;
        abandon?: boolean;
        duration?: number;
        engine?: number;
        active_plus_subscription?: boolean;
        seasonal_rank?: boolean;
        tourney_id?: number;
        tourney_round?: number;
        tourney_tier?: number;
        tourney_division?: number;
        team_id?: number;
        team_name?: string;
        ugc_team_ui_logo?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAGetPlayerMatchHistoryResponse_Match>]: never; }>(object: I_1): CMsgDOTAGetPlayerMatchHistoryResponse_Match;
};
export declare const CMsgGCNotificationsRequest: {
    fromJSON(_: any): CMsgGCNotificationsRequest;
    toJSON(_: CMsgGCNotificationsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgGCNotificationsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgGCNotificationsRequest;
};
export declare const CMsgGCNotifications_Notification: {
    fromJSON(object: any): CMsgGCNotifications_Notification;
    toJSON(message: CMsgGCNotifications_Notification): unknown;
    create<I extends {
        id?: string;
        type?: number;
        timestamp?: number;
        reference_a?: number;
        reference_b?: number;
        reference_c?: number;
        message?: string;
        unread?: boolean;
    } & {
        id?: string;
        type?: number;
        timestamp?: number;
        reference_a?: number;
        reference_b?: number;
        reference_c?: number;
        message?: string;
        unread?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgGCNotifications_Notification>]: never; }>(base?: I): CMsgGCNotifications_Notification;
    fromPartial<I_1 extends {
        id?: string;
        type?: number;
        timestamp?: number;
        reference_a?: number;
        reference_b?: number;
        reference_c?: number;
        message?: string;
        unread?: boolean;
    } & {
        id?: string;
        type?: number;
        timestamp?: number;
        reference_a?: number;
        reference_b?: number;
        reference_c?: number;
        message?: string;
        unread?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCNotifications_Notification>]: never; }>(object: I_1): CMsgGCNotifications_Notification;
};
export declare const CMsgGCNotificationsUpdate: {
    fromJSON(object: any): CMsgGCNotificationsUpdate;
    toJSON(message: CMsgGCNotificationsUpdate): unknown;
    create<I extends {
        result?: CMsgGCNotificationsUpdate_EResult;
        notifications?: {
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        }[];
    } & {
        result?: CMsgGCNotificationsUpdate_EResult;
        notifications?: {
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        }[] & ({
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        } & {
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        } & { [K in Exclude<keyof I["notifications"][number], keyof CMsgGCNotifications_Notification>]: never; })[] & { [K_1 in Exclude<keyof I["notifications"], keyof {
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgGCNotificationsUpdate>]: never; }>(base?: I): CMsgGCNotificationsUpdate;
    fromPartial<I_1 extends {
        result?: CMsgGCNotificationsUpdate_EResult;
        notifications?: {
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        }[];
    } & {
        result?: CMsgGCNotificationsUpdate_EResult;
        notifications?: {
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        }[] & ({
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        } & {
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        } & { [K_3 in Exclude<keyof I_1["notifications"][number], keyof CMsgGCNotifications_Notification>]: never; })[] & { [K_4 in Exclude<keyof I_1["notifications"], keyof {
            id?: string;
            type?: number;
            timestamp?: number;
            reference_a?: number;
            reference_b?: number;
            reference_c?: number;
            message?: string;
            unread?: boolean;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgGCNotificationsUpdate>]: never; }>(object: I_1): CMsgGCNotificationsUpdate;
};
export declare const CMsgGCNotificationsResponse: {
    fromJSON(object: any): CMsgGCNotificationsResponse;
    toJSON(message: CMsgGCNotificationsResponse): unknown;
    create<I extends {
        update?: {
            result?: CMsgGCNotificationsUpdate_EResult;
            notifications?: {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            }[];
        };
    } & {
        update?: {
            result?: CMsgGCNotificationsUpdate_EResult;
            notifications?: {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            }[];
        } & {
            result?: CMsgGCNotificationsUpdate_EResult;
            notifications?: {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            }[] & ({
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            } & {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            } & { [K in Exclude<keyof I["update"]["notifications"][number], keyof CMsgGCNotifications_Notification>]: never; })[] & { [K_1 in Exclude<keyof I["update"]["notifications"], keyof {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["update"], keyof CMsgGCNotificationsUpdate>]: never; };
    } & { [K_3 in Exclude<keyof I, "update">]: never; }>(base?: I): CMsgGCNotificationsResponse;
    fromPartial<I_1 extends {
        update?: {
            result?: CMsgGCNotificationsUpdate_EResult;
            notifications?: {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            }[];
        };
    } & {
        update?: {
            result?: CMsgGCNotificationsUpdate_EResult;
            notifications?: {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            }[];
        } & {
            result?: CMsgGCNotificationsUpdate_EResult;
            notifications?: {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            }[] & ({
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            } & {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            } & { [K_4 in Exclude<keyof I_1["update"]["notifications"][number], keyof CMsgGCNotifications_Notification>]: never; })[] & { [K_5 in Exclude<keyof I_1["update"]["notifications"], keyof {
                id?: string;
                type?: number;
                timestamp?: number;
                reference_a?: number;
                reference_b?: number;
                reference_c?: number;
                message?: string;
                unread?: boolean;
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I_1["update"], keyof CMsgGCNotificationsUpdate>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "update">]: never; }>(object: I_1): CMsgGCNotificationsResponse;
};
export declare const CMsgGCNotificationsMarkReadRequest: {
    fromJSON(_: any): CMsgGCNotificationsMarkReadRequest;
    toJSON(_: CMsgGCNotificationsMarkReadRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgGCNotificationsMarkReadRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgGCNotificationsMarkReadRequest;
};
export declare const CMsgGCPlayerInfoSubmit: {
    fromJSON(object: any): CMsgGCPlayerInfoSubmit;
    toJSON(message: CMsgGCPlayerInfoSubmit): unknown;
    create<I extends {
        name?: string;
        country_code?: string;
        fantasy_role?: number;
        team_id?: number;
        sponsor?: string;
    } & {
        name?: string;
        country_code?: string;
        fantasy_role?: number;
        team_id?: number;
        sponsor?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGCPlayerInfoSubmit>]: never; }>(base?: I): CMsgGCPlayerInfoSubmit;
    fromPartial<I_1 extends {
        name?: string;
        country_code?: string;
        fantasy_role?: number;
        team_id?: number;
        sponsor?: string;
    } & {
        name?: string;
        country_code?: string;
        fantasy_role?: number;
        team_id?: number;
        sponsor?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCPlayerInfoSubmit>]: never; }>(object: I_1): CMsgGCPlayerInfoSubmit;
};
export declare const CMsgGCPlayerInfoSubmitResponse: {
    fromJSON(object: any): CMsgGCPlayerInfoSubmitResponse;
    toJSON(message: CMsgGCPlayerInfoSubmitResponse): unknown;
    create<I extends {
        result?: CMsgGCPlayerInfoSubmitResponse_EResult;
    } & {
        result?: CMsgGCPlayerInfoSubmitResponse_EResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgGCPlayerInfoSubmitResponse;
    fromPartial<I_1 extends {
        result?: CMsgGCPlayerInfoSubmitResponse_EResult;
    } & {
        result?: CMsgGCPlayerInfoSubmitResponse_EResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgGCPlayerInfoSubmitResponse;
};
export declare const CMsgDOTAEmoticonAccessSDO: {
    fromJSON(object: any): CMsgDOTAEmoticonAccessSDO;
    toJSON(message: CMsgDOTAEmoticonAccessSDO): unknown;
    create<I extends {
        account_id?: number;
        unlocked_emoticons?: string;
    } & {
        account_id?: number;
        unlocked_emoticons?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAEmoticonAccessSDO>]: never; }>(base?: I): CMsgDOTAEmoticonAccessSDO;
    fromPartial<I_1 extends {
        account_id?: number;
        unlocked_emoticons?: string;
    } & {
        account_id?: number;
        unlocked_emoticons?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAEmoticonAccessSDO>]: never; }>(object: I_1): CMsgDOTAEmoticonAccessSDO;
};
export declare const CMsgClientToGCEmoticonDataRequest: {
    fromJSON(_: any): CMsgClientToGCEmoticonDataRequest;
    toJSON(_: CMsgClientToGCEmoticonDataRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCEmoticonDataRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCEmoticonDataRequest;
};
export declare const CMsgGCToClientEmoticonData: {
    fromJSON(object: any): CMsgGCToClientEmoticonData;
    toJSON(message: CMsgGCToClientEmoticonData): unknown;
    create<I extends {
        emoticon_access?: {
            account_id?: number;
            unlocked_emoticons?: string;
        };
    } & {
        emoticon_access?: {
            account_id?: number;
            unlocked_emoticons?: string;
        } & {
            account_id?: number;
            unlocked_emoticons?: string;
        } & { [K in Exclude<keyof I["emoticon_access"], keyof CMsgDOTAEmoticonAccessSDO>]: never; };
    } & { [K_1 in Exclude<keyof I, "emoticon_access">]: never; }>(base?: I): CMsgGCToClientEmoticonData;
    fromPartial<I_1 extends {
        emoticon_access?: {
            account_id?: number;
            unlocked_emoticons?: string;
        };
    } & {
        emoticon_access?: {
            account_id?: number;
            unlocked_emoticons?: string;
        } & {
            account_id?: number;
            unlocked_emoticons?: string;
        } & { [K_2 in Exclude<keyof I_1["emoticon_access"], keyof CMsgDOTAEmoticonAccessSDO>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "emoticon_access">]: never; }>(object: I_1): CMsgGCToClientEmoticonData;
};
export declare const CMsgGCToClientTournamentItemDrop: {
    fromJSON(object: any): CMsgGCToClientTournamentItemDrop;
    toJSON(message: CMsgGCToClientTournamentItemDrop): unknown;
    create<I extends {
        item_def?: number;
        event_type?: number;
    } & {
        item_def?: number;
        event_type?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientTournamentItemDrop>]: never; }>(base?: I): CMsgGCToClientTournamentItemDrop;
    fromPartial<I_1 extends {
        item_def?: number;
        event_type?: number;
    } & {
        item_def?: number;
        event_type?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientTournamentItemDrop>]: never; }>(object: I_1): CMsgGCToClientTournamentItemDrop;
};
export declare const CMsgClientToGCGetAllHeroOrder: {
    fromJSON(_: any): CMsgClientToGCGetAllHeroOrder;
    toJSON(_: CMsgClientToGCGetAllHeroOrder): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCGetAllHeroOrder;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCGetAllHeroOrder;
};
export declare const CMsgClientToGCGetAllHeroOrderResponse: {
    fromJSON(object: any): CMsgClientToGCGetAllHeroOrderResponse;
    toJSON(message: CMsgClientToGCGetAllHeroOrderResponse): unknown;
    create<I extends {
        hero_ids?: number[];
    } & {
        hero_ids?: number[] & number[] & { [K in Exclude<keyof I["hero_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "hero_ids">]: never; }>(base?: I): CMsgClientToGCGetAllHeroOrderResponse;
    fromPartial<I_1 extends {
        hero_ids?: number[];
    } & {
        hero_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["hero_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "hero_ids">]: never; }>(object: I_1): CMsgClientToGCGetAllHeroOrderResponse;
};
export declare const CMsgClientToGCGetAllHeroProgress: {
    fromJSON(object: any): CMsgClientToGCGetAllHeroProgress;
    toJSON(message: CMsgClientToGCGetAllHeroProgress): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgClientToGCGetAllHeroProgress;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgClientToGCGetAllHeroProgress;
};
export declare const CMsgClientToGCGetAllHeroProgressResponse: {
    fromJSON(object: any): CMsgClientToGCGetAllHeroProgressResponse;
    toJSON(message: CMsgClientToGCGetAllHeroProgressResponse): unknown;
    create<I extends {
        account_id?: number;
        curr_hero_id?: number;
        laps_completed?: number;
        curr_hero_games?: number;
        curr_lap_time_started?: number;
        curr_lap_games?: number;
        best_lap_games?: number;
        best_lap_time?: number;
        lap_heroes_completed?: number;
        lap_heroes_remaining?: number;
        next_hero_id?: number;
        prev_hero_id?: number;
        prev_hero_games?: number;
        prev_avg_tries?: number;
        curr_avg_tries?: number;
        next_avg_tries?: number;
        full_lap_avg_tries?: number;
        curr_lap_avg_tries?: number;
        profile_name?: string;
        start_hero_id?: number;
    } & {
        account_id?: number;
        curr_hero_id?: number;
        laps_completed?: number;
        curr_hero_games?: number;
        curr_lap_time_started?: number;
        curr_lap_games?: number;
        best_lap_games?: number;
        best_lap_time?: number;
        lap_heroes_completed?: number;
        lap_heroes_remaining?: number;
        next_hero_id?: number;
        prev_hero_id?: number;
        prev_hero_games?: number;
        prev_avg_tries?: number;
        curr_avg_tries?: number;
        next_avg_tries?: number;
        full_lap_avg_tries?: number;
        curr_lap_avg_tries?: number;
        profile_name?: string;
        start_hero_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCGetAllHeroProgressResponse>]: never; }>(base?: I): CMsgClientToGCGetAllHeroProgressResponse;
    fromPartial<I_1 extends {
        account_id?: number;
        curr_hero_id?: number;
        laps_completed?: number;
        curr_hero_games?: number;
        curr_lap_time_started?: number;
        curr_lap_games?: number;
        best_lap_games?: number;
        best_lap_time?: number;
        lap_heroes_completed?: number;
        lap_heroes_remaining?: number;
        next_hero_id?: number;
        prev_hero_id?: number;
        prev_hero_games?: number;
        prev_avg_tries?: number;
        curr_avg_tries?: number;
        next_avg_tries?: number;
        full_lap_avg_tries?: number;
        curr_lap_avg_tries?: number;
        profile_name?: string;
        start_hero_id?: number;
    } & {
        account_id?: number;
        curr_hero_id?: number;
        laps_completed?: number;
        curr_hero_games?: number;
        curr_lap_time_started?: number;
        curr_lap_games?: number;
        best_lap_games?: number;
        best_lap_time?: number;
        lap_heroes_completed?: number;
        lap_heroes_remaining?: number;
        next_hero_id?: number;
        prev_hero_id?: number;
        prev_hero_games?: number;
        prev_avg_tries?: number;
        curr_avg_tries?: number;
        next_avg_tries?: number;
        full_lap_avg_tries?: number;
        curr_lap_avg_tries?: number;
        profile_name?: string;
        start_hero_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCGetAllHeroProgressResponse>]: never; }>(object: I_1): CMsgClientToGCGetAllHeroProgressResponse;
};
export declare const CMsgClientToGCGetTrophyList: {
    fromJSON(object: any): CMsgClientToGCGetTrophyList;
    toJSON(message: CMsgClientToGCGetTrophyList): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgClientToGCGetTrophyList;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgClientToGCGetTrophyList;
};
export declare const CMsgClientToGCGetTrophyListResponse: {
    fromJSON(object: any): CMsgClientToGCGetTrophyListResponse;
    toJSON(message: CMsgClientToGCGetTrophyListResponse): unknown;
    create<I extends {
        trophies?: {
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        }[];
    } & {
        trophies?: {
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        }[] & ({
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        } & {
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        } & { [K in Exclude<keyof I["trophies"][number], keyof CMsgClientToGCGetTrophyListResponse_Trophy>]: never; })[] & { [K_1 in Exclude<keyof I["trophies"], keyof {
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "trophies">]: never; }>(base?: I): CMsgClientToGCGetTrophyListResponse;
    fromPartial<I_1 extends {
        trophies?: {
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        }[];
    } & {
        trophies?: {
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        }[] & ({
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        } & {
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        } & { [K_3 in Exclude<keyof I_1["trophies"][number], keyof CMsgClientToGCGetTrophyListResponse_Trophy>]: never; })[] & { [K_4 in Exclude<keyof I_1["trophies"], keyof {
            trophy_id?: number;
            trophy_score?: number;
            last_updated?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "trophies">]: never; }>(object: I_1): CMsgClientToGCGetTrophyListResponse;
};
export declare const CMsgClientToGCGetTrophyListResponse_Trophy: {
    fromJSON(object: any): CMsgClientToGCGetTrophyListResponse_Trophy;
    toJSON(message: CMsgClientToGCGetTrophyListResponse_Trophy): unknown;
    create<I extends {
        trophy_id?: number;
        trophy_score?: number;
        last_updated?: number;
    } & {
        trophy_id?: number;
        trophy_score?: number;
        last_updated?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCGetTrophyListResponse_Trophy>]: never; }>(base?: I): CMsgClientToGCGetTrophyListResponse_Trophy;
    fromPartial<I_1 extends {
        trophy_id?: number;
        trophy_score?: number;
        last_updated?: number;
    } & {
        trophy_id?: number;
        trophy_score?: number;
        last_updated?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCGetTrophyListResponse_Trophy>]: never; }>(object: I_1): CMsgClientToGCGetTrophyListResponse_Trophy;
};
export declare const CMsgGCToClientTrophyAwarded: {
    fromJSON(object: any): CMsgGCToClientTrophyAwarded;
    toJSON(message: CMsgGCToClientTrophyAwarded): unknown;
    create<I extends {
        trophy_id?: number;
        trophy_score?: number;
        trophy_old_score?: number;
        last_updated?: number;
    } & {
        trophy_id?: number;
        trophy_score?: number;
        trophy_old_score?: number;
        last_updated?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientTrophyAwarded>]: never; }>(base?: I): CMsgGCToClientTrophyAwarded;
    fromPartial<I_1 extends {
        trophy_id?: number;
        trophy_score?: number;
        trophy_old_score?: number;
        last_updated?: number;
    } & {
        trophy_id?: number;
        trophy_score?: number;
        trophy_old_score?: number;
        last_updated?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientTrophyAwarded>]: never; }>(object: I_1): CMsgGCToClientTrophyAwarded;
};
export declare const CMsgClientToGCGetProfileCard: {
    fromJSON(object: any): CMsgClientToGCGetProfileCard;
    toJSON(message: CMsgClientToGCGetProfileCard): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgClientToGCGetProfileCard;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgClientToGCGetProfileCard;
};
export declare const CMsgClientToGCSetProfileCardSlots: {
    fromJSON(object: any): CMsgClientToGCSetProfileCardSlots;
    toJSON(message: CMsgClientToGCSetProfileCardSlots): unknown;
    create<I extends {
        slots?: {
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        }[];
    } & {
        slots?: {
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        }[] & ({
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        } & {
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        } & { [K in Exclude<keyof I["slots"][number], keyof CMsgClientToGCSetProfileCardSlots_CardSlot>]: never; })[] & { [K_1 in Exclude<keyof I["slots"], keyof {
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "slots">]: never; }>(base?: I): CMsgClientToGCSetProfileCardSlots;
    fromPartial<I_1 extends {
        slots?: {
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        }[];
    } & {
        slots?: {
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        }[] & ({
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        } & {
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        } & { [K_3 in Exclude<keyof I_1["slots"][number], keyof CMsgClientToGCSetProfileCardSlots_CardSlot>]: never; })[] & { [K_4 in Exclude<keyof I_1["slots"], keyof {
            slot_id?: number;
            slot_type?: EProfileCardSlotType;
            slot_value?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "slots">]: never; }>(object: I_1): CMsgClientToGCSetProfileCardSlots;
};
export declare const CMsgClientToGCSetProfileCardSlots_CardSlot: {
    fromJSON(object: any): CMsgClientToGCSetProfileCardSlots_CardSlot;
    toJSON(message: CMsgClientToGCSetProfileCardSlots_CardSlot): unknown;
    create<I extends {
        slot_id?: number;
        slot_type?: EProfileCardSlotType;
        slot_value?: string;
    } & {
        slot_id?: number;
        slot_type?: EProfileCardSlotType;
        slot_value?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSetProfileCardSlots_CardSlot>]: never; }>(base?: I): CMsgClientToGCSetProfileCardSlots_CardSlot;
    fromPartial<I_1 extends {
        slot_id?: number;
        slot_type?: EProfileCardSlotType;
        slot_value?: string;
    } & {
        slot_id?: number;
        slot_type?: EProfileCardSlotType;
        slot_value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSetProfileCardSlots_CardSlot>]: never; }>(object: I_1): CMsgClientToGCSetProfileCardSlots_CardSlot;
};
export declare const CMsgClientToGCGetProfileCardStats: {
    fromJSON(_: any): CMsgClientToGCGetProfileCardStats;
    toJSON(_: CMsgClientToGCGetProfileCardStats): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCGetProfileCardStats;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCGetProfileCardStats;
};
export declare const CMsgClientToGCCreateHeroStatue: {
    fromJSON(object: any): CMsgClientToGCCreateHeroStatue;
    toJSON(message: CMsgClientToGCCreateHeroStatue): unknown;
    create<I extends {
        source_item_id?: string;
        hero_id?: number;
        sequence_name?: string;
        cycle?: number;
        wearables?: number[];
        inscription?: string;
        styles?: number[];
        reforger_item_id?: string;
        tournament_drop?: boolean;
    } & {
        source_item_id?: string;
        hero_id?: number;
        sequence_name?: string;
        cycle?: number;
        wearables?: number[] & number[] & { [K in Exclude<keyof I["wearables"], keyof number[]>]: never; };
        inscription?: string;
        styles?: number[] & number[] & { [K_1 in Exclude<keyof I["styles"], keyof number[]>]: never; };
        reforger_item_id?: string;
        tournament_drop?: boolean;
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCCreateHeroStatue>]: never; }>(base?: I): CMsgClientToGCCreateHeroStatue;
    fromPartial<I_1 extends {
        source_item_id?: string;
        hero_id?: number;
        sequence_name?: string;
        cycle?: number;
        wearables?: number[];
        inscription?: string;
        styles?: number[];
        reforger_item_id?: string;
        tournament_drop?: boolean;
    } & {
        source_item_id?: string;
        hero_id?: number;
        sequence_name?: string;
        cycle?: number;
        wearables?: number[] & number[] & { [K_3 in Exclude<keyof I_1["wearables"], keyof number[]>]: never; };
        inscription?: string;
        styles?: number[] & number[] & { [K_4 in Exclude<keyof I_1["styles"], keyof number[]>]: never; };
        reforger_item_id?: string;
        tournament_drop?: boolean;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCCreateHeroStatue>]: never; }>(object: I_1): CMsgClientToGCCreateHeroStatue;
};
export declare const CMsgGCToClientHeroStatueCreateResult: {
    fromJSON(object: any): CMsgGCToClientHeroStatueCreateResult;
    toJSON(message: CMsgGCToClientHeroStatueCreateResult): unknown;
    create<I extends {
        resulting_item_id?: string;
    } & {
        resulting_item_id?: string;
    } & { [K in Exclude<keyof I, "resulting_item_id">]: never; }>(base?: I): CMsgGCToClientHeroStatueCreateResult;
    fromPartial<I_1 extends {
        resulting_item_id?: string;
    } & {
        resulting_item_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "resulting_item_id">]: never; }>(object: I_1): CMsgGCToClientHeroStatueCreateResult;
};
export declare const CMsgClientToGCPlayerStatsRequest: {
    fromJSON(object: any): CMsgClientToGCPlayerStatsRequest;
    toJSON(message: CMsgClientToGCPlayerStatsRequest): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgClientToGCPlayerStatsRequest;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgClientToGCPlayerStatsRequest;
};
export declare const CMsgGCToClientPlayerStatsResponse: {
    fromJSON(object: any): CMsgGCToClientPlayerStatsResponse;
    toJSON(message: CMsgGCToClientPlayerStatsResponse): unknown;
    create<I extends {
        account_id?: number;
        player_stats?: number[];
        match_count?: number;
        mean_gpm?: number;
        mean_xppm?: number;
        mean_lasthits?: number;
        rampages?: number;
        triple_kills?: number;
        first_blood_claimed?: number;
        first_blood_given?: number;
        couriers_killed?: number;
        aegises_snatched?: number;
        cheeses_eaten?: number;
        creeps_stacked?: number;
        fight_score?: number;
        farm_score?: number;
        support_score?: number;
        push_score?: number;
        versatility_score?: number;
        mean_networth?: number;
        mean_damage?: number;
        mean_heals?: number;
        rapiers_purchased?: number;
    } & {
        account_id?: number;
        player_stats?: number[] & number[] & { [K in Exclude<keyof I["player_stats"], keyof number[]>]: never; };
        match_count?: number;
        mean_gpm?: number;
        mean_xppm?: number;
        mean_lasthits?: number;
        rampages?: number;
        triple_kills?: number;
        first_blood_claimed?: number;
        first_blood_given?: number;
        couriers_killed?: number;
        aegises_snatched?: number;
        cheeses_eaten?: number;
        creeps_stacked?: number;
        fight_score?: number;
        farm_score?: number;
        support_score?: number;
        push_score?: number;
        versatility_score?: number;
        mean_networth?: number;
        mean_damage?: number;
        mean_heals?: number;
        rapiers_purchased?: number;
    } & { [K_1 in Exclude<keyof I, keyof CMsgGCToClientPlayerStatsResponse>]: never; }>(base?: I): CMsgGCToClientPlayerStatsResponse;
    fromPartial<I_1 extends {
        account_id?: number;
        player_stats?: number[];
        match_count?: number;
        mean_gpm?: number;
        mean_xppm?: number;
        mean_lasthits?: number;
        rampages?: number;
        triple_kills?: number;
        first_blood_claimed?: number;
        first_blood_given?: number;
        couriers_killed?: number;
        aegises_snatched?: number;
        cheeses_eaten?: number;
        creeps_stacked?: number;
        fight_score?: number;
        farm_score?: number;
        support_score?: number;
        push_score?: number;
        versatility_score?: number;
        mean_networth?: number;
        mean_damage?: number;
        mean_heals?: number;
        rapiers_purchased?: number;
    } & {
        account_id?: number;
        player_stats?: number[] & number[] & { [K_2 in Exclude<keyof I_1["player_stats"], keyof number[]>]: never; };
        match_count?: number;
        mean_gpm?: number;
        mean_xppm?: number;
        mean_lasthits?: number;
        rampages?: number;
        triple_kills?: number;
        first_blood_claimed?: number;
        first_blood_given?: number;
        couriers_killed?: number;
        aegises_snatched?: number;
        cheeses_eaten?: number;
        creeps_stacked?: number;
        fight_score?: number;
        farm_score?: number;
        support_score?: number;
        push_score?: number;
        versatility_score?: number;
        mean_networth?: number;
        mean_damage?: number;
        mean_heals?: number;
        rapiers_purchased?: number;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgGCToClientPlayerStatsResponse>]: never; }>(object: I_1): CMsgGCToClientPlayerStatsResponse;
};
export declare const CMsgClientToGCCustomGamesFriendsPlayedRequest: {
    fromJSON(_: any): CMsgClientToGCCustomGamesFriendsPlayedRequest;
    toJSON(_: CMsgClientToGCCustomGamesFriendsPlayedRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCCustomGamesFriendsPlayedRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCCustomGamesFriendsPlayedRequest;
};
export declare const CMsgGCToClientCustomGamesFriendsPlayedResponse: {
    fromJSON(object: any): CMsgGCToClientCustomGamesFriendsPlayedResponse;
    toJSON(message: CMsgGCToClientCustomGamesFriendsPlayedResponse): unknown;
    create<I extends {
        account_id?: number;
        games?: {
            custom_game_id?: string;
            account_ids?: number[];
        }[];
    } & {
        account_id?: number;
        games?: {
            custom_game_id?: string;
            account_ids?: number[];
        }[] & ({
            custom_game_id?: string;
            account_ids?: number[];
        } & {
            custom_game_id?: string;
            account_ids?: number[] & number[] & { [K in Exclude<keyof I["games"][number]["account_ids"], keyof number[]>]: never; };
        } & { [K_1 in Exclude<keyof I["games"][number], keyof CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame>]: never; })[] & { [K_2 in Exclude<keyof I["games"], keyof {
            custom_game_id?: string;
            account_ids?: number[];
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgGCToClientCustomGamesFriendsPlayedResponse>]: never; }>(base?: I): CMsgGCToClientCustomGamesFriendsPlayedResponse;
    fromPartial<I_1 extends {
        account_id?: number;
        games?: {
            custom_game_id?: string;
            account_ids?: number[];
        }[];
    } & {
        account_id?: number;
        games?: {
            custom_game_id?: string;
            account_ids?: number[];
        }[] & ({
            custom_game_id?: string;
            account_ids?: number[];
        } & {
            custom_game_id?: string;
            account_ids?: number[] & number[] & { [K_4 in Exclude<keyof I_1["games"][number]["account_ids"], keyof number[]>]: never; };
        } & { [K_5 in Exclude<keyof I_1["games"][number], keyof CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame>]: never; })[] & { [K_6 in Exclude<keyof I_1["games"], keyof {
            custom_game_id?: string;
            account_ids?: number[];
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgGCToClientCustomGamesFriendsPlayedResponse>]: never; }>(object: I_1): CMsgGCToClientCustomGamesFriendsPlayedResponse;
};
export declare const CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame: {
    fromJSON(object: any): CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame;
    toJSON(message: CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame): unknown;
    create<I extends {
        custom_game_id?: string;
        account_ids?: number[];
    } & {
        custom_game_id?: string;
        account_ids?: number[] & number[] & { [K in Exclude<keyof I["account_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame>]: never; }>(base?: I): CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame;
    fromPartial<I_1 extends {
        custom_game_id?: string;
        account_ids?: number[];
    } & {
        custom_game_id?: string;
        account_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["account_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame>]: never; }>(object: I_1): CMsgGCToClientCustomGamesFriendsPlayedResponse_CustomGame;
};
export declare const CMsgClientToGCSocialFeedPostCommentRequest: {
    fromJSON(object: any): CMsgClientToGCSocialFeedPostCommentRequest;
    toJSON(message: CMsgClientToGCSocialFeedPostCommentRequest): unknown;
    create<I extends {
        event_id?: string;
        comment?: string;
    } & {
        event_id?: string;
        comment?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSocialFeedPostCommentRequest>]: never; }>(base?: I): CMsgClientToGCSocialFeedPostCommentRequest;
    fromPartial<I_1 extends {
        event_id?: string;
        comment?: string;
    } & {
        event_id?: string;
        comment?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSocialFeedPostCommentRequest>]: never; }>(object: I_1): CMsgClientToGCSocialFeedPostCommentRequest;
};
export declare const CMsgGCToClientSocialFeedPostCommentResponse: {
    fromJSON(object: any): CMsgGCToClientSocialFeedPostCommentResponse;
    toJSON(message: CMsgGCToClientSocialFeedPostCommentResponse): unknown;
    create<I extends {
        success?: boolean;
    } & {
        success?: boolean;
    } & { [K in Exclude<keyof I, "success">]: never; }>(base?: I): CMsgGCToClientSocialFeedPostCommentResponse;
    fromPartial<I_1 extends {
        success?: boolean;
    } & {
        success?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "success">]: never; }>(object: I_1): CMsgGCToClientSocialFeedPostCommentResponse;
};
export declare const CMsgClientToGCSocialFeedPostMessageRequest: {
    fromJSON(object: any): CMsgClientToGCSocialFeedPostMessageRequest;
    toJSON(message: CMsgClientToGCSocialFeedPostMessageRequest): unknown;
    create<I extends {
        message?: string;
        match_id?: string;
        match_timestamp?: number;
    } & {
        message?: string;
        match_id?: string;
        match_timestamp?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSocialFeedPostMessageRequest>]: never; }>(base?: I): CMsgClientToGCSocialFeedPostMessageRequest;
    fromPartial<I_1 extends {
        message?: string;
        match_id?: string;
        match_timestamp?: number;
    } & {
        message?: string;
        match_id?: string;
        match_timestamp?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSocialFeedPostMessageRequest>]: never; }>(object: I_1): CMsgClientToGCSocialFeedPostMessageRequest;
};
export declare const CMsgGCToClientSocialFeedPostMessageResponse: {
    fromJSON(object: any): CMsgGCToClientSocialFeedPostMessageResponse;
    toJSON(message: CMsgGCToClientSocialFeedPostMessageResponse): unknown;
    create<I extends {
        success?: boolean;
    } & {
        success?: boolean;
    } & { [K in Exclude<keyof I, "success">]: never; }>(base?: I): CMsgGCToClientSocialFeedPostMessageResponse;
    fromPartial<I_1 extends {
        success?: boolean;
    } & {
        success?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "success">]: never; }>(object: I_1): CMsgGCToClientSocialFeedPostMessageResponse;
};
export declare const CMsgClientToGCFriendsPlayedCustomGameRequest: {
    fromJSON(object: any): CMsgClientToGCFriendsPlayedCustomGameRequest;
    toJSON(message: CMsgClientToGCFriendsPlayedCustomGameRequest): unknown;
    create<I extends {
        custom_game_id?: string;
    } & {
        custom_game_id?: string;
    } & { [K in Exclude<keyof I, "custom_game_id">]: never; }>(base?: I): CMsgClientToGCFriendsPlayedCustomGameRequest;
    fromPartial<I_1 extends {
        custom_game_id?: string;
    } & {
        custom_game_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "custom_game_id">]: never; }>(object: I_1): CMsgClientToGCFriendsPlayedCustomGameRequest;
};
export declare const CMsgGCToClientFriendsPlayedCustomGameResponse: {
    fromJSON(object: any): CMsgGCToClientFriendsPlayedCustomGameResponse;
    toJSON(message: CMsgGCToClientFriendsPlayedCustomGameResponse): unknown;
    create<I extends {
        custom_game_id?: string;
        account_ids?: number[];
    } & {
        custom_game_id?: string;
        account_ids?: number[] & number[] & { [K in Exclude<keyof I["account_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgGCToClientFriendsPlayedCustomGameResponse>]: never; }>(base?: I): CMsgGCToClientFriendsPlayedCustomGameResponse;
    fromPartial<I_1 extends {
        custom_game_id?: string;
        account_ids?: number[];
    } & {
        custom_game_id?: string;
        account_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["account_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgGCToClientFriendsPlayedCustomGameResponse>]: never; }>(object: I_1): CMsgGCToClientFriendsPlayedCustomGameResponse;
};
export declare const CMsgDOTAPartyRichPresence: {
    fromJSON(object: any): CMsgDOTAPartyRichPresence;
    toJSON(message: CMsgDOTAPartyRichPresence): unknown;
    create<I extends {
        party_id?: string;
        party_state?: CSODOTAParty_State;
        open?: boolean;
        low_priority?: boolean;
        team_id?: number;
        team_name?: string;
        ugc_team_ui_logo?: string;
        members?: {
            steam_id?: string;
            coach?: boolean;
        }[];
        weekend_tourney?: {
            division?: number;
            skill_level?: number;
            round?: number;
            tournament_id?: number;
            state_seq_num?: number;
            event?: EWeekendTourneyRichPresenceEvent;
            event_round?: number;
        };
    } & {
        party_id?: string;
        party_state?: CSODOTAParty_State;
        open?: boolean;
        low_priority?: boolean;
        team_id?: number;
        team_name?: string;
        ugc_team_ui_logo?: string;
        members?: {
            steam_id?: string;
            coach?: boolean;
        }[] & ({
            steam_id?: string;
            coach?: boolean;
        } & {
            steam_id?: string;
            coach?: boolean;
        } & { [K in Exclude<keyof I["members"][number], keyof CMsgDOTAPartyRichPresence_Member>]: never; })[] & { [K_1 in Exclude<keyof I["members"], keyof {
            steam_id?: string;
            coach?: boolean;
        }[]>]: never; };
        weekend_tourney?: {
            division?: number;
            skill_level?: number;
            round?: number;
            tournament_id?: number;
            state_seq_num?: number;
            event?: EWeekendTourneyRichPresenceEvent;
            event_round?: number;
        } & {
            division?: number;
            skill_level?: number;
            round?: number;
            tournament_id?: number;
            state_seq_num?: number;
            event?: EWeekendTourneyRichPresenceEvent;
            event_round?: number;
        } & { [K_2 in Exclude<keyof I["weekend_tourney"], keyof CMsgDOTAPartyRichPresence_WeekendTourney>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgDOTAPartyRichPresence>]: never; }>(base?: I): CMsgDOTAPartyRichPresence;
    fromPartial<I_1 extends {
        party_id?: string;
        party_state?: CSODOTAParty_State;
        open?: boolean;
        low_priority?: boolean;
        team_id?: number;
        team_name?: string;
        ugc_team_ui_logo?: string;
        members?: {
            steam_id?: string;
            coach?: boolean;
        }[];
        weekend_tourney?: {
            division?: number;
            skill_level?: number;
            round?: number;
            tournament_id?: number;
            state_seq_num?: number;
            event?: EWeekendTourneyRichPresenceEvent;
            event_round?: number;
        };
    } & {
        party_id?: string;
        party_state?: CSODOTAParty_State;
        open?: boolean;
        low_priority?: boolean;
        team_id?: number;
        team_name?: string;
        ugc_team_ui_logo?: string;
        members?: {
            steam_id?: string;
            coach?: boolean;
        }[] & ({
            steam_id?: string;
            coach?: boolean;
        } & {
            steam_id?: string;
            coach?: boolean;
        } & { [K_4 in Exclude<keyof I_1["members"][number], keyof CMsgDOTAPartyRichPresence_Member>]: never; })[] & { [K_5 in Exclude<keyof I_1["members"], keyof {
            steam_id?: string;
            coach?: boolean;
        }[]>]: never; };
        weekend_tourney?: {
            division?: number;
            skill_level?: number;
            round?: number;
            tournament_id?: number;
            state_seq_num?: number;
            event?: EWeekendTourneyRichPresenceEvent;
            event_round?: number;
        } & {
            division?: number;
            skill_level?: number;
            round?: number;
            tournament_id?: number;
            state_seq_num?: number;
            event?: EWeekendTourneyRichPresenceEvent;
            event_round?: number;
        } & { [K_6 in Exclude<keyof I_1["weekend_tourney"], keyof CMsgDOTAPartyRichPresence_WeekendTourney>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgDOTAPartyRichPresence>]: never; }>(object: I_1): CMsgDOTAPartyRichPresence;
};
export declare const CMsgDOTAPartyRichPresence_Member: {
    fromJSON(object: any): CMsgDOTAPartyRichPresence_Member;
    toJSON(message: CMsgDOTAPartyRichPresence_Member): unknown;
    create<I extends {
        steam_id?: string;
        coach?: boolean;
    } & {
        steam_id?: string;
        coach?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAPartyRichPresence_Member>]: never; }>(base?: I): CMsgDOTAPartyRichPresence_Member;
    fromPartial<I_1 extends {
        steam_id?: string;
        coach?: boolean;
    } & {
        steam_id?: string;
        coach?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAPartyRichPresence_Member>]: never; }>(object: I_1): CMsgDOTAPartyRichPresence_Member;
};
export declare const CMsgDOTAPartyRichPresence_WeekendTourney: {
    fromJSON(object: any): CMsgDOTAPartyRichPresence_WeekendTourney;
    toJSON(message: CMsgDOTAPartyRichPresence_WeekendTourney): unknown;
    create<I extends {
        division?: number;
        skill_level?: number;
        round?: number;
        tournament_id?: number;
        state_seq_num?: number;
        event?: EWeekendTourneyRichPresenceEvent;
        event_round?: number;
    } & {
        division?: number;
        skill_level?: number;
        round?: number;
        tournament_id?: number;
        state_seq_num?: number;
        event?: EWeekendTourneyRichPresenceEvent;
        event_round?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAPartyRichPresence_WeekendTourney>]: never; }>(base?: I): CMsgDOTAPartyRichPresence_WeekendTourney;
    fromPartial<I_1 extends {
        division?: number;
        skill_level?: number;
        round?: number;
        tournament_id?: number;
        state_seq_num?: number;
        event?: EWeekendTourneyRichPresenceEvent;
        event_round?: number;
    } & {
        division?: number;
        skill_level?: number;
        round?: number;
        tournament_id?: number;
        state_seq_num?: number;
        event?: EWeekendTourneyRichPresenceEvent;
        event_round?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAPartyRichPresence_WeekendTourney>]: never; }>(object: I_1): CMsgDOTAPartyRichPresence_WeekendTourney;
};
export declare const CMsgDOTALobbyRichPresence: {
    fromJSON(object: any): CMsgDOTALobbyRichPresence;
    toJSON(message: CMsgDOTALobbyRichPresence): unknown;
    create<I extends {
        lobby_id?: string;
        lobby_state?: CSODOTALobby_State;
        password?: boolean;
        game_mode?: DOTA_GameMode;
        member_count?: number;
        max_member_count?: number;
        custom_game_id?: string;
        name?: string;
        lobby_type?: number;
    } & {
        lobby_id?: string;
        lobby_state?: CSODOTALobby_State;
        password?: boolean;
        game_mode?: DOTA_GameMode;
        member_count?: number;
        max_member_count?: number;
        custom_game_id?: string;
        name?: string;
        lobby_type?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTALobbyRichPresence>]: never; }>(base?: I): CMsgDOTALobbyRichPresence;
    fromPartial<I_1 extends {
        lobby_id?: string;
        lobby_state?: CSODOTALobby_State;
        password?: boolean;
        game_mode?: DOTA_GameMode;
        member_count?: number;
        max_member_count?: number;
        custom_game_id?: string;
        name?: string;
        lobby_type?: number;
    } & {
        lobby_id?: string;
        lobby_state?: CSODOTALobby_State;
        password?: boolean;
        game_mode?: DOTA_GameMode;
        member_count?: number;
        max_member_count?: number;
        custom_game_id?: string;
        name?: string;
        lobby_type?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTALobbyRichPresence>]: never; }>(object: I_1): CMsgDOTALobbyRichPresence;
};
export declare const CMsgDOTACustomGameListenServerStartedLoading: {
    fromJSON(object: any): CMsgDOTACustomGameListenServerStartedLoading;
    toJSON(message: CMsgDOTACustomGameListenServerStartedLoading): unknown;
    create<I extends {
        lobby_id?: string;
        custom_game_id?: string;
        lobby_members?: number[];
        start_time?: number;
    } & {
        lobby_id?: string;
        custom_game_id?: string;
        lobby_members?: number[] & number[] & { [K in Exclude<keyof I["lobby_members"], keyof number[]>]: never; };
        start_time?: number;
    } & { [K_1 in Exclude<keyof I, keyof CMsgDOTACustomGameListenServerStartedLoading>]: never; }>(base?: I): CMsgDOTACustomGameListenServerStartedLoading;
    fromPartial<I_1 extends {
        lobby_id?: string;
        custom_game_id?: string;
        lobby_members?: number[];
        start_time?: number;
    } & {
        lobby_id?: string;
        custom_game_id?: string;
        lobby_members?: number[] & number[] & { [K_2 in Exclude<keyof I_1["lobby_members"], keyof number[]>]: never; };
        start_time?: number;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgDOTACustomGameListenServerStartedLoading>]: never; }>(object: I_1): CMsgDOTACustomGameListenServerStartedLoading;
};
export declare const CMsgDOTACustomGameClientFinishedLoading: {
    fromJSON(object: any): CMsgDOTACustomGameClientFinishedLoading;
    toJSON(message: CMsgDOTACustomGameClientFinishedLoading): unknown;
    create<I extends {
        lobby_id?: string;
        loading_duration?: number;
        result_code?: number;
        result_string?: string;
        signon_states?: number;
        comment?: string;
    } & {
        lobby_id?: string;
        loading_duration?: number;
        result_code?: number;
        result_string?: string;
        signon_states?: number;
        comment?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTACustomGameClientFinishedLoading>]: never; }>(base?: I): CMsgDOTACustomGameClientFinishedLoading;
    fromPartial<I_1 extends {
        lobby_id?: string;
        loading_duration?: number;
        result_code?: number;
        result_string?: string;
        signon_states?: number;
        comment?: string;
    } & {
        lobby_id?: string;
        loading_duration?: number;
        result_code?: number;
        result_string?: string;
        signon_states?: number;
        comment?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTACustomGameClientFinishedLoading>]: never; }>(object: I_1): CMsgDOTACustomGameClientFinishedLoading;
};
export declare const CMsgClientToGCApplyGemCombiner: {
    fromJSON(object: any): CMsgClientToGCApplyGemCombiner;
    toJSON(message: CMsgClientToGCApplyGemCombiner): unknown;
    create<I extends {
        item_id_1?: string;
        item_id_2?: string;
    } & {
        item_id_1?: string;
        item_id_2?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCApplyGemCombiner>]: never; }>(base?: I): CMsgClientToGCApplyGemCombiner;
    fromPartial<I_1 extends {
        item_id_1?: string;
        item_id_2?: string;
    } & {
        item_id_1?: string;
        item_id_2?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCApplyGemCombiner>]: never; }>(object: I_1): CMsgClientToGCApplyGemCombiner;
};
export declare const CMsgClientToGCH264Unsupported: {
    fromJSON(_: any): CMsgClientToGCH264Unsupported;
    toJSON(_: CMsgClientToGCH264Unsupported): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCH264Unsupported;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCH264Unsupported;
};
export declare const CMsgClientToGCGetQuestProgress: {
    fromJSON(object: any): CMsgClientToGCGetQuestProgress;
    toJSON(message: CMsgClientToGCGetQuestProgress): unknown;
    create<I extends {
        quest_ids?: number[];
    } & {
        quest_ids?: number[] & number[] & { [K in Exclude<keyof I["quest_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "quest_ids">]: never; }>(base?: I): CMsgClientToGCGetQuestProgress;
    fromPartial<I_1 extends {
        quest_ids?: number[];
    } & {
        quest_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["quest_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "quest_ids">]: never; }>(object: I_1): CMsgClientToGCGetQuestProgress;
};
export declare const CMsgClientToGCGetQuestProgressResponse: {
    fromJSON(object: any): CMsgClientToGCGetQuestProgressResponse;
    toJSON(message: CMsgClientToGCGetQuestProgressResponse): unknown;
    create<I extends {
        success?: boolean;
        quests?: {
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[];
        }[];
    } & {
        success?: boolean;
        quests?: {
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[];
        }[] & ({
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[];
        } & {
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[] & ({
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            } & {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            } & { [K in Exclude<keyof I["quests"][number]["completed_challenges"][number], keyof CMsgClientToGCGetQuestProgressResponse_Challenge>]: never; })[] & { [K_1 in Exclude<keyof I["quests"][number]["completed_challenges"], keyof {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["quests"][number], keyof CMsgClientToGCGetQuestProgressResponse_Quest>]: never; })[] & { [K_3 in Exclude<keyof I["quests"], keyof {
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[];
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgClientToGCGetQuestProgressResponse>]: never; }>(base?: I): CMsgClientToGCGetQuestProgressResponse;
    fromPartial<I_1 extends {
        success?: boolean;
        quests?: {
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[];
        }[];
    } & {
        success?: boolean;
        quests?: {
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[];
        }[] & ({
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[];
        } & {
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[] & ({
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            } & {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            } & { [K_5 in Exclude<keyof I_1["quests"][number]["completed_challenges"][number], keyof CMsgClientToGCGetQuestProgressResponse_Challenge>]: never; })[] & { [K_6 in Exclude<keyof I_1["quests"][number]["completed_challenges"], keyof {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[]>]: never; };
        } & { [K_7 in Exclude<keyof I_1["quests"][number], keyof CMsgClientToGCGetQuestProgressResponse_Quest>]: never; })[] & { [K_8 in Exclude<keyof I_1["quests"], keyof {
            quest_id?: number;
            completed_challenges?: {
                challenge_id?: number;
                time_completed?: number;
                attempts?: number;
                hero_id?: number;
                template_id?: number;
                quest_rank?: number;
            }[];
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgClientToGCGetQuestProgressResponse>]: never; }>(object: I_1): CMsgClientToGCGetQuestProgressResponse;
};
export declare const CMsgClientToGCGetQuestProgressResponse_Challenge: {
    fromJSON(object: any): CMsgClientToGCGetQuestProgressResponse_Challenge;
    toJSON(message: CMsgClientToGCGetQuestProgressResponse_Challenge): unknown;
    create<I extends {
        challenge_id?: number;
        time_completed?: number;
        attempts?: number;
        hero_id?: number;
        template_id?: number;
        quest_rank?: number;
    } & {
        challenge_id?: number;
        time_completed?: number;
        attempts?: number;
        hero_id?: number;
        template_id?: number;
        quest_rank?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCGetQuestProgressResponse_Challenge>]: never; }>(base?: I): CMsgClientToGCGetQuestProgressResponse_Challenge;
    fromPartial<I_1 extends {
        challenge_id?: number;
        time_completed?: number;
        attempts?: number;
        hero_id?: number;
        template_id?: number;
        quest_rank?: number;
    } & {
        challenge_id?: number;
        time_completed?: number;
        attempts?: number;
        hero_id?: number;
        template_id?: number;
        quest_rank?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCGetQuestProgressResponse_Challenge>]: never; }>(object: I_1): CMsgClientToGCGetQuestProgressResponse_Challenge;
};
export declare const CMsgClientToGCGetQuestProgressResponse_Quest: {
    fromJSON(object: any): CMsgClientToGCGetQuestProgressResponse_Quest;
    toJSON(message: CMsgClientToGCGetQuestProgressResponse_Quest): unknown;
    create<I extends {
        quest_id?: number;
        completed_challenges?: {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        }[];
    } & {
        quest_id?: number;
        completed_challenges?: {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        }[] & ({
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        } & {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        } & { [K in Exclude<keyof I["completed_challenges"][number], keyof CMsgClientToGCGetQuestProgressResponse_Challenge>]: never; })[] & { [K_1 in Exclude<keyof I["completed_challenges"], keyof {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCGetQuestProgressResponse_Quest>]: never; }>(base?: I): CMsgClientToGCGetQuestProgressResponse_Quest;
    fromPartial<I_1 extends {
        quest_id?: number;
        completed_challenges?: {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        }[];
    } & {
        quest_id?: number;
        completed_challenges?: {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        }[] & ({
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        } & {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        } & { [K_3 in Exclude<keyof I_1["completed_challenges"][number], keyof CMsgClientToGCGetQuestProgressResponse_Challenge>]: never; })[] & { [K_4 in Exclude<keyof I_1["completed_challenges"], keyof {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCGetQuestProgressResponse_Quest>]: never; }>(object: I_1): CMsgClientToGCGetQuestProgressResponse_Quest;
};
export declare const CMsgGCToClientMatchSignedOut: {
    fromJSON(object: any): CMsgGCToClientMatchSignedOut;
    toJSON(message: CMsgGCToClientMatchSignedOut): unknown;
    create<I extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K in Exclude<keyof I, "match_id">]: never; }>(base?: I): CMsgGCToClientMatchSignedOut;
    fromPartial<I_1 extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "match_id">]: never; }>(object: I_1): CMsgGCToClientMatchSignedOut;
};
export declare const CMsgGCGetHeroStatsHistory: {
    fromJSON(object: any): CMsgGCGetHeroStatsHistory;
    toJSON(message: CMsgGCGetHeroStatsHistory): unknown;
    create<I extends {
        hero_id?: number;
    } & {
        hero_id?: number;
    } & { [K in Exclude<keyof I, "hero_id">]: never; }>(base?: I): CMsgGCGetHeroStatsHistory;
    fromPartial<I_1 extends {
        hero_id?: number;
    } & {
        hero_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "hero_id">]: never; }>(object: I_1): CMsgGCGetHeroStatsHistory;
};
export declare const CMsgGCGetHeroStatsHistoryResponse: {
    fromJSON(object: any): CMsgGCGetHeroStatsHistoryResponse;
    toJSON(message: CMsgGCGetHeroStatsHistoryResponse): unknown;
    create<I extends {
        hero_id?: number;
        records?: {
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        }[];
    } & {
        hero_id?: number;
        records?: {
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        }[] & ({
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        } & {
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        } & { [K in Exclude<keyof I["records"][number], keyof CMsgDOTASDOHeroStatsHistory>]: never; })[] & { [K_1 in Exclude<keyof I["records"], keyof {
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgGCGetHeroStatsHistoryResponse>]: never; }>(base?: I): CMsgGCGetHeroStatsHistoryResponse;
    fromPartial<I_1 extends {
        hero_id?: number;
        records?: {
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        }[];
    } & {
        hero_id?: number;
        records?: {
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        }[] & ({
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        } & {
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        } & { [K_3 in Exclude<keyof I_1["records"][number], keyof CMsgDOTASDOHeroStatsHistory>]: never; })[] & { [K_4 in Exclude<keyof I_1["records"], keyof {
            match_id?: string;
            game_mode?: number;
            lobby_type?: number;
            start_time?: number;
            won?: boolean;
            gpm?: number;
            xpm?: number;
            kills?: number;
            deaths?: number;
            assists?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgGCGetHeroStatsHistoryResponse>]: never; }>(object: I_1): CMsgGCGetHeroStatsHistoryResponse;
};
export declare const CMsgPlayerConductScorecardRequest: {
    fromJSON(_: any): CMsgPlayerConductScorecardRequest;
    toJSON(_: CMsgPlayerConductScorecardRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgPlayerConductScorecardRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgPlayerConductScorecardRequest;
};
export declare const CMsgPlayerConductScorecard: {
    fromJSON(object: any): CMsgPlayerConductScorecard;
    toJSON(message: CMsgPlayerConductScorecard): unknown;
    create<I extends {
        account_id?: number;
        match_id?: string;
        seq_num?: number;
        reasons?: number;
        matches_in_report?: number;
        matches_clean?: number;
        matches_reported?: number;
        matches_abandoned?: number;
        reports_count?: number;
        reports_parties?: number;
        commend_count?: number;
        date?: number;
        raw_behavior_score?: number;
        old_raw_behavior_score?: number;
        comms_reports?: number;
        comms_parties?: number;
        behavior_rating?: CMsgPlayerConductScorecard_EBehaviorRating;
    } & {
        account_id?: number;
        match_id?: string;
        seq_num?: number;
        reasons?: number;
        matches_in_report?: number;
        matches_clean?: number;
        matches_reported?: number;
        matches_abandoned?: number;
        reports_count?: number;
        reports_parties?: number;
        commend_count?: number;
        date?: number;
        raw_behavior_score?: number;
        old_raw_behavior_score?: number;
        comms_reports?: number;
        comms_parties?: number;
        behavior_rating?: CMsgPlayerConductScorecard_EBehaviorRating;
    } & { [K in Exclude<keyof I, keyof CMsgPlayerConductScorecard>]: never; }>(base?: I): CMsgPlayerConductScorecard;
    fromPartial<I_1 extends {
        account_id?: number;
        match_id?: string;
        seq_num?: number;
        reasons?: number;
        matches_in_report?: number;
        matches_clean?: number;
        matches_reported?: number;
        matches_abandoned?: number;
        reports_count?: number;
        reports_parties?: number;
        commend_count?: number;
        date?: number;
        raw_behavior_score?: number;
        old_raw_behavior_score?: number;
        comms_reports?: number;
        comms_parties?: number;
        behavior_rating?: CMsgPlayerConductScorecard_EBehaviorRating;
    } & {
        account_id?: number;
        match_id?: string;
        seq_num?: number;
        reasons?: number;
        matches_in_report?: number;
        matches_clean?: number;
        matches_reported?: number;
        matches_abandoned?: number;
        reports_count?: number;
        reports_parties?: number;
        commend_count?: number;
        date?: number;
        raw_behavior_score?: number;
        old_raw_behavior_score?: number;
        comms_reports?: number;
        comms_parties?: number;
        behavior_rating?: CMsgPlayerConductScorecard_EBehaviorRating;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgPlayerConductScorecard>]: never; }>(object: I_1): CMsgPlayerConductScorecard;
};
export declare const CMsgClientToGCWageringRequest: {
    fromJSON(object: any): CMsgClientToGCWageringRequest;
    toJSON(message: CMsgClientToGCWageringRequest): unknown;
    create<I extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K in Exclude<keyof I, "event_id">]: never; }>(base?: I): CMsgClientToGCWageringRequest;
    fromPartial<I_1 extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "event_id">]: never; }>(object: I_1): CMsgClientToGCWageringRequest;
};
export declare const CMsgGCToClientWageringResponse: {
    fromJSON(object: any): CMsgGCToClientWageringResponse;
    toJSON(message: CMsgGCToClientWageringResponse): unknown;
    create<I extends {
        coins_remaining?: number;
        total_points_won?: number;
        total_points_wagered?: number;
        total_points_tipped?: number;
        success_rate?: number;
        total_games_wagered?: number;
        coins_max?: number;
        rank_wagers_remaining?: number;
        rank_wagers_max?: number;
        prediction_tokens_remaining?: number;
        prediction_tokens_max?: number;
        bounties_remaining?: number;
        bounties_max?: number;
    } & {
        coins_remaining?: number;
        total_points_won?: number;
        total_points_wagered?: number;
        total_points_tipped?: number;
        success_rate?: number;
        total_games_wagered?: number;
        coins_max?: number;
        rank_wagers_remaining?: number;
        rank_wagers_max?: number;
        prediction_tokens_remaining?: number;
        prediction_tokens_max?: number;
        bounties_remaining?: number;
        bounties_max?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientWageringResponse>]: never; }>(base?: I): CMsgGCToClientWageringResponse;
    fromPartial<I_1 extends {
        coins_remaining?: number;
        total_points_won?: number;
        total_points_wagered?: number;
        total_points_tipped?: number;
        success_rate?: number;
        total_games_wagered?: number;
        coins_max?: number;
        rank_wagers_remaining?: number;
        rank_wagers_max?: number;
        prediction_tokens_remaining?: number;
        prediction_tokens_max?: number;
        bounties_remaining?: number;
        bounties_max?: number;
    } & {
        coins_remaining?: number;
        total_points_won?: number;
        total_points_wagered?: number;
        total_points_tipped?: number;
        success_rate?: number;
        total_games_wagered?: number;
        coins_max?: number;
        rank_wagers_remaining?: number;
        rank_wagers_max?: number;
        prediction_tokens_remaining?: number;
        prediction_tokens_max?: number;
        bounties_remaining?: number;
        bounties_max?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientWageringResponse>]: never; }>(object: I_1): CMsgGCToClientWageringResponse;
};
export declare const CMsgGCToClientWageringUpdate: {
    fromJSON(object: any): CMsgGCToClientWageringUpdate;
    toJSON(message: CMsgGCToClientWageringUpdate): unknown;
    create<I extends {
        event_id?: number;
        wagering_info?: {
            coins_remaining?: number;
            total_points_won?: number;
            total_points_wagered?: number;
            total_points_tipped?: number;
            success_rate?: number;
            total_games_wagered?: number;
            coins_max?: number;
            rank_wagers_remaining?: number;
            rank_wagers_max?: number;
            prediction_tokens_remaining?: number;
            prediction_tokens_max?: number;
            bounties_remaining?: number;
            bounties_max?: number;
        };
    } & {
        event_id?: number;
        wagering_info?: {
            coins_remaining?: number;
            total_points_won?: number;
            total_points_wagered?: number;
            total_points_tipped?: number;
            success_rate?: number;
            total_games_wagered?: number;
            coins_max?: number;
            rank_wagers_remaining?: number;
            rank_wagers_max?: number;
            prediction_tokens_remaining?: number;
            prediction_tokens_max?: number;
            bounties_remaining?: number;
            bounties_max?: number;
        } & {
            coins_remaining?: number;
            total_points_won?: number;
            total_points_wagered?: number;
            total_points_tipped?: number;
            success_rate?: number;
            total_games_wagered?: number;
            coins_max?: number;
            rank_wagers_remaining?: number;
            rank_wagers_max?: number;
            prediction_tokens_remaining?: number;
            prediction_tokens_max?: number;
            bounties_remaining?: number;
            bounties_max?: number;
        } & { [K in Exclude<keyof I["wagering_info"], keyof CMsgGCToClientWageringResponse>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgGCToClientWageringUpdate>]: never; }>(base?: I): CMsgGCToClientWageringUpdate;
    fromPartial<I_1 extends {
        event_id?: number;
        wagering_info?: {
            coins_remaining?: number;
            total_points_won?: number;
            total_points_wagered?: number;
            total_points_tipped?: number;
            success_rate?: number;
            total_games_wagered?: number;
            coins_max?: number;
            rank_wagers_remaining?: number;
            rank_wagers_max?: number;
            prediction_tokens_remaining?: number;
            prediction_tokens_max?: number;
            bounties_remaining?: number;
            bounties_max?: number;
        };
    } & {
        event_id?: number;
        wagering_info?: {
            coins_remaining?: number;
            total_points_won?: number;
            total_points_wagered?: number;
            total_points_tipped?: number;
            success_rate?: number;
            total_games_wagered?: number;
            coins_max?: number;
            rank_wagers_remaining?: number;
            rank_wagers_max?: number;
            prediction_tokens_remaining?: number;
            prediction_tokens_max?: number;
            bounties_remaining?: number;
            bounties_max?: number;
        } & {
            coins_remaining?: number;
            total_points_won?: number;
            total_points_wagered?: number;
            total_points_tipped?: number;
            success_rate?: number;
            total_games_wagered?: number;
            coins_max?: number;
            rank_wagers_remaining?: number;
            rank_wagers_max?: number;
            prediction_tokens_remaining?: number;
            prediction_tokens_max?: number;
            bounties_remaining?: number;
            bounties_max?: number;
        } & { [K_2 in Exclude<keyof I_1["wagering_info"], keyof CMsgGCToClientWageringResponse>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgGCToClientWageringUpdate>]: never; }>(object: I_1): CMsgGCToClientWageringUpdate;
};
export declare const CMsgGCToClientArcanaVotesUpdate: {
    fromJSON(object: any): CMsgGCToClientArcanaVotesUpdate;
    toJSON(message: CMsgGCToClientArcanaVotesUpdate): unknown;
    create<I extends {
        event_id?: number;
        arcana_votes?: {
            result?: boolean;
            votes_remaining?: number;
            votes_total?: number;
            matches_previously_voted_for?: {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            }[];
        };
    } & {
        event_id?: number;
        arcana_votes?: {
            result?: boolean;
            votes_remaining?: number;
            votes_total?: number;
            matches_previously_voted_for?: {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            }[];
        } & {
            result?: boolean;
            votes_remaining?: number;
            votes_total?: number;
            matches_previously_voted_for?: {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            }[] & ({
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            } & {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            } & { [K in Exclude<keyof I["arcana_votes"]["matches_previously_voted_for"][number], keyof CMsgArcanaVoteMatchVotes>]: never; })[] & { [K_1 in Exclude<keyof I["arcana_votes"]["matches_previously_voted_for"], keyof {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["arcana_votes"], keyof CMsgClientToGCRequestArcanaVotesRemainingResponse>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgGCToClientArcanaVotesUpdate>]: never; }>(base?: I): CMsgGCToClientArcanaVotesUpdate;
    fromPartial<I_1 extends {
        event_id?: number;
        arcana_votes?: {
            result?: boolean;
            votes_remaining?: number;
            votes_total?: number;
            matches_previously_voted_for?: {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            }[];
        };
    } & {
        event_id?: number;
        arcana_votes?: {
            result?: boolean;
            votes_remaining?: number;
            votes_total?: number;
            matches_previously_voted_for?: {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            }[];
        } & {
            result?: boolean;
            votes_remaining?: number;
            votes_total?: number;
            matches_previously_voted_for?: {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            }[] & ({
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            } & {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            } & { [K_4 in Exclude<keyof I_1["arcana_votes"]["matches_previously_voted_for"][number], keyof CMsgArcanaVoteMatchVotes>]: never; })[] & { [K_5 in Exclude<keyof I_1["arcana_votes"]["matches_previously_voted_for"], keyof {
                match_id?: number;
                hero_id?: number;
                vote_count?: number;
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I_1["arcana_votes"], keyof CMsgClientToGCRequestArcanaVotesRemainingResponse>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgGCToClientArcanaVotesUpdate>]: never; }>(object: I_1): CMsgGCToClientArcanaVotesUpdate;
};
export declare const CMsgClientToGCGetEventGoals: {
    fromJSON(object: any): CMsgClientToGCGetEventGoals;
    toJSON(message: CMsgClientToGCGetEventGoals): unknown;
    create<I extends {
        event_ids?: EEvent[];
    } & {
        event_ids?: EEvent[] & EEvent[] & { [K in Exclude<keyof I["event_ids"], keyof EEvent[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "event_ids">]: never; }>(base?: I): CMsgClientToGCGetEventGoals;
    fromPartial<I_1 extends {
        event_ids?: EEvent[];
    } & {
        event_ids?: EEvent[] & EEvent[] & { [K_2 in Exclude<keyof I_1["event_ids"], keyof EEvent[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "event_ids">]: never; }>(object: I_1): CMsgClientToGCGetEventGoals;
};
export declare const CMsgEventGoals: {
    fromJSON(object: any): CMsgEventGoals;
    toJSON(message: CMsgEventGoals): unknown;
    create<I extends {
        event_goals?: {
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        }[];
    } & {
        event_goals?: {
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        }[] & ({
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        } & {
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        } & { [K in Exclude<keyof I["event_goals"][number], keyof CMsgEventGoals_EventGoal>]: never; })[] & { [K_1 in Exclude<keyof I["event_goals"], keyof {
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "event_goals">]: never; }>(base?: I): CMsgEventGoals;
    fromPartial<I_1 extends {
        event_goals?: {
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        }[];
    } & {
        event_goals?: {
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        }[] & ({
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        } & {
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        } & { [K_3 in Exclude<keyof I_1["event_goals"][number], keyof CMsgEventGoals_EventGoal>]: never; })[] & { [K_4 in Exclude<keyof I_1["event_goals"], keyof {
            event_id?: EEvent;
            goal_id?: number;
            value?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "event_goals">]: never; }>(object: I_1): CMsgEventGoals;
};
export declare const CMsgEventGoals_EventGoal: {
    fromJSON(object: any): CMsgEventGoals_EventGoal;
    toJSON(message: CMsgEventGoals_EventGoal): unknown;
    create<I extends {
        event_id?: EEvent;
        goal_id?: number;
        value?: string;
    } & {
        event_id?: EEvent;
        goal_id?: number;
        value?: string;
    } & { [K in Exclude<keyof I, keyof CMsgEventGoals_EventGoal>]: never; }>(base?: I): CMsgEventGoals_EventGoal;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        goal_id?: number;
        value?: string;
    } & {
        event_id?: EEvent;
        goal_id?: number;
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgEventGoals_EventGoal>]: never; }>(object: I_1): CMsgEventGoals_EventGoal;
};
export declare const CMsgGCToGCLeaguePredictions: {
    fromJSON(object: any): CMsgGCToGCLeaguePredictions;
    toJSON(message: CMsgGCToGCLeaguePredictions): unknown;
    create<I extends {
        league_id?: number;
    } & {
        league_id?: number;
    } & { [K in Exclude<keyof I, "league_id">]: never; }>(base?: I): CMsgGCToGCLeaguePredictions;
    fromPartial<I_1 extends {
        league_id?: number;
    } & {
        league_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "league_id">]: never; }>(object: I_1): CMsgGCToGCLeaguePredictions;
};
export declare const CMsgPredictionRankings: {
    fromJSON(object: any): CMsgPredictionRankings;
    toJSON(message: CMsgPredictionRankings): unknown;
    create<I extends {
        predictions?: {
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[];
        }[];
    } & {
        predictions?: {
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[];
        }[] & ({
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[];
        } & {
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[] & ({
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            } & {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            } & { [K in Exclude<keyof I["predictions"][number]["prediction_lines"][number], keyof CMsgPredictionRankings_PredictionLine>]: never; })[] & { [K_1 in Exclude<keyof I["predictions"][number]["prediction_lines"], keyof {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["predictions"][number], keyof CMsgPredictionRankings_Prediction>]: never; })[] & { [K_3 in Exclude<keyof I["predictions"], keyof {
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[];
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, "predictions">]: never; }>(base?: I): CMsgPredictionRankings;
    fromPartial<I_1 extends {
        predictions?: {
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[];
        }[];
    } & {
        predictions?: {
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[];
        }[] & ({
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[];
        } & {
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[] & ({
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            } & {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            } & { [K_5 in Exclude<keyof I_1["predictions"][number]["prediction_lines"][number], keyof CMsgPredictionRankings_PredictionLine>]: never; })[] & { [K_6 in Exclude<keyof I_1["predictions"][number]["prediction_lines"], keyof {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[]>]: never; };
        } & { [K_7 in Exclude<keyof I_1["predictions"][number], keyof CMsgPredictionRankings_Prediction>]: never; })[] & { [K_8 in Exclude<keyof I_1["predictions"], keyof {
            selection_id?: number;
            prediction_lines?: {
                answer_id?: number;
                answer_name?: string;
                answer_logo?: string;
                answer_value?: number;
            }[];
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, "predictions">]: never; }>(object: I_1): CMsgPredictionRankings;
};
export declare const CMsgPredictionRankings_PredictionLine: {
    fromJSON(object: any): CMsgPredictionRankings_PredictionLine;
    toJSON(message: CMsgPredictionRankings_PredictionLine): unknown;
    create<I extends {
        answer_id?: number;
        answer_name?: string;
        answer_logo?: string;
        answer_value?: number;
    } & {
        answer_id?: number;
        answer_name?: string;
        answer_logo?: string;
        answer_value?: number;
    } & { [K in Exclude<keyof I, keyof CMsgPredictionRankings_PredictionLine>]: never; }>(base?: I): CMsgPredictionRankings_PredictionLine;
    fromPartial<I_1 extends {
        answer_id?: number;
        answer_name?: string;
        answer_logo?: string;
        answer_value?: number;
    } & {
        answer_id?: number;
        answer_name?: string;
        answer_logo?: string;
        answer_value?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgPredictionRankings_PredictionLine>]: never; }>(object: I_1): CMsgPredictionRankings_PredictionLine;
};
export declare const CMsgPredictionRankings_Prediction: {
    fromJSON(object: any): CMsgPredictionRankings_Prediction;
    toJSON(message: CMsgPredictionRankings_Prediction): unknown;
    create<I extends {
        selection_id?: number;
        prediction_lines?: {
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        }[];
    } & {
        selection_id?: number;
        prediction_lines?: {
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        }[] & ({
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        } & {
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        } & { [K in Exclude<keyof I["prediction_lines"][number], keyof CMsgPredictionRankings_PredictionLine>]: never; })[] & { [K_1 in Exclude<keyof I["prediction_lines"], keyof {
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgPredictionRankings_Prediction>]: never; }>(base?: I): CMsgPredictionRankings_Prediction;
    fromPartial<I_1 extends {
        selection_id?: number;
        prediction_lines?: {
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        }[];
    } & {
        selection_id?: number;
        prediction_lines?: {
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        }[] & ({
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        } & {
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        } & { [K_3 in Exclude<keyof I_1["prediction_lines"][number], keyof CMsgPredictionRankings_PredictionLine>]: never; })[] & { [K_4 in Exclude<keyof I_1["prediction_lines"], keyof {
            answer_id?: number;
            answer_name?: string;
            answer_logo?: string;
            answer_value?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgPredictionRankings_Prediction>]: never; }>(object: I_1): CMsgPredictionRankings_Prediction;
};
export declare const CMsgPredictionResults: {
    fromJSON(object: any): CMsgPredictionResults;
    toJSON(message: CMsgPredictionResults): unknown;
    create<I extends {
        results?: {
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[];
        }[];
    } & {
        results?: {
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[];
        }[] & ({
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[];
        } & {
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[] & ({
                answer_selection?: number;
                answer_value?: number;
            } & {
                answer_selection?: number;
                answer_value?: number;
            } & { [K in Exclude<keyof I["results"][number]["result_breakdown"][number], keyof CMsgPredictionResults_ResultBreakdown>]: never; })[] & { [K_1 in Exclude<keyof I["results"][number]["result_breakdown"], keyof {
                answer_selection?: number;
                answer_value?: number;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["results"][number], keyof CMsgPredictionResults_Result>]: never; })[] & { [K_3 in Exclude<keyof I["results"], keyof {
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[];
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, "results">]: never; }>(base?: I): CMsgPredictionResults;
    fromPartial<I_1 extends {
        results?: {
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[];
        }[];
    } & {
        results?: {
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[];
        }[] & ({
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[];
        } & {
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[] & ({
                answer_selection?: number;
                answer_value?: number;
            } & {
                answer_selection?: number;
                answer_value?: number;
            } & { [K_5 in Exclude<keyof I_1["results"][number]["result_breakdown"][number], keyof CMsgPredictionResults_ResultBreakdown>]: never; })[] & { [K_6 in Exclude<keyof I_1["results"][number]["result_breakdown"], keyof {
                answer_selection?: number;
                answer_value?: number;
            }[]>]: never; };
        } & { [K_7 in Exclude<keyof I_1["results"][number], keyof CMsgPredictionResults_Result>]: never; })[] & { [K_8 in Exclude<keyof I_1["results"], keyof {
            selection_id?: number;
            result_breakdown?: {
                answer_selection?: number;
                answer_value?: number;
            }[];
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, "results">]: never; }>(object: I_1): CMsgPredictionResults;
};
export declare const CMsgPredictionResults_ResultBreakdown: {
    fromJSON(object: any): CMsgPredictionResults_ResultBreakdown;
    toJSON(message: CMsgPredictionResults_ResultBreakdown): unknown;
    create<I extends {
        answer_selection?: number;
        answer_value?: number;
    } & {
        answer_selection?: number;
        answer_value?: number;
    } & { [K in Exclude<keyof I, keyof CMsgPredictionResults_ResultBreakdown>]: never; }>(base?: I): CMsgPredictionResults_ResultBreakdown;
    fromPartial<I_1 extends {
        answer_selection?: number;
        answer_value?: number;
    } & {
        answer_selection?: number;
        answer_value?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgPredictionResults_ResultBreakdown>]: never; }>(object: I_1): CMsgPredictionResults_ResultBreakdown;
};
export declare const CMsgPredictionResults_Result: {
    fromJSON(object: any): CMsgPredictionResults_Result;
    toJSON(message: CMsgPredictionResults_Result): unknown;
    create<I extends {
        selection_id?: number;
        result_breakdown?: {
            answer_selection?: number;
            answer_value?: number;
        }[];
    } & {
        selection_id?: number;
        result_breakdown?: {
            answer_selection?: number;
            answer_value?: number;
        }[] & ({
            answer_selection?: number;
            answer_value?: number;
        } & {
            answer_selection?: number;
            answer_value?: number;
        } & { [K in Exclude<keyof I["result_breakdown"][number], keyof CMsgPredictionResults_ResultBreakdown>]: never; })[] & { [K_1 in Exclude<keyof I["result_breakdown"], keyof {
            answer_selection?: number;
            answer_value?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgPredictionResults_Result>]: never; }>(base?: I): CMsgPredictionResults_Result;
    fromPartial<I_1 extends {
        selection_id?: number;
        result_breakdown?: {
            answer_selection?: number;
            answer_value?: number;
        }[];
    } & {
        selection_id?: number;
        result_breakdown?: {
            answer_selection?: number;
            answer_value?: number;
        }[] & ({
            answer_selection?: number;
            answer_value?: number;
        } & {
            answer_selection?: number;
            answer_value?: number;
        } & { [K_3 in Exclude<keyof I_1["result_breakdown"][number], keyof CMsgPredictionResults_ResultBreakdown>]: never; })[] & { [K_4 in Exclude<keyof I_1["result_breakdown"], keyof {
            answer_selection?: number;
            answer_value?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgPredictionResults_Result>]: never; }>(object: I_1): CMsgPredictionResults_Result;
};
export declare const CMsgClientToGCHasPlayerVotedForMVP: {
    fromJSON(object: any): CMsgClientToGCHasPlayerVotedForMVP;
    toJSON(message: CMsgClientToGCHasPlayerVotedForMVP): unknown;
    create<I extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K in Exclude<keyof I, "match_id">]: never; }>(base?: I): CMsgClientToGCHasPlayerVotedForMVP;
    fromPartial<I_1 extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "match_id">]: never; }>(object: I_1): CMsgClientToGCHasPlayerVotedForMVP;
};
export declare const CMsgClientToGCHasPlayerVotedForMVPResponse: {
    fromJSON(object: any): CMsgClientToGCHasPlayerVotedForMVPResponse;
    toJSON(message: CMsgClientToGCHasPlayerVotedForMVPResponse): unknown;
    create<I extends {
        result?: boolean;
    } & {
        result?: boolean;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCHasPlayerVotedForMVPResponse;
    fromPartial<I_1 extends {
        result?: boolean;
    } & {
        result?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCHasPlayerVotedForMVPResponse;
};
export declare const CMsgClientToGCVoteForMVP: {
    fromJSON(object: any): CMsgClientToGCVoteForMVP;
    toJSON(message: CMsgClientToGCVoteForMVP): unknown;
    create<I extends {
        match_id?: string;
        account_id?: number;
    } & {
        match_id?: string;
        account_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCVoteForMVP>]: never; }>(base?: I): CMsgClientToGCVoteForMVP;
    fromPartial<I_1 extends {
        match_id?: string;
        account_id?: number;
    } & {
        match_id?: string;
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCVoteForMVP>]: never; }>(object: I_1): CMsgClientToGCVoteForMVP;
};
export declare const CMsgClientToGCVoteForMVPResponse: {
    fromJSON(object: any): CMsgClientToGCVoteForMVPResponse;
    toJSON(message: CMsgClientToGCVoteForMVPResponse): unknown;
    create<I extends {
        result?: boolean;
    } & {
        result?: boolean;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCVoteForMVPResponse;
    fromPartial<I_1 extends {
        result?: boolean;
    } & {
        result?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCVoteForMVPResponse;
};
export declare const CMsgClientToGCMVPVoteTimeout: {
    fromJSON(object: any): CMsgClientToGCMVPVoteTimeout;
    toJSON(message: CMsgClientToGCMVPVoteTimeout): unknown;
    create<I extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K in Exclude<keyof I, "match_id">]: never; }>(base?: I): CMsgClientToGCMVPVoteTimeout;
    fromPartial<I_1 extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "match_id">]: never; }>(object: I_1): CMsgClientToGCMVPVoteTimeout;
};
export declare const CMsgClientToGCMVPVoteTimeoutResponse: {
    fromJSON(object: any): CMsgClientToGCMVPVoteTimeoutResponse;
    toJSON(message: CMsgClientToGCMVPVoteTimeoutResponse): unknown;
    create<I extends {
        result?: boolean;
    } & {
        result?: boolean;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCMVPVoteTimeoutResponse;
    fromPartial<I_1 extends {
        result?: boolean;
    } & {
        result?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCMVPVoteTimeoutResponse;
};
export declare const CMsgClientToGCTeammateStatsRequest: {
    fromJSON(_: any): CMsgClientToGCTeammateStatsRequest;
    toJSON(_: CMsgClientToGCTeammateStatsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCTeammateStatsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCTeammateStatsRequest;
};
export declare const CMsgClientToGCTeammateStatsResponse: {
    fromJSON(object: any): CMsgClientToGCTeammateStatsResponse;
    toJSON(message: CMsgClientToGCTeammateStatsResponse): unknown;
    create<I extends {
        success?: boolean;
        teammate_stats?: {
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        }[];
    } & {
        success?: boolean;
        teammate_stats?: {
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        }[] & ({
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        } & {
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        } & { [K in Exclude<keyof I["teammate_stats"][number], keyof CMsgClientToGCTeammateStatsResponse_TeammateStat>]: never; })[] & { [K_1 in Exclude<keyof I["teammate_stats"], keyof {
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCTeammateStatsResponse>]: never; }>(base?: I): CMsgClientToGCTeammateStatsResponse;
    fromPartial<I_1 extends {
        success?: boolean;
        teammate_stats?: {
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        }[];
    } & {
        success?: boolean;
        teammate_stats?: {
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        }[] & ({
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        } & {
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        } & { [K_3 in Exclude<keyof I_1["teammate_stats"][number], keyof CMsgClientToGCTeammateStatsResponse_TeammateStat>]: never; })[] & { [K_4 in Exclude<keyof I_1["teammate_stats"], keyof {
            account_id?: number;
            games?: number;
            wins?: number;
            most_recent_game_timestamp?: number;
            most_recent_game_match_id?: string;
            performance?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCTeammateStatsResponse>]: never; }>(object: I_1): CMsgClientToGCTeammateStatsResponse;
};
export declare const CMsgClientToGCTeammateStatsResponse_TeammateStat: {
    fromJSON(object: any): CMsgClientToGCTeammateStatsResponse_TeammateStat;
    toJSON(message: CMsgClientToGCTeammateStatsResponse_TeammateStat): unknown;
    create<I extends {
        account_id?: number;
        games?: number;
        wins?: number;
        most_recent_game_timestamp?: number;
        most_recent_game_match_id?: string;
        performance?: number;
    } & {
        account_id?: number;
        games?: number;
        wins?: number;
        most_recent_game_timestamp?: number;
        most_recent_game_match_id?: string;
        performance?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCTeammateStatsResponse_TeammateStat>]: never; }>(base?: I): CMsgClientToGCTeammateStatsResponse_TeammateStat;
    fromPartial<I_1 extends {
        account_id?: number;
        games?: number;
        wins?: number;
        most_recent_game_timestamp?: number;
        most_recent_game_match_id?: string;
        performance?: number;
    } & {
        account_id?: number;
        games?: number;
        wins?: number;
        most_recent_game_timestamp?: number;
        most_recent_game_match_id?: string;
        performance?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCTeammateStatsResponse_TeammateStat>]: never; }>(object: I_1): CMsgClientToGCTeammateStatsResponse_TeammateStat;
};
export declare const CMsgClientToGCVoteForArcana: {
    fromJSON(object: any): CMsgClientToGCVoteForArcana;
    toJSON(message: CMsgClientToGCVoteForArcana): unknown;
    create<I extends {
        matches?: {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[];
    } & {
        matches?: {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[] & ({
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        } & {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        } & { [K in Exclude<keyof I["matches"][number], keyof CMsgArcanaVoteMatchVotes>]: never; })[] & { [K_1 in Exclude<keyof I["matches"], keyof {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "matches">]: never; }>(base?: I): CMsgClientToGCVoteForArcana;
    fromPartial<I_1 extends {
        matches?: {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[];
    } & {
        matches?: {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[] & ({
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        } & {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        } & { [K_3 in Exclude<keyof I_1["matches"][number], keyof CMsgArcanaVoteMatchVotes>]: never; })[] & { [K_4 in Exclude<keyof I_1["matches"], keyof {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "matches">]: never; }>(object: I_1): CMsgClientToGCVoteForArcana;
};
export declare const CMsgClientToGCVoteForArcanaResponse: {
    fromJSON(object: any): CMsgClientToGCVoteForArcanaResponse;
    toJSON(message: CMsgClientToGCVoteForArcanaResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCVoteForArcanaResponse_Result;
    } & {
        result?: CMsgClientToGCVoteForArcanaResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCVoteForArcanaResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCVoteForArcanaResponse_Result;
    } & {
        result?: CMsgClientToGCVoteForArcanaResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCVoteForArcanaResponse;
};
export declare const CMsgClientToGCRequestArcanaVotesRemaining: {
    fromJSON(_: any): CMsgClientToGCRequestArcanaVotesRemaining;
    toJSON(_: CMsgClientToGCRequestArcanaVotesRemaining): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCRequestArcanaVotesRemaining;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCRequestArcanaVotesRemaining;
};
export declare const CMsgClientToGCRequestArcanaVotesRemainingResponse: {
    fromJSON(object: any): CMsgClientToGCRequestArcanaVotesRemainingResponse;
    toJSON(message: CMsgClientToGCRequestArcanaVotesRemainingResponse): unknown;
    create<I extends {
        result?: boolean;
        votes_remaining?: number;
        votes_total?: number;
        matches_previously_voted_for?: {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[];
    } & {
        result?: boolean;
        votes_remaining?: number;
        votes_total?: number;
        matches_previously_voted_for?: {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[] & ({
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        } & {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        } & { [K in Exclude<keyof I["matches_previously_voted_for"][number], keyof CMsgArcanaVoteMatchVotes>]: never; })[] & { [K_1 in Exclude<keyof I["matches_previously_voted_for"], keyof {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCRequestArcanaVotesRemainingResponse>]: never; }>(base?: I): CMsgClientToGCRequestArcanaVotesRemainingResponse;
    fromPartial<I_1 extends {
        result?: boolean;
        votes_remaining?: number;
        votes_total?: number;
        matches_previously_voted_for?: {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[];
    } & {
        result?: boolean;
        votes_remaining?: number;
        votes_total?: number;
        matches_previously_voted_for?: {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[] & ({
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        } & {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        } & { [K_3 in Exclude<keyof I_1["matches_previously_voted_for"][number], keyof CMsgArcanaVoteMatchVotes>]: never; })[] & { [K_4 in Exclude<keyof I_1["matches_previously_voted_for"], keyof {
            match_id?: number;
            hero_id?: number;
            vote_count?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCRequestArcanaVotesRemainingResponse>]: never; }>(object: I_1): CMsgClientToGCRequestArcanaVotesRemainingResponse;
};
export declare const CMsgClientToGCRequestEventPointLogV2: {
    fromJSON(object: any): CMsgClientToGCRequestEventPointLogV2;
    toJSON(message: CMsgClientToGCRequestEventPointLogV2): unknown;
    create<I extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K in Exclude<keyof I, "event_id">]: never; }>(base?: I): CMsgClientToGCRequestEventPointLogV2;
    fromPartial<I_1 extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "event_id">]: never; }>(object: I_1): CMsgClientToGCRequestEventPointLogV2;
};
export declare const CMsgClientToGCRequestEventPointLogResponseV2: {
    fromJSON(object: any): CMsgClientToGCRequestEventPointLogResponseV2;
    toJSON(message: CMsgClientToGCRequestEventPointLogResponseV2): unknown;
    create<I extends {
        result?: boolean;
        event_id?: EEvent;
        log_entries?: {
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        }[];
    } & {
        result?: boolean;
        event_id?: EEvent;
        log_entries?: {
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        }[] & ({
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        } & {
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        } & { [K in Exclude<keyof I["log_entries"][number], keyof CMsgClientToGCRequestEventPointLogResponseV2_LogEntry>]: never; })[] & { [K_1 in Exclude<keyof I["log_entries"], keyof {
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCRequestEventPointLogResponseV2>]: never; }>(base?: I): CMsgClientToGCRequestEventPointLogResponseV2;
    fromPartial<I_1 extends {
        result?: boolean;
        event_id?: EEvent;
        log_entries?: {
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        }[];
    } & {
        result?: boolean;
        event_id?: EEvent;
        log_entries?: {
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        }[] & ({
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        } & {
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        } & { [K_3 in Exclude<keyof I_1["log_entries"][number], keyof CMsgClientToGCRequestEventPointLogResponseV2_LogEntry>]: never; })[] & { [K_4 in Exclude<keyof I_1["log_entries"], keyof {
            timestamp?: number;
            audit_action?: number;
            event_points?: number;
            audit_data?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCRequestEventPointLogResponseV2>]: never; }>(object: I_1): CMsgClientToGCRequestEventPointLogResponseV2;
};
export declare const CMsgClientToGCRequestEventPointLogResponseV2_LogEntry: {
    fromJSON(object: any): CMsgClientToGCRequestEventPointLogResponseV2_LogEntry;
    toJSON(message: CMsgClientToGCRequestEventPointLogResponseV2_LogEntry): unknown;
    create<I extends {
        timestamp?: number;
        audit_action?: number;
        event_points?: number;
        audit_data?: string;
    } & {
        timestamp?: number;
        audit_action?: number;
        event_points?: number;
        audit_data?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCRequestEventPointLogResponseV2_LogEntry>]: never; }>(base?: I): CMsgClientToGCRequestEventPointLogResponseV2_LogEntry;
    fromPartial<I_1 extends {
        timestamp?: number;
        audit_action?: number;
        event_points?: number;
        audit_data?: string;
    } & {
        timestamp?: number;
        audit_action?: number;
        event_points?: number;
        audit_data?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCRequestEventPointLogResponseV2_LogEntry>]: never; }>(object: I_1): CMsgClientToGCRequestEventPointLogResponseV2_LogEntry;
};
export declare const CMsgClientToGCPublishUserStat: {
    fromJSON(object: any): CMsgClientToGCPublishUserStat;
    toJSON(message: CMsgClientToGCPublishUserStat): unknown;
    create<I extends {
        user_stats_event?: number;
        reference_data?: string;
    } & {
        user_stats_event?: number;
        reference_data?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCPublishUserStat>]: never; }>(base?: I): CMsgClientToGCPublishUserStat;
    fromPartial<I_1 extends {
        user_stats_event?: number;
        reference_data?: string;
    } & {
        user_stats_event?: number;
        reference_data?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCPublishUserStat>]: never; }>(object: I_1): CMsgClientToGCPublishUserStat;
};
export declare const CMsgClientToGCRequestSlarkGameResult: {
    fromJSON(object: any): CMsgClientToGCRequestSlarkGameResult;
    toJSON(message: CMsgClientToGCRequestSlarkGameResult): unknown;
    create<I extends {
        event_id?: EEvent;
        slot_chosen?: number;
        week?: number;
    } & {
        event_id?: EEvent;
        slot_chosen?: number;
        week?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCRequestSlarkGameResult>]: never; }>(base?: I): CMsgClientToGCRequestSlarkGameResult;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        slot_chosen?: number;
        week?: number;
    } & {
        event_id?: EEvent;
        slot_chosen?: number;
        week?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCRequestSlarkGameResult>]: never; }>(object: I_1): CMsgClientToGCRequestSlarkGameResult;
};
export declare const CMsgClientToGCRequestSlarkGameResultResponse: {
    fromJSON(object: any): CMsgClientToGCRequestSlarkGameResultResponse;
    toJSON(message: CMsgClientToGCRequestSlarkGameResultResponse): unknown;
    create<I extends {
        points_won?: number;
        aura_won?: boolean;
    } & {
        points_won?: number;
        aura_won?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCRequestSlarkGameResultResponse>]: never; }>(base?: I): CMsgClientToGCRequestSlarkGameResultResponse;
    fromPartial<I_1 extends {
        points_won?: number;
        aura_won?: boolean;
    } & {
        points_won?: number;
        aura_won?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCRequestSlarkGameResultResponse>]: never; }>(object: I_1): CMsgClientToGCRequestSlarkGameResultResponse;
};
export declare const CMsgGCToClientQuestProgressUpdated: {
    fromJSON(object: any): CMsgGCToClientQuestProgressUpdated;
    toJSON(message: CMsgGCToClientQuestProgressUpdated): unknown;
    create<I extends {
        quest_id?: number;
        completed_challenges?: {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        }[];
    } & {
        quest_id?: number;
        completed_challenges?: {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        }[] & ({
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        } & {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        } & { [K in Exclude<keyof I["completed_challenges"][number], keyof CMsgGCToClientQuestProgressUpdated_Challenge>]: never; })[] & { [K_1 in Exclude<keyof I["completed_challenges"], keyof {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgGCToClientQuestProgressUpdated>]: never; }>(base?: I): CMsgGCToClientQuestProgressUpdated;
    fromPartial<I_1 extends {
        quest_id?: number;
        completed_challenges?: {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        }[];
    } & {
        quest_id?: number;
        completed_challenges?: {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        }[] & ({
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        } & {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        } & { [K_3 in Exclude<keyof I_1["completed_challenges"][number], keyof CMsgGCToClientQuestProgressUpdated_Challenge>]: never; })[] & { [K_4 in Exclude<keyof I_1["completed_challenges"], keyof {
            challenge_id?: number;
            time_completed?: number;
            attempts?: number;
            hero_id?: number;
            template_id?: number;
            quest_rank?: number;
            max_quest_rank?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgGCToClientQuestProgressUpdated>]: never; }>(object: I_1): CMsgGCToClientQuestProgressUpdated;
};
export declare const CMsgGCToClientQuestProgressUpdated_Challenge: {
    fromJSON(object: any): CMsgGCToClientQuestProgressUpdated_Challenge;
    toJSON(message: CMsgGCToClientQuestProgressUpdated_Challenge): unknown;
    create<I extends {
        challenge_id?: number;
        time_completed?: number;
        attempts?: number;
        hero_id?: number;
        template_id?: number;
        quest_rank?: number;
        max_quest_rank?: number;
    } & {
        challenge_id?: number;
        time_completed?: number;
        attempts?: number;
        hero_id?: number;
        template_id?: number;
        quest_rank?: number;
        max_quest_rank?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientQuestProgressUpdated_Challenge>]: never; }>(base?: I): CMsgGCToClientQuestProgressUpdated_Challenge;
    fromPartial<I_1 extends {
        challenge_id?: number;
        time_completed?: number;
        attempts?: number;
        hero_id?: number;
        template_id?: number;
        quest_rank?: number;
        max_quest_rank?: number;
    } & {
        challenge_id?: number;
        time_completed?: number;
        attempts?: number;
        hero_id?: number;
        template_id?: number;
        quest_rank?: number;
        max_quest_rank?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientQuestProgressUpdated_Challenge>]: never; }>(object: I_1): CMsgGCToClientQuestProgressUpdated_Challenge;
};
export declare const CMsgDOTARedeemItem: {
    fromJSON(object: any): CMsgDOTARedeemItem;
    toJSON(message: CMsgDOTARedeemItem): unknown;
    create<I extends {
        currency_id?: string;
        purchase_def?: number;
    } & {
        currency_id?: string;
        purchase_def?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTARedeemItem>]: never; }>(base?: I): CMsgDOTARedeemItem;
    fromPartial<I_1 extends {
        currency_id?: string;
        purchase_def?: number;
    } & {
        currency_id?: string;
        purchase_def?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTARedeemItem>]: never; }>(object: I_1): CMsgDOTARedeemItem;
};
export declare const CMsgDOTARedeemItemResponse: {
    fromJSON(object: any): CMsgDOTARedeemItemResponse;
    toJSON(message: CMsgDOTARedeemItemResponse): unknown;
    create<I extends {
        response?: CMsgDOTARedeemItemResponse_EResultCode;
    } & {
        response?: CMsgDOTARedeemItemResponse_EResultCode;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgDOTARedeemItemResponse;
    fromPartial<I_1 extends {
        response?: CMsgDOTARedeemItemResponse_EResultCode;
    } & {
        response?: CMsgDOTARedeemItemResponse_EResultCode;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgDOTARedeemItemResponse;
};
export declare const CMsgClientToGCSelectCompendiumInGamePrediction: {
    fromJSON(object: any): CMsgClientToGCSelectCompendiumInGamePrediction;
    toJSON(message: CMsgClientToGCSelectCompendiumInGamePrediction): unknown;
    create<I extends {
        match_id?: string;
        predictions?: {
            prediction_id?: number;
            prediction_value?: number;
        }[];
        league_id?: number;
    } & {
        match_id?: string;
        predictions?: {
            prediction_id?: number;
            prediction_value?: number;
        }[] & ({
            prediction_id?: number;
            prediction_value?: number;
        } & {
            prediction_id?: number;
            prediction_value?: number;
        } & { [K in Exclude<keyof I["predictions"][number], keyof CMsgClientToGCSelectCompendiumInGamePrediction_Prediction>]: never; })[] & { [K_1 in Exclude<keyof I["predictions"], keyof {
            prediction_id?: number;
            prediction_value?: number;
        }[]>]: never; };
        league_id?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCSelectCompendiumInGamePrediction>]: never; }>(base?: I): CMsgClientToGCSelectCompendiumInGamePrediction;
    fromPartial<I_1 extends {
        match_id?: string;
        predictions?: {
            prediction_id?: number;
            prediction_value?: number;
        }[];
        league_id?: number;
    } & {
        match_id?: string;
        predictions?: {
            prediction_id?: number;
            prediction_value?: number;
        }[] & ({
            prediction_id?: number;
            prediction_value?: number;
        } & {
            prediction_id?: number;
            prediction_value?: number;
        } & { [K_3 in Exclude<keyof I_1["predictions"][number], keyof CMsgClientToGCSelectCompendiumInGamePrediction_Prediction>]: never; })[] & { [K_4 in Exclude<keyof I_1["predictions"], keyof {
            prediction_id?: number;
            prediction_value?: number;
        }[]>]: never; };
        league_id?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCSelectCompendiumInGamePrediction>]: never; }>(object: I_1): CMsgClientToGCSelectCompendiumInGamePrediction;
};
export declare const CMsgClientToGCSelectCompendiumInGamePrediction_Prediction: {
    fromJSON(object: any): CMsgClientToGCSelectCompendiumInGamePrediction_Prediction;
    toJSON(message: CMsgClientToGCSelectCompendiumInGamePrediction_Prediction): unknown;
    create<I extends {
        prediction_id?: number;
        prediction_value?: number;
    } & {
        prediction_id?: number;
        prediction_value?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSelectCompendiumInGamePrediction_Prediction>]: never; }>(base?: I): CMsgClientToGCSelectCompendiumInGamePrediction_Prediction;
    fromPartial<I_1 extends {
        prediction_id?: number;
        prediction_value?: number;
    } & {
        prediction_id?: number;
        prediction_value?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSelectCompendiumInGamePrediction_Prediction>]: never; }>(object: I_1): CMsgClientToGCSelectCompendiumInGamePrediction_Prediction;
};
export declare const CMsgClientToGCSelectCompendiumInGamePredictionResponse: {
    fromJSON(object: any): CMsgClientToGCSelectCompendiumInGamePredictionResponse;
    toJSON(message: CMsgClientToGCSelectCompendiumInGamePredictionResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult;
    } & {
        result?: CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCSelectCompendiumInGamePredictionResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult;
    } & {
        result?: CMsgClientToGCSelectCompendiumInGamePredictionResponse_EResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCSelectCompendiumInGamePredictionResponse;
};
export declare const CMsgClientToGCOpenPlayerCardPack: {
    fromJSON(object: any): CMsgClientToGCOpenPlayerCardPack;
    toJSON(message: CMsgClientToGCOpenPlayerCardPack): unknown;
    create<I extends {
        player_card_pack_item_id?: string;
        team_id?: number;
        deprecated_league_id?: number;
        region?: ELeagueRegion;
    } & {
        player_card_pack_item_id?: string;
        team_id?: number;
        deprecated_league_id?: number;
        region?: ELeagueRegion;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCOpenPlayerCardPack>]: never; }>(base?: I): CMsgClientToGCOpenPlayerCardPack;
    fromPartial<I_1 extends {
        player_card_pack_item_id?: string;
        team_id?: number;
        deprecated_league_id?: number;
        region?: ELeagueRegion;
    } & {
        player_card_pack_item_id?: string;
        team_id?: number;
        deprecated_league_id?: number;
        region?: ELeagueRegion;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCOpenPlayerCardPack>]: never; }>(object: I_1): CMsgClientToGCOpenPlayerCardPack;
};
export declare const CMsgClientToGCOpenPlayerCardPackResponse: {
    fromJSON(object: any): CMsgClientToGCOpenPlayerCardPackResponse;
    toJSON(message: CMsgClientToGCOpenPlayerCardPackResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCOpenPlayerCardPackResponse_Result;
        player_card_item_ids?: string[];
    } & {
        result?: CMsgClientToGCOpenPlayerCardPackResponse_Result;
        player_card_item_ids?: string[] & string[] & { [K in Exclude<keyof I["player_card_item_ids"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgClientToGCOpenPlayerCardPackResponse>]: never; }>(base?: I): CMsgClientToGCOpenPlayerCardPackResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCOpenPlayerCardPackResponse_Result;
        player_card_item_ids?: string[];
    } & {
        result?: CMsgClientToGCOpenPlayerCardPackResponse_Result;
        player_card_item_ids?: string[] & string[] & { [K_2 in Exclude<keyof I_1["player_card_item_ids"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgClientToGCOpenPlayerCardPackResponse>]: never; }>(object: I_1): CMsgClientToGCOpenPlayerCardPackResponse;
};
export declare const CMsgClientToGCRecyclePlayerCard: {
    fromJSON(object: any): CMsgClientToGCRecyclePlayerCard;
    toJSON(message: CMsgClientToGCRecyclePlayerCard): unknown;
    create<I extends {
        player_card_item_ids?: string[];
        event_id?: number;
    } & {
        player_card_item_ids?: string[] & string[] & { [K in Exclude<keyof I["player_card_item_ids"], keyof string[]>]: never; };
        event_id?: number;
    } & { [K_1 in Exclude<keyof I, keyof CMsgClientToGCRecyclePlayerCard>]: never; }>(base?: I): CMsgClientToGCRecyclePlayerCard;
    fromPartial<I_1 extends {
        player_card_item_ids?: string[];
        event_id?: number;
    } & {
        player_card_item_ids?: string[] & string[] & { [K_2 in Exclude<keyof I_1["player_card_item_ids"], keyof string[]>]: never; };
        event_id?: number;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgClientToGCRecyclePlayerCard>]: never; }>(object: I_1): CMsgClientToGCRecyclePlayerCard;
};
export declare const CMsgClientToGCRecyclePlayerCardResponse: {
    fromJSON(object: any): CMsgClientToGCRecyclePlayerCardResponse;
    toJSON(message: CMsgClientToGCRecyclePlayerCardResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCRecyclePlayerCardResponse_Result;
        dust_amount?: number;
    } & {
        result?: CMsgClientToGCRecyclePlayerCardResponse_Result;
        dust_amount?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCRecyclePlayerCardResponse>]: never; }>(base?: I): CMsgClientToGCRecyclePlayerCardResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCRecyclePlayerCardResponse_Result;
        dust_amount?: number;
    } & {
        result?: CMsgClientToGCRecyclePlayerCardResponse_Result;
        dust_amount?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCRecyclePlayerCardResponse>]: never; }>(object: I_1): CMsgClientToGCRecyclePlayerCardResponse;
};
export declare const CMsgClientToGCCreatePlayerCardPack: {
    fromJSON(object: any): CMsgClientToGCCreatePlayerCardPack;
    toJSON(message: CMsgClientToGCCreatePlayerCardPack): unknown;
    create<I extends {
        card_dust_item_id?: string;
        event_id?: number;
        premium_pack?: boolean;
    } & {
        card_dust_item_id?: string;
        event_id?: number;
        premium_pack?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCreatePlayerCardPack>]: never; }>(base?: I): CMsgClientToGCCreatePlayerCardPack;
    fromPartial<I_1 extends {
        card_dust_item_id?: string;
        event_id?: number;
        premium_pack?: boolean;
    } & {
        card_dust_item_id?: string;
        event_id?: number;
        premium_pack?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCreatePlayerCardPack>]: never; }>(object: I_1): CMsgClientToGCCreatePlayerCardPack;
};
export declare const CMsgClientToGCCreatePlayerCardPackResponse: {
    fromJSON(object: any): CMsgClientToGCCreatePlayerCardPackResponse;
    toJSON(message: CMsgClientToGCCreatePlayerCardPackResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCCreatePlayerCardPackResponse_Result;
    } & {
        result?: CMsgClientToGCCreatePlayerCardPackResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCCreatePlayerCardPackResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCCreatePlayerCardPackResponse_Result;
    } & {
        result?: CMsgClientToGCCreatePlayerCardPackResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCCreatePlayerCardPackResponse;
};
export declare const CMsgClientToGCCreateTeamPlayerCardPack: {
    fromJSON(object: any): CMsgClientToGCCreateTeamPlayerCardPack;
    toJSON(message: CMsgClientToGCCreateTeamPlayerCardPack): unknown;
    create<I extends {
        card_dust_item_id?: string;
        event_id?: number;
        premium_pack?: boolean;
        team_id?: number;
    } & {
        card_dust_item_id?: string;
        event_id?: number;
        premium_pack?: boolean;
        team_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCreateTeamPlayerCardPack>]: never; }>(base?: I): CMsgClientToGCCreateTeamPlayerCardPack;
    fromPartial<I_1 extends {
        card_dust_item_id?: string;
        event_id?: number;
        premium_pack?: boolean;
        team_id?: number;
    } & {
        card_dust_item_id?: string;
        event_id?: number;
        premium_pack?: boolean;
        team_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCreateTeamPlayerCardPack>]: never; }>(object: I_1): CMsgClientToGCCreateTeamPlayerCardPack;
};
export declare const CMsgClientToGCCreateTeamPlayerCardPackResponse: {
    fromJSON(object: any): CMsgClientToGCCreateTeamPlayerCardPackResponse;
    toJSON(message: CMsgClientToGCCreateTeamPlayerCardPackResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCCreateTeamPlayerCardPackResponse_Result;
    } & {
        result?: CMsgClientToGCCreateTeamPlayerCardPackResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCCreateTeamPlayerCardPackResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCCreateTeamPlayerCardPackResponse_Result;
    } & {
        result?: CMsgClientToGCCreateTeamPlayerCardPackResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCCreateTeamPlayerCardPackResponse;
};
export declare const CMsgGCToClientBattlePassRollup_International2016: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016): unknown;
    create<I extends {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[];
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        battle_cup?: {
            wins?: number;
            score?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[] & ({
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & { [K in Exclude<keyof I["questlines"][number], keyof CMsgGCToClientBattlePassRollup_International2016_Questlines>]: never; })[] & { [K_1 in Exclude<keyof I["questlines"], keyof {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[]>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_2 in Exclude<keyof I["wagering"], keyof CMsgGCToClientBattlePassRollup_International2016_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_3 in Exclude<keyof I["achievements"], keyof CMsgGCToClientBattlePassRollup_International2016_Achievements>]: never; };
        battle_cup?: {
            wins?: number;
            score?: number;
        } & {
            wins?: number;
            score?: number;
        } & { [K_4 in Exclude<keyof I["battle_cup"], keyof CMsgGCToClientBattlePassRollup_International2016_BattleCup>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_5 in Exclude<keyof I["predictions"], keyof CMsgGCToClientBattlePassRollup_International2016_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_6 in Exclude<keyof I["bracket"], keyof CMsgGCToClientBattlePassRollup_International2016_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_7 in Exclude<keyof I["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_International2016_PlayerCard>]: never; })[] & { [K_8 in Exclude<keyof I["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_9 in Exclude<keyof I["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge>]: never; };
    } & { [K_10 in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016;
    fromPartial<I_1 extends {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[];
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        battle_cup?: {
            wins?: number;
            score?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[] & ({
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & { [K_11 in Exclude<keyof I_1["questlines"][number], keyof CMsgGCToClientBattlePassRollup_International2016_Questlines>]: never; })[] & { [K_12 in Exclude<keyof I_1["questlines"], keyof {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[]>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_13 in Exclude<keyof I_1["wagering"], keyof CMsgGCToClientBattlePassRollup_International2016_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_14 in Exclude<keyof I_1["achievements"], keyof CMsgGCToClientBattlePassRollup_International2016_Achievements>]: never; };
        battle_cup?: {
            wins?: number;
            score?: number;
        } & {
            wins?: number;
            score?: number;
        } & { [K_15 in Exclude<keyof I_1["battle_cup"], keyof CMsgGCToClientBattlePassRollup_International2016_BattleCup>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_16 in Exclude<keyof I_1["predictions"], keyof CMsgGCToClientBattlePassRollup_International2016_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_17 in Exclude<keyof I_1["bracket"], keyof CMsgGCToClientBattlePassRollup_International2016_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_18 in Exclude<keyof I_1["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_International2016_PlayerCard>]: never; })[] & { [K_19 in Exclude<keyof I_1["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_20 in Exclude<keyof I_1["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge>]: never; };
    } & { [K_21 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016;
};
export declare const CMsgGCToClientBattlePassRollup_International2016_Questlines: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016_Questlines;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016_Questlines): unknown;
    create<I extends {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016_Questlines>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016_Questlines;
    fromPartial<I_1 extends {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016_Questlines>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016_Questlines;
};
export declare const CMsgGCToClientBattlePassRollup_International2016_Wagering: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016_Wagering;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016_Wagering): unknown;
    create<I extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016_Wagering>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016_Wagering;
    fromPartial<I_1 extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016_Wagering>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016_Wagering;
};
export declare const CMsgGCToClientBattlePassRollup_International2016_Achievements: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016_Achievements;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016_Achievements): unknown;
    create<I extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016_Achievements>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016_Achievements;
    fromPartial<I_1 extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016_Achievements>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016_Achievements;
};
export declare const CMsgGCToClientBattlePassRollup_International2016_BattleCup: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016_BattleCup;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016_BattleCup): unknown;
    create<I extends {
        wins?: number;
        score?: number;
    } & {
        wins?: number;
        score?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016_BattleCup>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016_BattleCup;
    fromPartial<I_1 extends {
        wins?: number;
        score?: number;
    } & {
        wins?: number;
        score?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016_BattleCup>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016_BattleCup;
};
export declare const CMsgGCToClientBattlePassRollup_International2016_Predictions: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016_Predictions;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016_Predictions): unknown;
    create<I extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016_Predictions>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016_Predictions;
    fromPartial<I_1 extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016_Predictions>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016_Predictions;
};
export declare const CMsgGCToClientBattlePassRollup_International2016_Bracket: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016_Bracket;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016_Bracket): unknown;
    create<I extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016_Bracket>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016_Bracket;
    fromPartial<I_1 extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016_Bracket>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016_Bracket;
};
export declare const CMsgGCToClientBattlePassRollup_International2016_PlayerCard: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016_PlayerCard;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016_PlayerCard): unknown;
    create<I extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016_PlayerCard>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016_PlayerCard;
    fromPartial<I_1 extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016_PlayerCard>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016_PlayerCard;
};
export declare const CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge;
    toJSON(message: CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge): unknown;
    create<I extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge;
    fromPartial<I_1 extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016): unknown;
    create<I extends {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[];
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        battle_cup?: {
            wins?: number;
            score?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[] & ({
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & { [K in Exclude<keyof I["questlines"][number], keyof CMsgGCToClientBattlePassRollup_Fall2016_Questlines>]: never; })[] & { [K_1 in Exclude<keyof I["questlines"], keyof {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[]>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_2 in Exclude<keyof I["wagering"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_3 in Exclude<keyof I["achievements"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Achievements>]: never; };
        battle_cup?: {
            wins?: number;
            score?: number;
        } & {
            wins?: number;
            score?: number;
        } & { [K_4 in Exclude<keyof I["battle_cup"], keyof CMsgGCToClientBattlePassRollup_Fall2016_BattleCup>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_5 in Exclude<keyof I["predictions"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_6 in Exclude<keyof I["bracket"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_7 in Exclude<keyof I["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard>]: never; })[] & { [K_8 in Exclude<keyof I["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_9 in Exclude<keyof I["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge>]: never; };
    } & { [K_10 in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016;
    fromPartial<I_1 extends {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[];
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        battle_cup?: {
            wins?: number;
            score?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[] & ({
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & { [K_11 in Exclude<keyof I_1["questlines"][number], keyof CMsgGCToClientBattlePassRollup_Fall2016_Questlines>]: never; })[] & { [K_12 in Exclude<keyof I_1["questlines"], keyof {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[]>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_13 in Exclude<keyof I_1["wagering"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_14 in Exclude<keyof I_1["achievements"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Achievements>]: never; };
        battle_cup?: {
            wins?: number;
            score?: number;
        } & {
            wins?: number;
            score?: number;
        } & { [K_15 in Exclude<keyof I_1["battle_cup"], keyof CMsgGCToClientBattlePassRollup_Fall2016_BattleCup>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_16 in Exclude<keyof I_1["predictions"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_17 in Exclude<keyof I_1["bracket"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_18 in Exclude<keyof I_1["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard>]: never; })[] & { [K_19 in Exclude<keyof I_1["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_20 in Exclude<keyof I_1["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge>]: never; };
    } & { [K_21 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016_Questlines: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016_Questlines;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016_Questlines): unknown;
    create<I extends {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016_Questlines>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016_Questlines;
    fromPartial<I_1 extends {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016_Questlines>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016_Questlines;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016_Wagering: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016_Wagering;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016_Wagering): unknown;
    create<I extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016_Wagering>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016_Wagering;
    fromPartial<I_1 extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016_Wagering>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016_Wagering;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016_Achievements: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016_Achievements;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016_Achievements): unknown;
    create<I extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016_Achievements>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016_Achievements;
    fromPartial<I_1 extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016_Achievements>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016_Achievements;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016_BattleCup: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016_BattleCup;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016_BattleCup): unknown;
    create<I extends {
        wins?: number;
        score?: number;
    } & {
        wins?: number;
        score?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016_BattleCup>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016_BattleCup;
    fromPartial<I_1 extends {
        wins?: number;
        score?: number;
    } & {
        wins?: number;
        score?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016_BattleCup>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016_BattleCup;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016_Predictions: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016_Predictions;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016_Predictions): unknown;
    create<I extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016_Predictions>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016_Predictions;
    fromPartial<I_1 extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016_Predictions>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016_Predictions;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016_Bracket: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016_Bracket;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016_Bracket): unknown;
    create<I extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016_Bracket>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016_Bracket;
    fromPartial<I_1 extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016_Bracket>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016_Bracket;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard): unknown;
    create<I extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard;
    fromPartial<I_1 extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard;
};
export declare const CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge;
    toJSON(message: CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge): unknown;
    create<I extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge;
    fromPartial<I_1 extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017): unknown;
    create<I extends {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[];
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        battle_cup?: {
            wins?: number;
            score?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[] & ({
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & { [K in Exclude<keyof I["questlines"][number], keyof CMsgGCToClientBattlePassRollup_Winter2017_Questlines>]: never; })[] & { [K_1 in Exclude<keyof I["questlines"], keyof {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[]>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_2 in Exclude<keyof I["wagering"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_3 in Exclude<keyof I["achievements"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Achievements>]: never; };
        battle_cup?: {
            wins?: number;
            score?: number;
        } & {
            wins?: number;
            score?: number;
        } & { [K_4 in Exclude<keyof I["battle_cup"], keyof CMsgGCToClientBattlePassRollup_Winter2017_BattleCup>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_5 in Exclude<keyof I["predictions"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_6 in Exclude<keyof I["bracket"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_7 in Exclude<keyof I["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard>]: never; })[] & { [K_8 in Exclude<keyof I["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_9 in Exclude<keyof I["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge>]: never; };
    } & { [K_10 in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017;
    fromPartial<I_1 extends {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[];
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        battle_cup?: {
            wins?: number;
            score?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[] & ({
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & { [K_11 in Exclude<keyof I_1["questlines"][number], keyof CMsgGCToClientBattlePassRollup_Winter2017_Questlines>]: never; })[] & { [K_12 in Exclude<keyof I_1["questlines"], keyof {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[]>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_13 in Exclude<keyof I_1["wagering"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_14 in Exclude<keyof I_1["achievements"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Achievements>]: never; };
        battle_cup?: {
            wins?: number;
            score?: number;
        } & {
            wins?: number;
            score?: number;
        } & { [K_15 in Exclude<keyof I_1["battle_cup"], keyof CMsgGCToClientBattlePassRollup_Winter2017_BattleCup>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_16 in Exclude<keyof I_1["predictions"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_17 in Exclude<keyof I_1["bracket"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_18 in Exclude<keyof I_1["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard>]: never; })[] & { [K_19 in Exclude<keyof I_1["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_20 in Exclude<keyof I_1["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge>]: never; };
    } & { [K_21 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017_Questlines: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017_Questlines;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017_Questlines): unknown;
    create<I extends {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017_Questlines>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017_Questlines;
    fromPartial<I_1 extends {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017_Questlines>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017_Questlines;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017_Wagering: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017_Wagering;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017_Wagering): unknown;
    create<I extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017_Wagering>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017_Wagering;
    fromPartial<I_1 extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017_Wagering>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017_Wagering;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017_Achievements: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017_Achievements;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017_Achievements): unknown;
    create<I extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017_Achievements>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017_Achievements;
    fromPartial<I_1 extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017_Achievements>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017_Achievements;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017_BattleCup: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017_BattleCup;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017_BattleCup): unknown;
    create<I extends {
        wins?: number;
        score?: number;
    } & {
        wins?: number;
        score?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017_BattleCup>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017_BattleCup;
    fromPartial<I_1 extends {
        wins?: number;
        score?: number;
    } & {
        wins?: number;
        score?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017_BattleCup>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017_BattleCup;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017_Predictions: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017_Predictions;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017_Predictions): unknown;
    create<I extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017_Predictions>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017_Predictions;
    fromPartial<I_1 extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017_Predictions>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017_Predictions;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017_Bracket: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017_Bracket;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017_Bracket): unknown;
    create<I extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017_Bracket>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017_Bracket;
    fromPartial<I_1 extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017_Bracket>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017_Bracket;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard): unknown;
    create<I extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard;
    fromPartial<I_1 extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard;
};
export declare const CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge;
    toJSON(message: CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge): unknown;
    create<I extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge;
    fromPartial<I_1 extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge;
};
export declare const CMsgGCToClientBattlePassRollup_TI7: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7): unknown;
    create<I extends {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[];
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        battle_cup?: {
            wins?: number;
            score?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[] & ({
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & { [K in Exclude<keyof I["questlines"][number], keyof CMsgGCToClientBattlePassRollup_TI7_Questlines>]: never; })[] & { [K_1 in Exclude<keyof I["questlines"], keyof {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[]>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_2 in Exclude<keyof I["wagering"], keyof CMsgGCToClientBattlePassRollup_TI7_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_3 in Exclude<keyof I["achievements"], keyof CMsgGCToClientBattlePassRollup_TI7_Achievements>]: never; };
        battle_cup?: {
            wins?: number;
            score?: number;
        } & {
            wins?: number;
            score?: number;
        } & { [K_4 in Exclude<keyof I["battle_cup"], keyof CMsgGCToClientBattlePassRollup_TI7_BattleCup>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_5 in Exclude<keyof I["predictions"], keyof CMsgGCToClientBattlePassRollup_TI7_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_6 in Exclude<keyof I["bracket"], keyof CMsgGCToClientBattlePassRollup_TI7_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_7 in Exclude<keyof I["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_TI7_PlayerCard>]: never; })[] & { [K_8 in Exclude<keyof I["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_9 in Exclude<keyof I["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge>]: never; };
    } & { [K_10 in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7;
    fromPartial<I_1 extends {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[];
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        battle_cup?: {
            wins?: number;
            score?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        questlines?: {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[] & ({
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        } & { [K_11 in Exclude<keyof I_1["questlines"][number], keyof CMsgGCToClientBattlePassRollup_TI7_Questlines>]: never; })[] & { [K_12 in Exclude<keyof I_1["questlines"], keyof {
            name?: string;
            onestar?: number;
            twostar?: number;
            threestar?: number;
            total?: number;
        }[]>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_13 in Exclude<keyof I_1["wagering"], keyof CMsgGCToClientBattlePassRollup_TI7_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_14 in Exclude<keyof I_1["achievements"], keyof CMsgGCToClientBattlePassRollup_TI7_Achievements>]: never; };
        battle_cup?: {
            wins?: number;
            score?: number;
        } & {
            wins?: number;
            score?: number;
        } & { [K_15 in Exclude<keyof I_1["battle_cup"], keyof CMsgGCToClientBattlePassRollup_TI7_BattleCup>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_16 in Exclude<keyof I_1["predictions"], keyof CMsgGCToClientBattlePassRollup_TI7_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_17 in Exclude<keyof I_1["bracket"], keyof CMsgGCToClientBattlePassRollup_TI7_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_18 in Exclude<keyof I_1["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_TI7_PlayerCard>]: never; })[] & { [K_19 in Exclude<keyof I_1["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_20 in Exclude<keyof I_1["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge>]: never; };
    } & { [K_21 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7;
};
export declare const CMsgGCToClientBattlePassRollup_TI7_Questlines: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7_Questlines;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7_Questlines): unknown;
    create<I extends {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7_Questlines>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7_Questlines;
    fromPartial<I_1 extends {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & {
        name?: string;
        onestar?: number;
        twostar?: number;
        threestar?: number;
        total?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7_Questlines>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7_Questlines;
};
export declare const CMsgGCToClientBattlePassRollup_TI7_Wagering: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7_Wagering;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7_Wagering): unknown;
    create<I extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7_Wagering>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7_Wagering;
    fromPartial<I_1 extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7_Wagering>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7_Wagering;
};
export declare const CMsgGCToClientBattlePassRollup_TI7_Achievements: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7_Achievements;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7_Achievements): unknown;
    create<I extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7_Achievements>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7_Achievements;
    fromPartial<I_1 extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7_Achievements>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7_Achievements;
};
export declare const CMsgGCToClientBattlePassRollup_TI7_BattleCup: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7_BattleCup;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7_BattleCup): unknown;
    create<I extends {
        wins?: number;
        score?: number;
    } & {
        wins?: number;
        score?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7_BattleCup>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7_BattleCup;
    fromPartial<I_1 extends {
        wins?: number;
        score?: number;
    } & {
        wins?: number;
        score?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7_BattleCup>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7_BattleCup;
};
export declare const CMsgGCToClientBattlePassRollup_TI7_Predictions: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7_Predictions;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7_Predictions): unknown;
    create<I extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7_Predictions>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7_Predictions;
    fromPartial<I_1 extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7_Predictions>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7_Predictions;
};
export declare const CMsgGCToClientBattlePassRollup_TI7_Bracket: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7_Bracket;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7_Bracket): unknown;
    create<I extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7_Bracket>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7_Bracket;
    fromPartial<I_1 extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7_Bracket>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7_Bracket;
};
export declare const CMsgGCToClientBattlePassRollup_TI7_PlayerCard: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7_PlayerCard;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7_PlayerCard): unknown;
    create<I extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7_PlayerCard>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7_PlayerCard;
    fromPartial<I_1 extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7_PlayerCard>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7_PlayerCard;
};
export declare const CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge): unknown;
    create<I extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge;
    fromPartial<I_1 extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge;
};
export declare const CMsgGCToClientBattlePassRollup_TI8: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI8;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI8): unknown;
    create<I extends {
        battle_pass_level?: number;
        cavern_crawl?: {
            rooms_cleared?: number;
            carry_completed?: boolean;
            support_completed?: boolean;
            utility_completed?: boolean;
        };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        cavern_crawl?: {
            rooms_cleared?: number;
            carry_completed?: boolean;
            support_completed?: boolean;
            utility_completed?: boolean;
        } & {
            rooms_cleared?: number;
            carry_completed?: boolean;
            support_completed?: boolean;
            utility_completed?: boolean;
        } & { [K in Exclude<keyof I["cavern_crawl"], keyof CMsgGCToClientBattlePassRollup_TI8_CavernCrawl>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_1 in Exclude<keyof I["wagering"], keyof CMsgGCToClientBattlePassRollup_TI8_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_2 in Exclude<keyof I["achievements"], keyof CMsgGCToClientBattlePassRollup_TI8_Achievements>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_3 in Exclude<keyof I["predictions"], keyof CMsgGCToClientBattlePassRollup_TI8_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_4 in Exclude<keyof I["bracket"], keyof CMsgGCToClientBattlePassRollup_TI8_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_5 in Exclude<keyof I["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_TI8_PlayerCard>]: never; })[] & { [K_6 in Exclude<keyof I["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_7 in Exclude<keyof I["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge>]: never; };
    } & { [K_8 in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI8>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI8;
    fromPartial<I_1 extends {
        battle_pass_level?: number;
        cavern_crawl?: {
            rooms_cleared?: number;
            carry_completed?: boolean;
            support_completed?: boolean;
            utility_completed?: boolean;
        };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        };
        bracket?: {
            correct?: number;
            points?: number;
        };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[];
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        };
    } & {
        battle_pass_level?: number;
        cavern_crawl?: {
            rooms_cleared?: number;
            carry_completed?: boolean;
            support_completed?: boolean;
            utility_completed?: boolean;
        } & {
            rooms_cleared?: number;
            carry_completed?: boolean;
            support_completed?: boolean;
            utility_completed?: boolean;
        } & { [K_9 in Exclude<keyof I_1["cavern_crawl"], keyof CMsgGCToClientBattlePassRollup_TI8_CavernCrawl>]: never; };
        wagering?: {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & {
            total_wagered?: number;
            total_won?: number;
            average_won?: number;
            success_rate?: number;
            total_tips?: number;
        } & { [K_10 in Exclude<keyof I_1["wagering"], keyof CMsgGCToClientBattlePassRollup_TI8_Wagering>]: never; };
        achievements?: {
            completed?: number;
            total?: number;
            points?: number;
        } & {
            completed?: number;
            total?: number;
            points?: number;
        } & { [K_11 in Exclude<keyof I_1["achievements"], keyof CMsgGCToClientBattlePassRollup_TI8_Achievements>]: never; };
        predictions?: {
            correct?: number;
            total?: number;
            points?: number;
        } & {
            correct?: number;
            total?: number;
            points?: number;
        } & { [K_12 in Exclude<keyof I_1["predictions"], keyof CMsgGCToClientBattlePassRollup_TI8_Predictions>]: never; };
        bracket?: {
            correct?: number;
            points?: number;
        } & {
            correct?: number;
            points?: number;
        } & { [K_13 in Exclude<keyof I_1["bracket"], keyof CMsgGCToClientBattlePassRollup_TI8_Bracket>]: never; };
        player_cards?: {
            account_id?: number;
            quality?: number;
        }[] & ({
            account_id?: number;
            quality?: number;
        } & {
            account_id?: number;
            quality?: number;
        } & { [K_14 in Exclude<keyof I_1["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_TI8_PlayerCard>]: never; })[] & { [K_15 in Exclude<keyof I_1["player_cards"], keyof {
            account_id?: number;
            quality?: number;
        }[]>]: never; };
        fantasy_challenge?: {
            total_score?: number;
            percentile?: number;
        } & {
            total_score?: number;
            percentile?: number;
        } & { [K_16 in Exclude<keyof I_1["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge>]: never; };
    } & { [K_17 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI8>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI8;
};
export declare const CMsgGCToClientBattlePassRollup_TI8_CavernCrawl: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI8_CavernCrawl;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI8_CavernCrawl): unknown;
    create<I extends {
        rooms_cleared?: number;
        carry_completed?: boolean;
        support_completed?: boolean;
        utility_completed?: boolean;
    } & {
        rooms_cleared?: number;
        carry_completed?: boolean;
        support_completed?: boolean;
        utility_completed?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI8_CavernCrawl>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI8_CavernCrawl;
    fromPartial<I_1 extends {
        rooms_cleared?: number;
        carry_completed?: boolean;
        support_completed?: boolean;
        utility_completed?: boolean;
    } & {
        rooms_cleared?: number;
        carry_completed?: boolean;
        support_completed?: boolean;
        utility_completed?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI8_CavernCrawl>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI8_CavernCrawl;
};
export declare const CMsgGCToClientBattlePassRollup_TI8_Wagering: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI8_Wagering;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI8_Wagering): unknown;
    create<I extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI8_Wagering>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI8_Wagering;
    fromPartial<I_1 extends {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & {
        total_wagered?: number;
        total_won?: number;
        average_won?: number;
        success_rate?: number;
        total_tips?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI8_Wagering>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI8_Wagering;
};
export declare const CMsgGCToClientBattlePassRollup_TI8_Achievements: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI8_Achievements;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI8_Achievements): unknown;
    create<I extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI8_Achievements>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI8_Achievements;
    fromPartial<I_1 extends {
        completed?: number;
        total?: number;
        points?: number;
    } & {
        completed?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI8_Achievements>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI8_Achievements;
};
export declare const CMsgGCToClientBattlePassRollup_TI8_Predictions: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI8_Predictions;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI8_Predictions): unknown;
    create<I extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI8_Predictions>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI8_Predictions;
    fromPartial<I_1 extends {
        correct?: number;
        total?: number;
        points?: number;
    } & {
        correct?: number;
        total?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI8_Predictions>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI8_Predictions;
};
export declare const CMsgGCToClientBattlePassRollup_TI8_Bracket: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI8_Bracket;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI8_Bracket): unknown;
    create<I extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI8_Bracket>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI8_Bracket;
    fromPartial<I_1 extends {
        correct?: number;
        points?: number;
    } & {
        correct?: number;
        points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI8_Bracket>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI8_Bracket;
};
export declare const CMsgGCToClientBattlePassRollup_TI8_PlayerCard: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI8_PlayerCard;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI8_PlayerCard): unknown;
    create<I extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI8_PlayerCard>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI8_PlayerCard;
    fromPartial<I_1 extends {
        account_id?: number;
        quality?: number;
    } & {
        account_id?: number;
        quality?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI8_PlayerCard>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI8_PlayerCard;
};
export declare const CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge): unknown;
    create<I extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge>]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge;
    fromPartial<I_1 extends {
        total_score?: number;
        percentile?: number;
    } & {
        total_score?: number;
        percentile?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge;
};
export declare const CMsgGCToClientBattlePassRollup_TI9: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI9;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI9): unknown;
    create<I extends {
        battle_pass_level?: number;
    } & {
        battle_pass_level?: number;
    } & { [K in Exclude<keyof I, "battle_pass_level">]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI9;
    fromPartial<I_1 extends {
        battle_pass_level?: number;
    } & {
        battle_pass_level?: number;
    } & { [K_1 in Exclude<keyof I_1, "battle_pass_level">]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI9;
};
export declare const CMsgGCToClientBattlePassRollup_TI10: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollup_TI10;
    toJSON(message: CMsgGCToClientBattlePassRollup_TI10): unknown;
    create<I extends {
        battle_pass_level?: number;
    } & {
        battle_pass_level?: number;
    } & { [K in Exclude<keyof I, "battle_pass_level">]: never; }>(base?: I): CMsgGCToClientBattlePassRollup_TI10;
    fromPartial<I_1 extends {
        battle_pass_level?: number;
    } & {
        battle_pass_level?: number;
    } & { [K_1 in Exclude<keyof I_1, "battle_pass_level">]: never; }>(object: I_1): CMsgGCToClientBattlePassRollup_TI10;
};
export declare const CMsgGCToClientBattlePassRollupRequest: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollupRequest;
    toJSON(message: CMsgGCToClientBattlePassRollupRequest): unknown;
    create<I extends {
        event_id?: number;
        account_id?: number;
    } & {
        event_id?: number;
        account_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollupRequest>]: never; }>(base?: I): CMsgGCToClientBattlePassRollupRequest;
    fromPartial<I_1 extends {
        event_id?: number;
        account_id?: number;
    } & {
        event_id?: number;
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollupRequest>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollupRequest;
};
export declare const CMsgGCToClientBattlePassRollupResponse: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollupResponse;
    toJSON(message: CMsgGCToClientBattlePassRollupResponse): unknown;
    create<I extends {
        event_ti6?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_fall2016?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_winter2017?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_ti7?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_ti8?: {
            battle_pass_level?: number;
            cavern_crawl?: {
                rooms_cleared?: number;
                carry_completed?: boolean;
                support_completed?: boolean;
                utility_completed?: boolean;
            };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_ti9?: {
            battle_pass_level?: number;
        };
        event_ti10?: {
            battle_pass_level?: number;
        };
    } & {
        event_ti6?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[] & ({
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & { [K in Exclude<keyof I["event_ti6"]["questlines"][number], keyof CMsgGCToClientBattlePassRollup_International2016_Questlines>]: never; })[] & { [K_1 in Exclude<keyof I["event_ti6"]["questlines"], keyof {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[]>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_2 in Exclude<keyof I["event_ti6"]["wagering"], keyof CMsgGCToClientBattlePassRollup_International2016_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_3 in Exclude<keyof I["event_ti6"]["achievements"], keyof CMsgGCToClientBattlePassRollup_International2016_Achievements>]: never; };
            battle_cup?: {
                wins?: number;
                score?: number;
            } & {
                wins?: number;
                score?: number;
            } & { [K_4 in Exclude<keyof I["event_ti6"]["battle_cup"], keyof CMsgGCToClientBattlePassRollup_International2016_BattleCup>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_5 in Exclude<keyof I["event_ti6"]["predictions"], keyof CMsgGCToClientBattlePassRollup_International2016_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_6 in Exclude<keyof I["event_ti6"]["bracket"], keyof CMsgGCToClientBattlePassRollup_International2016_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_7 in Exclude<keyof I["event_ti6"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_International2016_PlayerCard>]: never; })[] & { [K_8 in Exclude<keyof I["event_ti6"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_9 in Exclude<keyof I["event_ti6"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge>]: never; };
        } & { [K_10 in Exclude<keyof I["event_ti6"], keyof CMsgGCToClientBattlePassRollup_International2016>]: never; };
        event_fall2016?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[] & ({
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & { [K_11 in Exclude<keyof I["event_fall2016"]["questlines"][number], keyof CMsgGCToClientBattlePassRollup_Fall2016_Questlines>]: never; })[] & { [K_12 in Exclude<keyof I["event_fall2016"]["questlines"], keyof {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[]>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_13 in Exclude<keyof I["event_fall2016"]["wagering"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_14 in Exclude<keyof I["event_fall2016"]["achievements"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Achievements>]: never; };
            battle_cup?: {
                wins?: number;
                score?: number;
            } & {
                wins?: number;
                score?: number;
            } & { [K_15 in Exclude<keyof I["event_fall2016"]["battle_cup"], keyof CMsgGCToClientBattlePassRollup_Fall2016_BattleCup>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_16 in Exclude<keyof I["event_fall2016"]["predictions"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_17 in Exclude<keyof I["event_fall2016"]["bracket"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_18 in Exclude<keyof I["event_fall2016"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard>]: never; })[] & { [K_19 in Exclude<keyof I["event_fall2016"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_20 in Exclude<keyof I["event_fall2016"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge>]: never; };
        } & { [K_21 in Exclude<keyof I["event_fall2016"], keyof CMsgGCToClientBattlePassRollup_Fall2016>]: never; };
        event_winter2017?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[] & ({
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & { [K_22 in Exclude<keyof I["event_winter2017"]["questlines"][number], keyof CMsgGCToClientBattlePassRollup_Winter2017_Questlines>]: never; })[] & { [K_23 in Exclude<keyof I["event_winter2017"]["questlines"], keyof {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[]>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_24 in Exclude<keyof I["event_winter2017"]["wagering"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_25 in Exclude<keyof I["event_winter2017"]["achievements"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Achievements>]: never; };
            battle_cup?: {
                wins?: number;
                score?: number;
            } & {
                wins?: number;
                score?: number;
            } & { [K_26 in Exclude<keyof I["event_winter2017"]["battle_cup"], keyof CMsgGCToClientBattlePassRollup_Winter2017_BattleCup>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_27 in Exclude<keyof I["event_winter2017"]["predictions"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_28 in Exclude<keyof I["event_winter2017"]["bracket"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_29 in Exclude<keyof I["event_winter2017"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard>]: never; })[] & { [K_30 in Exclude<keyof I["event_winter2017"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_31 in Exclude<keyof I["event_winter2017"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge>]: never; };
        } & { [K_32 in Exclude<keyof I["event_winter2017"], keyof CMsgGCToClientBattlePassRollup_Winter2017>]: never; };
        event_ti7?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[] & ({
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & { [K_33 in Exclude<keyof I["event_ti7"]["questlines"][number], keyof CMsgGCToClientBattlePassRollup_TI7_Questlines>]: never; })[] & { [K_34 in Exclude<keyof I["event_ti7"]["questlines"], keyof {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[]>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_35 in Exclude<keyof I["event_ti7"]["wagering"], keyof CMsgGCToClientBattlePassRollup_TI7_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_36 in Exclude<keyof I["event_ti7"]["achievements"], keyof CMsgGCToClientBattlePassRollup_TI7_Achievements>]: never; };
            battle_cup?: {
                wins?: number;
                score?: number;
            } & {
                wins?: number;
                score?: number;
            } & { [K_37 in Exclude<keyof I["event_ti7"]["battle_cup"], keyof CMsgGCToClientBattlePassRollup_TI7_BattleCup>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_38 in Exclude<keyof I["event_ti7"]["predictions"], keyof CMsgGCToClientBattlePassRollup_TI7_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_39 in Exclude<keyof I["event_ti7"]["bracket"], keyof CMsgGCToClientBattlePassRollup_TI7_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_40 in Exclude<keyof I["event_ti7"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_TI7_PlayerCard>]: never; })[] & { [K_41 in Exclude<keyof I["event_ti7"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_42 in Exclude<keyof I["event_ti7"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge>]: never; };
        } & { [K_43 in Exclude<keyof I["event_ti7"], keyof CMsgGCToClientBattlePassRollup_TI7>]: never; };
        event_ti8?: {
            battle_pass_level?: number;
            cavern_crawl?: {
                rooms_cleared?: number;
                carry_completed?: boolean;
                support_completed?: boolean;
                utility_completed?: boolean;
            };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            cavern_crawl?: {
                rooms_cleared?: number;
                carry_completed?: boolean;
                support_completed?: boolean;
                utility_completed?: boolean;
            } & {
                rooms_cleared?: number;
                carry_completed?: boolean;
                support_completed?: boolean;
                utility_completed?: boolean;
            } & { [K_44 in Exclude<keyof I["event_ti8"]["cavern_crawl"], keyof CMsgGCToClientBattlePassRollup_TI8_CavernCrawl>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_45 in Exclude<keyof I["event_ti8"]["wagering"], keyof CMsgGCToClientBattlePassRollup_TI8_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_46 in Exclude<keyof I["event_ti8"]["achievements"], keyof CMsgGCToClientBattlePassRollup_TI8_Achievements>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_47 in Exclude<keyof I["event_ti8"]["predictions"], keyof CMsgGCToClientBattlePassRollup_TI8_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_48 in Exclude<keyof I["event_ti8"]["bracket"], keyof CMsgGCToClientBattlePassRollup_TI8_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_49 in Exclude<keyof I["event_ti8"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_TI8_PlayerCard>]: never; })[] & { [K_50 in Exclude<keyof I["event_ti8"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_51 in Exclude<keyof I["event_ti8"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge>]: never; };
        } & { [K_52 in Exclude<keyof I["event_ti8"], keyof CMsgGCToClientBattlePassRollup_TI8>]: never; };
        event_ti9?: {
            battle_pass_level?: number;
        } & {
            battle_pass_level?: number;
        } & { [K_53 in Exclude<keyof I["event_ti9"], "battle_pass_level">]: never; };
        event_ti10?: {
            battle_pass_level?: number;
        } & {
            battle_pass_level?: number;
        } & { [K_54 in Exclude<keyof I["event_ti10"], "battle_pass_level">]: never; };
    } & { [K_55 in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollupResponse>]: never; }>(base?: I): CMsgGCToClientBattlePassRollupResponse;
    fromPartial<I_1 extends {
        event_ti6?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_fall2016?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_winter2017?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_ti7?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_ti8?: {
            battle_pass_level?: number;
            cavern_crawl?: {
                rooms_cleared?: number;
                carry_completed?: boolean;
                support_completed?: boolean;
                utility_completed?: boolean;
            };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        };
        event_ti9?: {
            battle_pass_level?: number;
        };
        event_ti10?: {
            battle_pass_level?: number;
        };
    } & {
        event_ti6?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[] & ({
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & { [K_56 in Exclude<keyof I_1["event_ti6"]["questlines"][number], keyof CMsgGCToClientBattlePassRollup_International2016_Questlines>]: never; })[] & { [K_57 in Exclude<keyof I_1["event_ti6"]["questlines"], keyof {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[]>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_58 in Exclude<keyof I_1["event_ti6"]["wagering"], keyof CMsgGCToClientBattlePassRollup_International2016_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_59 in Exclude<keyof I_1["event_ti6"]["achievements"], keyof CMsgGCToClientBattlePassRollup_International2016_Achievements>]: never; };
            battle_cup?: {
                wins?: number;
                score?: number;
            } & {
                wins?: number;
                score?: number;
            } & { [K_60 in Exclude<keyof I_1["event_ti6"]["battle_cup"], keyof CMsgGCToClientBattlePassRollup_International2016_BattleCup>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_61 in Exclude<keyof I_1["event_ti6"]["predictions"], keyof CMsgGCToClientBattlePassRollup_International2016_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_62 in Exclude<keyof I_1["event_ti6"]["bracket"], keyof CMsgGCToClientBattlePassRollup_International2016_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_63 in Exclude<keyof I_1["event_ti6"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_International2016_PlayerCard>]: never; })[] & { [K_64 in Exclude<keyof I_1["event_ti6"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_65 in Exclude<keyof I_1["event_ti6"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_International2016_FantasyChallenge>]: never; };
        } & { [K_66 in Exclude<keyof I_1["event_ti6"], keyof CMsgGCToClientBattlePassRollup_International2016>]: never; };
        event_fall2016?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[] & ({
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & { [K_67 in Exclude<keyof I_1["event_fall2016"]["questlines"][number], keyof CMsgGCToClientBattlePassRollup_Fall2016_Questlines>]: never; })[] & { [K_68 in Exclude<keyof I_1["event_fall2016"]["questlines"], keyof {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[]>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_69 in Exclude<keyof I_1["event_fall2016"]["wagering"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_70 in Exclude<keyof I_1["event_fall2016"]["achievements"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Achievements>]: never; };
            battle_cup?: {
                wins?: number;
                score?: number;
            } & {
                wins?: number;
                score?: number;
            } & { [K_71 in Exclude<keyof I_1["event_fall2016"]["battle_cup"], keyof CMsgGCToClientBattlePassRollup_Fall2016_BattleCup>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_72 in Exclude<keyof I_1["event_fall2016"]["predictions"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_73 in Exclude<keyof I_1["event_fall2016"]["bracket"], keyof CMsgGCToClientBattlePassRollup_Fall2016_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_74 in Exclude<keyof I_1["event_fall2016"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_Fall2016_PlayerCard>]: never; })[] & { [K_75 in Exclude<keyof I_1["event_fall2016"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_76 in Exclude<keyof I_1["event_fall2016"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_Fall2016_FantasyChallenge>]: never; };
        } & { [K_77 in Exclude<keyof I_1["event_fall2016"], keyof CMsgGCToClientBattlePassRollup_Fall2016>]: never; };
        event_winter2017?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[] & ({
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & { [K_78 in Exclude<keyof I_1["event_winter2017"]["questlines"][number], keyof CMsgGCToClientBattlePassRollup_Winter2017_Questlines>]: never; })[] & { [K_79 in Exclude<keyof I_1["event_winter2017"]["questlines"], keyof {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[]>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_80 in Exclude<keyof I_1["event_winter2017"]["wagering"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_81 in Exclude<keyof I_1["event_winter2017"]["achievements"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Achievements>]: never; };
            battle_cup?: {
                wins?: number;
                score?: number;
            } & {
                wins?: number;
                score?: number;
            } & { [K_82 in Exclude<keyof I_1["event_winter2017"]["battle_cup"], keyof CMsgGCToClientBattlePassRollup_Winter2017_BattleCup>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_83 in Exclude<keyof I_1["event_winter2017"]["predictions"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_84 in Exclude<keyof I_1["event_winter2017"]["bracket"], keyof CMsgGCToClientBattlePassRollup_Winter2017_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_85 in Exclude<keyof I_1["event_winter2017"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_Winter2017_PlayerCard>]: never; })[] & { [K_86 in Exclude<keyof I_1["event_winter2017"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_87 in Exclude<keyof I_1["event_winter2017"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_Winter2017_FantasyChallenge>]: never; };
        } & { [K_88 in Exclude<keyof I_1["event_winter2017"], keyof CMsgGCToClientBattlePassRollup_Winter2017>]: never; };
        event_ti7?: {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[];
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            battle_cup?: {
                wins?: number;
                score?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            questlines?: {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[] & ({
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            } & { [K_89 in Exclude<keyof I_1["event_ti7"]["questlines"][number], keyof CMsgGCToClientBattlePassRollup_TI7_Questlines>]: never; })[] & { [K_90 in Exclude<keyof I_1["event_ti7"]["questlines"], keyof {
                name?: string;
                onestar?: number;
                twostar?: number;
                threestar?: number;
                total?: number;
            }[]>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_91 in Exclude<keyof I_1["event_ti7"]["wagering"], keyof CMsgGCToClientBattlePassRollup_TI7_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_92 in Exclude<keyof I_1["event_ti7"]["achievements"], keyof CMsgGCToClientBattlePassRollup_TI7_Achievements>]: never; };
            battle_cup?: {
                wins?: number;
                score?: number;
            } & {
                wins?: number;
                score?: number;
            } & { [K_93 in Exclude<keyof I_1["event_ti7"]["battle_cup"], keyof CMsgGCToClientBattlePassRollup_TI7_BattleCup>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_94 in Exclude<keyof I_1["event_ti7"]["predictions"], keyof CMsgGCToClientBattlePassRollup_TI7_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_95 in Exclude<keyof I_1["event_ti7"]["bracket"], keyof CMsgGCToClientBattlePassRollup_TI7_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_96 in Exclude<keyof I_1["event_ti7"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_TI7_PlayerCard>]: never; })[] & { [K_97 in Exclude<keyof I_1["event_ti7"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_98 in Exclude<keyof I_1["event_ti7"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_TI7_FantasyChallenge>]: never; };
        } & { [K_99 in Exclude<keyof I_1["event_ti7"], keyof CMsgGCToClientBattlePassRollup_TI7>]: never; };
        event_ti8?: {
            battle_pass_level?: number;
            cavern_crawl?: {
                rooms_cleared?: number;
                carry_completed?: boolean;
                support_completed?: boolean;
                utility_completed?: boolean;
            };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            };
            bracket?: {
                correct?: number;
                points?: number;
            };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[];
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            };
        } & {
            battle_pass_level?: number;
            cavern_crawl?: {
                rooms_cleared?: number;
                carry_completed?: boolean;
                support_completed?: boolean;
                utility_completed?: boolean;
            } & {
                rooms_cleared?: number;
                carry_completed?: boolean;
                support_completed?: boolean;
                utility_completed?: boolean;
            } & { [K_100 in Exclude<keyof I_1["event_ti8"]["cavern_crawl"], keyof CMsgGCToClientBattlePassRollup_TI8_CavernCrawl>]: never; };
            wagering?: {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & {
                total_wagered?: number;
                total_won?: number;
                average_won?: number;
                success_rate?: number;
                total_tips?: number;
            } & { [K_101 in Exclude<keyof I_1["event_ti8"]["wagering"], keyof CMsgGCToClientBattlePassRollup_TI8_Wagering>]: never; };
            achievements?: {
                completed?: number;
                total?: number;
                points?: number;
            } & {
                completed?: number;
                total?: number;
                points?: number;
            } & { [K_102 in Exclude<keyof I_1["event_ti8"]["achievements"], keyof CMsgGCToClientBattlePassRollup_TI8_Achievements>]: never; };
            predictions?: {
                correct?: number;
                total?: number;
                points?: number;
            } & {
                correct?: number;
                total?: number;
                points?: number;
            } & { [K_103 in Exclude<keyof I_1["event_ti8"]["predictions"], keyof CMsgGCToClientBattlePassRollup_TI8_Predictions>]: never; };
            bracket?: {
                correct?: number;
                points?: number;
            } & {
                correct?: number;
                points?: number;
            } & { [K_104 in Exclude<keyof I_1["event_ti8"]["bracket"], keyof CMsgGCToClientBattlePassRollup_TI8_Bracket>]: never; };
            player_cards?: {
                account_id?: number;
                quality?: number;
            }[] & ({
                account_id?: number;
                quality?: number;
            } & {
                account_id?: number;
                quality?: number;
            } & { [K_105 in Exclude<keyof I_1["event_ti8"]["player_cards"][number], keyof CMsgGCToClientBattlePassRollup_TI8_PlayerCard>]: never; })[] & { [K_106 in Exclude<keyof I_1["event_ti8"]["player_cards"], keyof {
                account_id?: number;
                quality?: number;
            }[]>]: never; };
            fantasy_challenge?: {
                total_score?: number;
                percentile?: number;
            } & {
                total_score?: number;
                percentile?: number;
            } & { [K_107 in Exclude<keyof I_1["event_ti8"]["fantasy_challenge"], keyof CMsgGCToClientBattlePassRollup_TI8_FantasyChallenge>]: never; };
        } & { [K_108 in Exclude<keyof I_1["event_ti8"], keyof CMsgGCToClientBattlePassRollup_TI8>]: never; };
        event_ti9?: {
            battle_pass_level?: number;
        } & {
            battle_pass_level?: number;
        } & { [K_109 in Exclude<keyof I_1["event_ti9"], "battle_pass_level">]: never; };
        event_ti10?: {
            battle_pass_level?: number;
        } & {
            battle_pass_level?: number;
        } & { [K_110 in Exclude<keyof I_1["event_ti10"], "battle_pass_level">]: never; };
    } & { [K_111 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollupResponse>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollupResponse;
};
export declare const CMsgGCToClientBattlePassRollupListRequest: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollupListRequest;
    toJSON(message: CMsgGCToClientBattlePassRollupListRequest): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgGCToClientBattlePassRollupListRequest;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgGCToClientBattlePassRollupListRequest;
};
export declare const CMsgGCToClientBattlePassRollupListResponse: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollupListResponse;
    toJSON(message: CMsgGCToClientBattlePassRollupListResponse): unknown;
    create<I extends {
        event_info?: {
            event_id?: number;
            level?: number;
        }[];
    } & {
        event_info?: {
            event_id?: number;
            level?: number;
        }[] & ({
            event_id?: number;
            level?: number;
        } & {
            event_id?: number;
            level?: number;
        } & { [K in Exclude<keyof I["event_info"][number], keyof CMsgGCToClientBattlePassRollupListResponse_EventInfo>]: never; })[] & { [K_1 in Exclude<keyof I["event_info"], keyof {
            event_id?: number;
            level?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "event_info">]: never; }>(base?: I): CMsgGCToClientBattlePassRollupListResponse;
    fromPartial<I_1 extends {
        event_info?: {
            event_id?: number;
            level?: number;
        }[];
    } & {
        event_info?: {
            event_id?: number;
            level?: number;
        }[] & ({
            event_id?: number;
            level?: number;
        } & {
            event_id?: number;
            level?: number;
        } & { [K_3 in Exclude<keyof I_1["event_info"][number], keyof CMsgGCToClientBattlePassRollupListResponse_EventInfo>]: never; })[] & { [K_4 in Exclude<keyof I_1["event_info"], keyof {
            event_id?: number;
            level?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "event_info">]: never; }>(object: I_1): CMsgGCToClientBattlePassRollupListResponse;
};
export declare const CMsgGCToClientBattlePassRollupListResponse_EventInfo: {
    fromJSON(object: any): CMsgGCToClientBattlePassRollupListResponse_EventInfo;
    toJSON(message: CMsgGCToClientBattlePassRollupListResponse_EventInfo): unknown;
    create<I extends {
        event_id?: number;
        level?: number;
    } & {
        event_id?: number;
        level?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientBattlePassRollupListResponse_EventInfo>]: never; }>(base?: I): CMsgGCToClientBattlePassRollupListResponse_EventInfo;
    fromPartial<I_1 extends {
        event_id?: number;
        level?: number;
    } & {
        event_id?: number;
        level?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientBattlePassRollupListResponse_EventInfo>]: never; }>(object: I_1): CMsgGCToClientBattlePassRollupListResponse_EventInfo;
};
export declare const CMsgClientToGCTransferSeasonalMMRRequest: {
    fromJSON(object: any): CMsgClientToGCTransferSeasonalMMRRequest;
    toJSON(message: CMsgClientToGCTransferSeasonalMMRRequest): unknown;
    create<I extends {
        is_party?: boolean;
    } & {
        is_party?: boolean;
    } & { [K in Exclude<keyof I, "is_party">]: never; }>(base?: I): CMsgClientToGCTransferSeasonalMMRRequest;
    fromPartial<I_1 extends {
        is_party?: boolean;
    } & {
        is_party?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "is_party">]: never; }>(object: I_1): CMsgClientToGCTransferSeasonalMMRRequest;
};
export declare const CMsgClientToGCTransferSeasonalMMRResponse: {
    fromJSON(object: any): CMsgClientToGCTransferSeasonalMMRResponse;
    toJSON(message: CMsgClientToGCTransferSeasonalMMRResponse): unknown;
    create<I extends {
        success?: boolean;
    } & {
        success?: boolean;
    } & { [K in Exclude<keyof I, "success">]: never; }>(base?: I): CMsgClientToGCTransferSeasonalMMRResponse;
    fromPartial<I_1 extends {
        success?: boolean;
    } & {
        success?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "success">]: never; }>(object: I_1): CMsgClientToGCTransferSeasonalMMRResponse;
};
export declare const CMsgGCToClientPlaytestStatus: {
    fromJSON(object: any): CMsgGCToClientPlaytestStatus;
    toJSON(message: CMsgGCToClientPlaytestStatus): unknown;
    create<I extends {
        active?: boolean;
    } & {
        active?: boolean;
    } & { [K in Exclude<keyof I, "active">]: never; }>(base?: I): CMsgGCToClientPlaytestStatus;
    fromPartial<I_1 extends {
        active?: boolean;
    } & {
        active?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "active">]: never; }>(object: I_1): CMsgGCToClientPlaytestStatus;
};
export declare const CMsgClientToGCJoinPlaytest: {
    fromJSON(object: any): CMsgClientToGCJoinPlaytest;
    toJSON(message: CMsgClientToGCJoinPlaytest): unknown;
    create<I extends {
        client_version?: number;
    } & {
        client_version?: number;
    } & { [K in Exclude<keyof I, "client_version">]: never; }>(base?: I): CMsgClientToGCJoinPlaytest;
    fromPartial<I_1 extends {
        client_version?: number;
    } & {
        client_version?: number;
    } & { [K_1 in Exclude<keyof I_1, "client_version">]: never; }>(object: I_1): CMsgClientToGCJoinPlaytest;
};
export declare const CMsgClientToGCJoinPlaytestResponse: {
    fromJSON(object: any): CMsgClientToGCJoinPlaytestResponse;
    toJSON(message: CMsgClientToGCJoinPlaytestResponse): unknown;
    create<I extends {
        error?: string;
    } & {
        error?: string;
    } & { [K in Exclude<keyof I, "error">]: never; }>(base?: I): CMsgClientToGCJoinPlaytestResponse;
    fromPartial<I_1 extends {
        error?: string;
    } & {
        error?: string;
    } & { [K_1 in Exclude<keyof I_1, "error">]: never; }>(object: I_1): CMsgClientToGCJoinPlaytestResponse;
};
export declare const CMsgDOTASetFavoriteTeam: {
    fromJSON(object: any): CMsgDOTASetFavoriteTeam;
    toJSON(message: CMsgDOTASetFavoriteTeam): unknown;
    create<I extends {
        team_id?: number;
        event_id?: number;
    } & {
        team_id?: number;
        event_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTASetFavoriteTeam>]: never; }>(base?: I): CMsgDOTASetFavoriteTeam;
    fromPartial<I_1 extends {
        team_id?: number;
        event_id?: number;
    } & {
        team_id?: number;
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTASetFavoriteTeam>]: never; }>(object: I_1): CMsgDOTASetFavoriteTeam;
};
export declare const CMsgDOTATriviaCurrentQuestions: {
    fromJSON(object: any): CMsgDOTATriviaCurrentQuestions;
    toJSON(message: CMsgDOTATriviaCurrentQuestions): unknown;
    create<I extends {
        questions?: {
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[];
            correct_answer_index?: number;
        }[];
        trivia_enabled?: boolean;
    } & {
        questions?: {
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[];
            correct_answer_index?: number;
        }[] & ({
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[];
            correct_answer_index?: number;
        } & {
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[] & string[] & { [K in Exclude<keyof I["questions"][number]["answer_values"], keyof string[]>]: never; };
            correct_answer_index?: number;
        } & { [K_1 in Exclude<keyof I["questions"][number], keyof CMsgDOTATriviaQuestion>]: never; })[] & { [K_2 in Exclude<keyof I["questions"], keyof {
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[];
            correct_answer_index?: number;
        }[]>]: never; };
        trivia_enabled?: boolean;
    } & { [K_3 in Exclude<keyof I, keyof CMsgDOTATriviaCurrentQuestions>]: never; }>(base?: I): CMsgDOTATriviaCurrentQuestions;
    fromPartial<I_1 extends {
        questions?: {
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[];
            correct_answer_index?: number;
        }[];
        trivia_enabled?: boolean;
    } & {
        questions?: {
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[];
            correct_answer_index?: number;
        }[] & ({
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[];
            correct_answer_index?: number;
        } & {
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[] & string[] & { [K_4 in Exclude<keyof I_1["questions"][number]["answer_values"], keyof string[]>]: never; };
            correct_answer_index?: number;
        } & { [K_5 in Exclude<keyof I_1["questions"][number], keyof CMsgDOTATriviaQuestion>]: never; })[] & { [K_6 in Exclude<keyof I_1["questions"], keyof {
            question_id?: number;
            category?: import("./dota_gcmessages_common").EDOTATriviaQuestionCategory;
            timestamp?: number;
            question_value?: string;
            answer_values?: string[];
            correct_answer_index?: number;
        }[]>]: never; };
        trivia_enabled?: boolean;
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgDOTATriviaCurrentQuestions>]: never; }>(object: I_1): CMsgDOTATriviaCurrentQuestions;
};
export declare const CMsgDOTASubmitTriviaQuestionAnswer: {
    fromJSON(object: any): CMsgDOTASubmitTriviaQuestionAnswer;
    toJSON(message: CMsgDOTASubmitTriviaQuestionAnswer): unknown;
    create<I extends {
        question_id?: number;
        answer_index?: number;
    } & {
        question_id?: number;
        answer_index?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTASubmitTriviaQuestionAnswer>]: never; }>(base?: I): CMsgDOTASubmitTriviaQuestionAnswer;
    fromPartial<I_1 extends {
        question_id?: number;
        answer_index?: number;
    } & {
        question_id?: number;
        answer_index?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTASubmitTriviaQuestionAnswer>]: never; }>(object: I_1): CMsgDOTASubmitTriviaQuestionAnswer;
};
export declare const CMsgDOTASubmitTriviaQuestionAnswerResponse: {
    fromJSON(object: any): CMsgDOTASubmitTriviaQuestionAnswerResponse;
    toJSON(message: CMsgDOTASubmitTriviaQuestionAnswerResponse): unknown;
    create<I extends {
        result?: EDOTATriviaAnswerResult;
    } & {
        result?: EDOTATriviaAnswerResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDOTASubmitTriviaQuestionAnswerResponse;
    fromPartial<I_1 extends {
        result?: EDOTATriviaAnswerResult;
    } & {
        result?: EDOTATriviaAnswerResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDOTASubmitTriviaQuestionAnswerResponse;
};
export declare const CMsgDOTAStartTriviaSession: {
    fromJSON(_: any): CMsgDOTAStartTriviaSession;
    toJSON(_: CMsgDOTAStartTriviaSession): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgDOTAStartTriviaSession;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgDOTAStartTriviaSession;
};
export declare const CMsgDOTAStartTriviaSessionResponse: {
    fromJSON(object: any): CMsgDOTAStartTriviaSessionResponse;
    toJSON(message: CMsgDOTAStartTriviaSessionResponse): unknown;
    create<I extends {
        trivia_enabled?: boolean;
        current_timestamp?: number;
    } & {
        trivia_enabled?: boolean;
        current_timestamp?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAStartTriviaSessionResponse>]: never; }>(base?: I): CMsgDOTAStartTriviaSessionResponse;
    fromPartial<I_1 extends {
        trivia_enabled?: boolean;
        current_timestamp?: number;
    } & {
        trivia_enabled?: boolean;
        current_timestamp?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAStartTriviaSessionResponse>]: never; }>(object: I_1): CMsgDOTAStartTriviaSessionResponse;
};
export declare const CMsgDOTAAnchorPhoneNumberRequest: {
    fromJSON(_: any): CMsgDOTAAnchorPhoneNumberRequest;
    toJSON(_: CMsgDOTAAnchorPhoneNumberRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgDOTAAnchorPhoneNumberRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgDOTAAnchorPhoneNumberRequest;
};
export declare const CMsgDOTAAnchorPhoneNumberResponse: {
    fromJSON(object: any): CMsgDOTAAnchorPhoneNumberResponse;
    toJSON(message: CMsgDOTAAnchorPhoneNumberResponse): unknown;
    create<I extends {
        result?: CMsgDOTAAnchorPhoneNumberResponse_Result;
    } & {
        result?: CMsgDOTAAnchorPhoneNumberResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDOTAAnchorPhoneNumberResponse;
    fromPartial<I_1 extends {
        result?: CMsgDOTAAnchorPhoneNumberResponse_Result;
    } & {
        result?: CMsgDOTAAnchorPhoneNumberResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDOTAAnchorPhoneNumberResponse;
};
export declare const CMsgDOTAUnanchorPhoneNumberRequest: {
    fromJSON(_: any): CMsgDOTAUnanchorPhoneNumberRequest;
    toJSON(_: CMsgDOTAUnanchorPhoneNumberRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgDOTAUnanchorPhoneNumberRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgDOTAUnanchorPhoneNumberRequest;
};
export declare const CMsgDOTAUnanchorPhoneNumberResponse: {
    fromJSON(object: any): CMsgDOTAUnanchorPhoneNumberResponse;
    toJSON(message: CMsgDOTAUnanchorPhoneNumberResponse): unknown;
    create<I extends {
        result?: CMsgDOTAUnanchorPhoneNumberResponse_Result;
    } & {
        result?: CMsgDOTAUnanchorPhoneNumberResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDOTAUnanchorPhoneNumberResponse;
    fromPartial<I_1 extends {
        result?: CMsgDOTAUnanchorPhoneNumberResponse_Result;
    } & {
        result?: CMsgDOTAUnanchorPhoneNumberResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDOTAUnanchorPhoneNumberResponse;
};
export declare const CMsgGCToClientCommendNotification: {
    fromJSON(object: any): CMsgGCToClientCommendNotification;
    toJSON(message: CMsgGCToClientCommendNotification): unknown;
    create<I extends {
        commender_account_id?: number;
        commender_name?: string;
        flags?: number;
    } & {
        commender_account_id?: number;
        commender_name?: string;
        flags?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientCommendNotification>]: never; }>(base?: I): CMsgGCToClientCommendNotification;
    fromPartial<I_1 extends {
        commender_account_id?: number;
        commender_name?: string;
        flags?: number;
    } & {
        commender_account_id?: number;
        commender_name?: string;
        flags?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientCommendNotification>]: never; }>(object: I_1): CMsgGCToClientCommendNotification;
};
export declare const CMsgDOTAClientToGCQuickStatsRequest: {
    fromJSON(object: any): CMsgDOTAClientToGCQuickStatsRequest;
    toJSON(message: CMsgDOTAClientToGCQuickStatsRequest): unknown;
    create<I extends {
        player_account_id?: number;
        hero_id?: number;
        item_id?: number;
        league_id?: number;
    } & {
        player_account_id?: number;
        hero_id?: number;
        item_id?: number;
        league_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAClientToGCQuickStatsRequest>]: never; }>(base?: I): CMsgDOTAClientToGCQuickStatsRequest;
    fromPartial<I_1 extends {
        player_account_id?: number;
        hero_id?: number;
        item_id?: number;
        league_id?: number;
    } & {
        player_account_id?: number;
        hero_id?: number;
        item_id?: number;
        league_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAClientToGCQuickStatsRequest>]: never; }>(object: I_1): CMsgDOTAClientToGCQuickStatsRequest;
};
export declare const CMsgDOTAClientToGCQuickStatsResponse: {
    fromJSON(object: any): CMsgDOTAClientToGCQuickStatsResponse;
    toJSON(message: CMsgDOTAClientToGCQuickStatsResponse): unknown;
    create<I extends {
        original_request?: {
            player_account_id?: number;
            hero_id?: number;
            item_id?: number;
            league_id?: number;
        };
        hero_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        item_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        item_hero_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        item_player_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        hero_player_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        full_set_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
    } & {
        original_request?: {
            player_account_id?: number;
            hero_id?: number;
            item_id?: number;
            league_id?: number;
        } & {
            player_account_id?: number;
            hero_id?: number;
            item_id?: number;
            league_id?: number;
        } & { [K in Exclude<keyof I["original_request"], keyof CMsgDOTAClientToGCQuickStatsRequest>]: never; };
        hero_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_1 in Exclude<keyof I["hero_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        item_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_2 in Exclude<keyof I["item_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        item_hero_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_3 in Exclude<keyof I["item_hero_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        item_player_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_4 in Exclude<keyof I["item_player_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        hero_player_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_5 in Exclude<keyof I["hero_player_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        full_set_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_6 in Exclude<keyof I["full_set_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
    } & { [K_7 in Exclude<keyof I, keyof CMsgDOTAClientToGCQuickStatsResponse>]: never; }>(base?: I): CMsgDOTAClientToGCQuickStatsResponse;
    fromPartial<I_1 extends {
        original_request?: {
            player_account_id?: number;
            hero_id?: number;
            item_id?: number;
            league_id?: number;
        };
        hero_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        item_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        item_hero_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        item_player_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        hero_player_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
        full_set_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        };
    } & {
        original_request?: {
            player_account_id?: number;
            hero_id?: number;
            item_id?: number;
            league_id?: number;
        } & {
            player_account_id?: number;
            hero_id?: number;
            item_id?: number;
            league_id?: number;
        } & { [K_8 in Exclude<keyof I_1["original_request"], keyof CMsgDOTAClientToGCQuickStatsRequest>]: never; };
        hero_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_9 in Exclude<keyof I_1["hero_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        item_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_10 in Exclude<keyof I_1["item_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        item_hero_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_11 in Exclude<keyof I_1["item_hero_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        item_player_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_12 in Exclude<keyof I_1["item_player_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        hero_player_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_13 in Exclude<keyof I_1["hero_player_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
        full_set_stats?: {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & {
            win_percent?: number;
            pick_percent?: number;
            win_count?: number;
            pick_count?: number;
        } & { [K_14 in Exclude<keyof I_1["full_set_stats"], keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; };
    } & { [K_15 in Exclude<keyof I_1, keyof CMsgDOTAClientToGCQuickStatsResponse>]: never; }>(object: I_1): CMsgDOTAClientToGCQuickStatsResponse;
};
export declare const CMsgDOTAClientToGCQuickStatsResponse_SimpleStats: {
    fromJSON(object: any): CMsgDOTAClientToGCQuickStatsResponse_SimpleStats;
    toJSON(message: CMsgDOTAClientToGCQuickStatsResponse_SimpleStats): unknown;
    create<I extends {
        win_percent?: number;
        pick_percent?: number;
        win_count?: number;
        pick_count?: number;
    } & {
        win_percent?: number;
        pick_percent?: number;
        win_count?: number;
        pick_count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; }>(base?: I): CMsgDOTAClientToGCQuickStatsResponse_SimpleStats;
    fromPartial<I_1 extends {
        win_percent?: number;
        pick_percent?: number;
        win_count?: number;
        pick_count?: number;
    } & {
        win_percent?: number;
        pick_percent?: number;
        win_count?: number;
        pick_count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAClientToGCQuickStatsResponse_SimpleStats>]: never; }>(object: I_1): CMsgDOTAClientToGCQuickStatsResponse_SimpleStats;
};
export declare const CMsgDOTASelectionPriorityChoiceRequest: {
    fromJSON(object: any): CMsgDOTASelectionPriorityChoiceRequest;
    toJSON(message: CMsgDOTASelectionPriorityChoiceRequest): unknown;
    create<I extends {
        choice?: DOTASelectionPriorityChoice;
    } & {
        choice?: DOTASelectionPriorityChoice;
    } & { [K in Exclude<keyof I, "choice">]: never; }>(base?: I): CMsgDOTASelectionPriorityChoiceRequest;
    fromPartial<I_1 extends {
        choice?: DOTASelectionPriorityChoice;
    } & {
        choice?: DOTASelectionPriorityChoice;
    } & { [K_1 in Exclude<keyof I_1, "choice">]: never; }>(object: I_1): CMsgDOTASelectionPriorityChoiceRequest;
};
export declare const CMsgDOTASelectionPriorityChoiceResponse: {
    fromJSON(object: any): CMsgDOTASelectionPriorityChoiceResponse;
    toJSON(message: CMsgDOTASelectionPriorityChoiceResponse): unknown;
    create<I extends {
        result?: CMsgDOTASelectionPriorityChoiceResponse_Result;
    } & {
        result?: CMsgDOTASelectionPriorityChoiceResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDOTASelectionPriorityChoiceResponse;
    fromPartial<I_1 extends {
        result?: CMsgDOTASelectionPriorityChoiceResponse_Result;
    } & {
        result?: CMsgDOTASelectionPriorityChoiceResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDOTASelectionPriorityChoiceResponse;
};
export declare const CMsgDOTAGameAutographReward: {
    fromJSON(object: any): CMsgDOTAGameAutographReward;
    toJSON(message: CMsgDOTAGameAutographReward): unknown;
    create<I extends {
        badge_id?: string;
    } & {
        badge_id?: string;
    } & { [K in Exclude<keyof I, "badge_id">]: never; }>(base?: I): CMsgDOTAGameAutographReward;
    fromPartial<I_1 extends {
        badge_id?: string;
    } & {
        badge_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "badge_id">]: never; }>(object: I_1): CMsgDOTAGameAutographReward;
};
export declare const CMsgDOTAGameAutographRewardResponse: {
    fromJSON(object: any): CMsgDOTAGameAutographRewardResponse;
    toJSON(message: CMsgDOTAGameAutographRewardResponse): unknown;
    create<I extends {
        result?: CMsgDOTAGameAutographRewardResponse_Result;
    } & {
        result?: CMsgDOTAGameAutographRewardResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDOTAGameAutographRewardResponse;
    fromPartial<I_1 extends {
        result?: CMsgDOTAGameAutographRewardResponse_Result;
    } & {
        result?: CMsgDOTAGameAutographRewardResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDOTAGameAutographRewardResponse;
};
export declare const CMsgDOTADestroyLobbyRequest: {
    fromJSON(_: any): CMsgDOTADestroyLobbyRequest;
    toJSON(_: CMsgDOTADestroyLobbyRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgDOTADestroyLobbyRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgDOTADestroyLobbyRequest;
};
export declare const CMsgDOTADestroyLobbyResponse: {
    fromJSON(object: any): CMsgDOTADestroyLobbyResponse;
    toJSON(message: CMsgDOTADestroyLobbyResponse): unknown;
    create<I extends {
        result?: CMsgDOTADestroyLobbyResponse_Result;
    } & {
        result?: CMsgDOTADestroyLobbyResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDOTADestroyLobbyResponse;
    fromPartial<I_1 extends {
        result?: CMsgDOTADestroyLobbyResponse_Result;
    } & {
        result?: CMsgDOTADestroyLobbyResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDOTADestroyLobbyResponse;
};
export declare const CMsgDOTAGetRecentPlayTimeFriendsRequest: {
    fromJSON(_: any): CMsgDOTAGetRecentPlayTimeFriendsRequest;
    toJSON(_: CMsgDOTAGetRecentPlayTimeFriendsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgDOTAGetRecentPlayTimeFriendsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgDOTAGetRecentPlayTimeFriendsRequest;
};
export declare const CMsgDOTAGetRecentPlayTimeFriendsResponse: {
    fromJSON(object: any): CMsgDOTAGetRecentPlayTimeFriendsResponse;
    toJSON(message: CMsgDOTAGetRecentPlayTimeFriendsResponse): unknown;
    create<I extends {
        account_ids?: number[];
    } & {
        account_ids?: number[] & number[] & { [K in Exclude<keyof I["account_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "account_ids">]: never; }>(base?: I): CMsgDOTAGetRecentPlayTimeFriendsResponse;
    fromPartial<I_1 extends {
        account_ids?: number[];
    } & {
        account_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["account_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "account_ids">]: never; }>(object: I_1): CMsgDOTAGetRecentPlayTimeFriendsResponse;
};
export declare const CMsgPurchaseItemWithEventPoints: {
    fromJSON(object: any): CMsgPurchaseItemWithEventPoints;
    toJSON(message: CMsgPurchaseItemWithEventPoints): unknown;
    create<I extends {
        item_def?: number;
        quantity?: number;
        event_id?: EEvent;
        use_premium_points?: boolean;
    } & {
        item_def?: number;
        quantity?: number;
        event_id?: EEvent;
        use_premium_points?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgPurchaseItemWithEventPoints>]: never; }>(base?: I): CMsgPurchaseItemWithEventPoints;
    fromPartial<I_1 extends {
        item_def?: number;
        quantity?: number;
        event_id?: EEvent;
        use_premium_points?: boolean;
    } & {
        item_def?: number;
        quantity?: number;
        event_id?: EEvent;
        use_premium_points?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgPurchaseItemWithEventPoints>]: never; }>(object: I_1): CMsgPurchaseItemWithEventPoints;
};
export declare const CMsgPurchaseItemWithEventPointsResponse: {
    fromJSON(object: any): CMsgPurchaseItemWithEventPointsResponse;
    toJSON(message: CMsgPurchaseItemWithEventPointsResponse): unknown;
    create<I extends {
        result?: CMsgPurchaseItemWithEventPointsResponse_Result;
    } & {
        result?: CMsgPurchaseItemWithEventPointsResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgPurchaseItemWithEventPointsResponse;
    fromPartial<I_1 extends {
        result?: CMsgPurchaseItemWithEventPointsResponse_Result;
    } & {
        result?: CMsgPurchaseItemWithEventPointsResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgPurchaseItemWithEventPointsResponse;
};
export declare const CMsgPurchaseHeroRandomRelic: {
    fromJSON(object: any): CMsgPurchaseHeroRandomRelic;
    toJSON(message: CMsgPurchaseHeroRandomRelic): unknown;
    create<I extends {
        hero_id?: number;
        relic_rarity?: EHeroRelicRarity;
    } & {
        hero_id?: number;
        relic_rarity?: EHeroRelicRarity;
    } & { [K in Exclude<keyof I, keyof CMsgPurchaseHeroRandomRelic>]: never; }>(base?: I): CMsgPurchaseHeroRandomRelic;
    fromPartial<I_1 extends {
        hero_id?: number;
        relic_rarity?: EHeroRelicRarity;
    } & {
        hero_id?: number;
        relic_rarity?: EHeroRelicRarity;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgPurchaseHeroRandomRelic>]: never; }>(object: I_1): CMsgPurchaseHeroRandomRelic;
};
export declare const CMsgPurchaseHeroRandomRelicResponse: {
    fromJSON(object: any): CMsgPurchaseHeroRandomRelicResponse;
    toJSON(message: CMsgPurchaseHeroRandomRelicResponse): unknown;
    create<I extends {
        result?: EPurchaseHeroRelicResult;
        kill_eater_type?: number;
    } & {
        result?: EPurchaseHeroRelicResult;
        kill_eater_type?: number;
    } & { [K in Exclude<keyof I, keyof CMsgPurchaseHeroRandomRelicResponse>]: never; }>(base?: I): CMsgPurchaseHeroRandomRelicResponse;
    fromPartial<I_1 extends {
        result?: EPurchaseHeroRelicResult;
        kill_eater_type?: number;
    } & {
        result?: EPurchaseHeroRelicResult;
        kill_eater_type?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgPurchaseHeroRandomRelicResponse>]: never; }>(object: I_1): CMsgPurchaseHeroRandomRelicResponse;
};
export declare const CMsgClientToGCRequestPlusWeeklyChallengeResult: {
    fromJSON(object: any): CMsgClientToGCRequestPlusWeeklyChallengeResult;
    toJSON(message: CMsgClientToGCRequestPlusWeeklyChallengeResult): unknown;
    create<I extends {
        event_id?: EEvent;
        week?: number;
    } & {
        event_id?: EEvent;
        week?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCRequestPlusWeeklyChallengeResult>]: never; }>(base?: I): CMsgClientToGCRequestPlusWeeklyChallengeResult;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        week?: number;
    } & {
        event_id?: EEvent;
        week?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCRequestPlusWeeklyChallengeResult>]: never; }>(object: I_1): CMsgClientToGCRequestPlusWeeklyChallengeResult;
};
export declare const CMsgClientToGCRequestPlusWeeklyChallengeResultResponse: {
    fromJSON(_: any): CMsgClientToGCRequestPlusWeeklyChallengeResultResponse;
    toJSON(_: CMsgClientToGCRequestPlusWeeklyChallengeResultResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCRequestPlusWeeklyChallengeResultResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCRequestPlusWeeklyChallengeResultResponse;
};
export declare const CMsgProfileRequest: {
    fromJSON(object: any): CMsgProfileRequest;
    toJSON(message: CMsgProfileRequest): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgProfileRequest;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgProfileRequest;
};
export declare const CMsgProfileResponse: {
    fromJSON(object: any): CMsgProfileResponse;
    toJSON(message: CMsgProfileResponse): unknown;
    create<I extends {
        background_item?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        };
        featured_heroes?: {
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[];
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            };
        }[];
        recent_matches?: {
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        }[];
        successful_heroes?: {
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        }[];
        recent_match_details?: {
            match_id?: string;
            game_mode?: DOTA_GameMode;
            kills?: number;
            deaths?: number;
            assists?: number;
            duration?: number;
            player_slot?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            timestamp?: number;
            lobby_type?: number;
            team_number?: number;
        };
        result?: CMsgProfileResponse_EResponse;
        stickerbook_page?: {
            page_num?: number;
            event_id?: EEvent;
            team_id?: number;
            stickers?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            }[];
            page_type?: EStickerbookPageType;
        };
    } & {
        background_item?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        } & {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[] & ({
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & { [K in Exclude<keyof I["background_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_1 in Exclude<keyof I["background_item"]["attribute"], keyof {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[]>]: never; };
            interior_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_2 in Exclude<keyof I["background_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_3 in Exclude<keyof I["background_item"]["interior_item"]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_4 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_5 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_6 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_7 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_8 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_9 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_10 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_11 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_12 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_13 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_14 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_15 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_16 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_17 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_18 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_19 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_20 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_21 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_22 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_23 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_24 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_25 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_26 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_27 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_28 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_29 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_30 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_31 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_32 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_33 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_34 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_35 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_36 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_37 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_38 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_39 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_40 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_41 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_42 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_43 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_44 in Exclude<keyof I["background_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_45 in Exclude<keyof I["background_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_46 in Exclude<keyof I["background_item"]["interior_item"]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_47 in Exclude<keyof I["background_item"]["interior_item"], keyof CSOEconItem>]: never; };
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[] & ({
                new_class?: number;
                new_slot?: number;
            } & {
                new_class?: number;
                new_slot?: number;
            } & { [K_48 in Exclude<keyof I["background_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_49 in Exclude<keyof I["background_item"]["equipped_state"], keyof {
                new_class?: number;
                new_slot?: number;
            }[]>]: never; };
        } & { [K_50 in Exclude<keyof I["background_item"], keyof CSOEconItem>]: never; };
        featured_heroes?: {
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[];
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            };
        }[] & ({
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[];
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            };
        } & {
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[] & ({
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_51 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_52 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_53 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_54 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_55 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_56 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_57 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_58 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_59 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_60 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_61 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_62 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_63 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_64 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_65 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_66 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_67 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_68 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_69 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_70 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_71 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_72 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_73 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_74 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_75 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_76 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_77 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_78 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_79 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_80 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_81 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_82 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_83 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_84 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_85 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_86 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_87 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_88 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_89 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_90 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_91 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_92 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_93 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_94 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_95 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_96 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"][number], keyof CSOEconItem>]: never; })[] & { [K_97 in Exclude<keyof I["featured_heroes"][number]["equipped_econ_items"], keyof {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[]>]: never; };
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_98 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_99 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_100 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_101 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_102 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_103 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_104 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_105 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_106 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_107 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_108 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_109 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_110 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_111 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_112 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_113 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_114 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_115 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_116 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_117 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_118 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_119 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_120 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_121 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_122 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_123 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_124 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_125 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_126 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_127 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_128 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_129 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_130 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_131 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_132 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_133 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_134 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_135 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_136 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_137 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_138 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_139 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_140 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_141 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_142 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_143 in Exclude<keyof I["featured_heroes"][number]["plus_hero_relics_item"], keyof CSOEconItem>]: never; };
        } & { [K_144 in Exclude<keyof I["featured_heroes"][number], keyof CMsgProfileResponse_FeaturedHero>]: never; })[] & { [K_145 in Exclude<keyof I["featured_heroes"], keyof {
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[];
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            };
        }[]>]: never; };
        recent_matches?: {
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        }[] & ({
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        } & {
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        } & { [K_146 in Exclude<keyof I["recent_matches"][number], keyof CMsgProfileResponse_MatchInfo>]: never; })[] & { [K_147 in Exclude<keyof I["recent_matches"], keyof {
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        }[]>]: never; };
        successful_heroes?: {
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        }[] & ({
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        } & {
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        } & { [K_148 in Exclude<keyof I["successful_heroes"][number], keyof CMsgSuccessfulHero>]: never; })[] & { [K_149 in Exclude<keyof I["successful_heroes"], keyof {
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        }[]>]: never; };
        recent_match_details?: {
            match_id?: string;
            game_mode?: DOTA_GameMode;
            kills?: number;
            deaths?: number;
            assists?: number;
            duration?: number;
            player_slot?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            timestamp?: number;
            lobby_type?: number;
            team_number?: number;
        } & {
            match_id?: string;
            game_mode?: DOTA_GameMode;
            kills?: number;
            deaths?: number;
            assists?: number;
            duration?: number;
            player_slot?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            timestamp?: number;
            lobby_type?: number;
            team_number?: number;
        } & { [K_150 in Exclude<keyof I["recent_match_details"], keyof CMsgRecentMatchInfo>]: never; };
        result?: CMsgProfileResponse_EResponse;
        stickerbook_page?: {
            page_num?: number;
            event_id?: EEvent;
            team_id?: number;
            stickers?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            }[];
            page_type?: EStickerbookPageType;
        } & {
            page_num?: number;
            event_id?: EEvent;
            team_id?: number;
            stickers?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            }[] & ({
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            } & {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            } & { [K_151 in Exclude<keyof I["stickerbook_page"]["stickers"][number], keyof CMsgStickerbookSticker>]: never; })[] & { [K_152 in Exclude<keyof I["stickerbook_page"]["stickers"], keyof {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            }[]>]: never; };
            page_type?: EStickerbookPageType;
        } & { [K_153 in Exclude<keyof I["stickerbook_page"], keyof CMsgStickerbookPage>]: never; };
    } & { [K_154 in Exclude<keyof I, keyof CMsgProfileResponse>]: never; }>(base?: I): CMsgProfileResponse;
    fromPartial<I_1 extends {
        background_item?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        };
        featured_heroes?: {
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[];
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            };
        }[];
        recent_matches?: {
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        }[];
        successful_heroes?: {
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        }[];
        recent_match_details?: {
            match_id?: string;
            game_mode?: DOTA_GameMode;
            kills?: number;
            deaths?: number;
            assists?: number;
            duration?: number;
            player_slot?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            timestamp?: number;
            lobby_type?: number;
            team_number?: number;
        };
        result?: CMsgProfileResponse_EResponse;
        stickerbook_page?: {
            page_num?: number;
            event_id?: EEvent;
            team_id?: number;
            stickers?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            }[];
            page_type?: EStickerbookPageType;
        };
    } & {
        background_item?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        } & {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[] & ({
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & { [K_155 in Exclude<keyof I_1["background_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_156 in Exclude<keyof I_1["background_item"]["attribute"], keyof {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[]>]: never; };
            interior_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_157 in Exclude<keyof I_1["background_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_158 in Exclude<keyof I_1["background_item"]["interior_item"]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_159 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_160 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_161 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_162 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_163 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_164 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_165 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_166 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_167 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_168 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_169 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_170 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_171 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_172 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_173 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_174 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_175 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_176 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_177 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_178 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_179 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_180 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_181 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_182 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_183 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_184 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_185 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_186 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_187 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_188 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_189 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_190 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_191 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_192 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_193 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_194 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_195 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_196 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_197 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_198 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_199 in Exclude<keyof I_1["background_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_200 in Exclude<keyof I_1["background_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_201 in Exclude<keyof I_1["background_item"]["interior_item"]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_202 in Exclude<keyof I_1["background_item"]["interior_item"], keyof CSOEconItem>]: never; };
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[] & ({
                new_class?: number;
                new_slot?: number;
            } & {
                new_class?: number;
                new_slot?: number;
            } & { [K_203 in Exclude<keyof I_1["background_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_204 in Exclude<keyof I_1["background_item"]["equipped_state"], keyof {
                new_class?: number;
                new_slot?: number;
            }[]>]: never; };
        } & { [K_205 in Exclude<keyof I_1["background_item"], keyof CSOEconItem>]: never; };
        featured_heroes?: {
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[];
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            };
        }[] & ({
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[];
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            };
        } & {
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[] & ({
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_206 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_207 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_208 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_209 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_210 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_211 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_212 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_213 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_214 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_215 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_216 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_217 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_218 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_219 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_220 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_221 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_222 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_223 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_224 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_225 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_226 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_227 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_228 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_229 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_230 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_231 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_232 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_233 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_234 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_235 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_236 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_237 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_238 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_239 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_240 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_241 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_242 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_243 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_244 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_245 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_246 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_247 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_248 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_249 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_250 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_251 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"][number], keyof CSOEconItem>]: never; })[] & { [K_252 in Exclude<keyof I_1["featured_heroes"][number]["equipped_econ_items"], keyof {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[]>]: never; };
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_253 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_254 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_255 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_256 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_257 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_258 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_259 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_260 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_261 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_262 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_263 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_264 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_265 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_266 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_267 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_268 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_269 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_270 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_271 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_272 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_273 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_274 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_275 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_276 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_277 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_278 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_279 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_280 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_281 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_282 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_283 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_284 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_285 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_286 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_287 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_288 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_289 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_290 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_291 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_292 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_293 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_294 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_295 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_296 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_297 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_298 in Exclude<keyof I_1["featured_heroes"][number]["plus_hero_relics_item"], keyof CSOEconItem>]: never; };
        } & { [K_299 in Exclude<keyof I_1["featured_heroes"][number], keyof CMsgProfileResponse_FeaturedHero>]: never; })[] & { [K_300 in Exclude<keyof I_1["featured_heroes"], keyof {
            hero_id?: number;
            equipped_econ_items?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            }[];
            manually_set?: boolean;
            plus_hero_xp?: number;
            plus_hero_relics_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            };
        }[]>]: never; };
        recent_matches?: {
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        }[] & ({
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        } & {
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        } & { [K_301 in Exclude<keyof I_1["recent_matches"][number], keyof CMsgProfileResponse_MatchInfo>]: never; })[] & { [K_302 in Exclude<keyof I_1["recent_matches"], keyof {
            match_id?: string;
            match_timestamp?: number;
            performance_rating?: number;
            hero_id?: number;
            won_match?: boolean;
        }[]>]: never; };
        successful_heroes?: {
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        }[] & ({
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        } & {
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        } & { [K_303 in Exclude<keyof I_1["successful_heroes"][number], keyof CMsgSuccessfulHero>]: never; })[] & { [K_304 in Exclude<keyof I_1["successful_heroes"], keyof {
            hero_id?: number;
            win_percent?: number;
            longest_streak?: number;
        }[]>]: never; };
        recent_match_details?: {
            match_id?: string;
            game_mode?: DOTA_GameMode;
            kills?: number;
            deaths?: number;
            assists?: number;
            duration?: number;
            player_slot?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            timestamp?: number;
            lobby_type?: number;
            team_number?: number;
        } & {
            match_id?: string;
            game_mode?: DOTA_GameMode;
            kills?: number;
            deaths?: number;
            assists?: number;
            duration?: number;
            player_slot?: number;
            match_outcome?: import("./dota_shared_enums").EMatchOutcome;
            timestamp?: number;
            lobby_type?: number;
            team_number?: number;
        } & { [K_305 in Exclude<keyof I_1["recent_match_details"], keyof CMsgRecentMatchInfo>]: never; };
        result?: CMsgProfileResponse_EResponse;
        stickerbook_page?: {
            page_num?: number;
            event_id?: EEvent;
            team_id?: number;
            stickers?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            }[];
            page_type?: EStickerbookPageType;
        } & {
            page_num?: number;
            event_id?: EEvent;
            team_id?: number;
            stickers?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            }[] & ({
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            } & {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            } & { [K_306 in Exclude<keyof I_1["stickerbook_page"]["stickers"][number], keyof CMsgStickerbookSticker>]: never; })[] & { [K_307 in Exclude<keyof I_1["stickerbook_page"]["stickers"], keyof {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            }[]>]: never; };
            page_type?: EStickerbookPageType;
        } & { [K_308 in Exclude<keyof I_1["stickerbook_page"], keyof CMsgStickerbookPage>]: never; };
    } & { [K_309 in Exclude<keyof I_1, keyof CMsgProfileResponse>]: never; }>(object: I_1): CMsgProfileResponse;
};
export declare const CMsgProfileResponse_FeaturedHero: {
    fromJSON(object: any): CMsgProfileResponse_FeaturedHero;
    toJSON(message: CMsgProfileResponse_FeaturedHero): unknown;
    create<I extends {
        hero_id?: number;
        equipped_econ_items?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        }[];
        manually_set?: boolean;
        plus_hero_xp?: number;
        plus_hero_relics_item?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        };
    } & {
        hero_id?: number;
        equipped_econ_items?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        }[] & ({
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        } & {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[] & ({
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & { [K in Exclude<keyof I["equipped_econ_items"][number]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_1 in Exclude<keyof I["equipped_econ_items"][number]["attribute"], keyof {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[]>]: never; };
            interior_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_2 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_3 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_4 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_5 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_6 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_7 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_8 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_9 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_10 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_11 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_12 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_13 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_14 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_15 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_16 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_17 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_18 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_19 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_20 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_21 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_22 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_23 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_24 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_25 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_26 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_27 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_28 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_29 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_30 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_31 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_32 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_33 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_34 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_35 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_36 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_37 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_38 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_39 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_40 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_41 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_42 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_43 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_44 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_45 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_46 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_47 in Exclude<keyof I["equipped_econ_items"][number]["interior_item"], keyof CSOEconItem>]: never; };
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[] & ({
                new_class?: number;
                new_slot?: number;
            } & {
                new_class?: number;
                new_slot?: number;
            } & { [K_48 in Exclude<keyof I["equipped_econ_items"][number]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_49 in Exclude<keyof I["equipped_econ_items"][number]["equipped_state"], keyof {
                new_class?: number;
                new_slot?: number;
            }[]>]: never; };
        } & { [K_50 in Exclude<keyof I["equipped_econ_items"][number], keyof CSOEconItem>]: never; })[] & { [K_51 in Exclude<keyof I["equipped_econ_items"], keyof {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        }[]>]: never; };
        manually_set?: boolean;
        plus_hero_xp?: number;
        plus_hero_relics_item?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        } & {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[] & ({
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & { [K_52 in Exclude<keyof I["plus_hero_relics_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_53 in Exclude<keyof I["plus_hero_relics_item"]["attribute"], keyof {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[]>]: never; };
            interior_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_54 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_55 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_56 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_57 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_58 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_59 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_60 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_61 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_62 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_63 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_64 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_65 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_66 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_67 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_68 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_69 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_70 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_71 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_72 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_73 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_74 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_75 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_76 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_77 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_78 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_79 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_80 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_81 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_82 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_83 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_84 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_85 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_86 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_87 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_88 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_89 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_90 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_91 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_92 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_93 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_94 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_95 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_96 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_97 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_98 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_99 in Exclude<keyof I["plus_hero_relics_item"]["interior_item"], keyof CSOEconItem>]: never; };
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[] & ({
                new_class?: number;
                new_slot?: number;
            } & {
                new_class?: number;
                new_slot?: number;
            } & { [K_100 in Exclude<keyof I["plus_hero_relics_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_101 in Exclude<keyof I["plus_hero_relics_item"]["equipped_state"], keyof {
                new_class?: number;
                new_slot?: number;
            }[]>]: never; };
        } & { [K_102 in Exclude<keyof I["plus_hero_relics_item"], keyof CSOEconItem>]: never; };
    } & { [K_103 in Exclude<keyof I, keyof CMsgProfileResponse_FeaturedHero>]: never; }>(base?: I): CMsgProfileResponse_FeaturedHero;
    fromPartial<I_1 extends {
        hero_id?: number;
        equipped_econ_items?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        }[];
        manually_set?: boolean;
        plus_hero_xp?: number;
        plus_hero_relics_item?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        };
    } & {
        hero_id?: number;
        equipped_econ_items?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        }[] & ({
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        } & {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[] & ({
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & { [K_104 in Exclude<keyof I_1["equipped_econ_items"][number]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_105 in Exclude<keyof I_1["equipped_econ_items"][number]["attribute"], keyof {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[]>]: never; };
            interior_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_106 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_107 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_108 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_109 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_110 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_111 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_112 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_113 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_114 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_115 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_116 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_117 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_118 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_119 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_120 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_121 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_122 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_123 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_124 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_125 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_126 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_127 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_128 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_129 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_130 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_131 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_132 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_133 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_134 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_135 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_136 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_137 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_138 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_139 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_140 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_141 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_142 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_143 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_144 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_145 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_146 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_147 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_148 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_149 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_150 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_151 in Exclude<keyof I_1["equipped_econ_items"][number]["interior_item"], keyof CSOEconItem>]: never; };
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[] & ({
                new_class?: number;
                new_slot?: number;
            } & {
                new_class?: number;
                new_slot?: number;
            } & { [K_152 in Exclude<keyof I_1["equipped_econ_items"][number]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_153 in Exclude<keyof I_1["equipped_econ_items"][number]["equipped_state"], keyof {
                new_class?: number;
                new_slot?: number;
            }[]>]: never; };
        } & { [K_154 in Exclude<keyof I_1["equipped_econ_items"][number], keyof CSOEconItem>]: never; })[] & { [K_155 in Exclude<keyof I_1["equipped_econ_items"], keyof {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        }[]>]: never; };
        manually_set?: boolean;
        plus_hero_xp?: number;
        plus_hero_relics_item?: {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[];
            interior_item?: any;
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[];
        } & {
            id?: string;
            account_id?: number;
            inventory?: number;
            def_index?: number;
            quantity?: number;
            level?: number;
            quality?: number;
            flags?: number;
            origin?: number;
            attribute?: {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[] & ({
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            } & { [K_156 in Exclude<keyof I_1["plus_hero_relics_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_157 in Exclude<keyof I_1["plus_hero_relics_item"]["attribute"], keyof {
                def_index?: number;
                value?: number;
                value_bytes?: string;
            }[]>]: never; };
            interior_item?: {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[];
                interior_item?: any;
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[];
            } & {
                id?: string;
                account_id?: number;
                inventory?: number;
                def_index?: number;
                quantity?: number;
                level?: number;
                quality?: number;
                flags?: number;
                origin?: number;
                attribute?: {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[] & ({
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                } & { [K_158 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_159 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["attribute"], keyof {
                    def_index?: number;
                    value?: number;
                    value_bytes?: string;
                }[]>]: never; };
                interior_item?: {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[];
                    interior_item?: any;
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[];
                } & {
                    id?: string;
                    account_id?: number;
                    inventory?: number;
                    def_index?: number;
                    quantity?: number;
                    level?: number;
                    quality?: number;
                    flags?: number;
                    origin?: number;
                    attribute?: {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[] & ({
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    } & { [K_160 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_161 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                        def_index?: number;
                        value?: number;
                        value_bytes?: string;
                    }[]>]: never; };
                    interior_item?: {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[];
                        interior_item?: any;
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[];
                    } & {
                        id?: string;
                        account_id?: number;
                        inventory?: number;
                        def_index?: number;
                        quantity?: number;
                        level?: number;
                        quality?: number;
                        flags?: number;
                        origin?: number;
                        attribute?: {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[] & ({
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        } & { [K_162 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_163 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                            def_index?: number;
                            value?: number;
                            value_bytes?: string;
                        }[]>]: never; };
                        interior_item?: {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[];
                            interior_item?: any;
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[];
                        } & {
                            id?: string;
                            account_id?: number;
                            inventory?: number;
                            def_index?: number;
                            quantity?: number;
                            level?: number;
                            quality?: number;
                            flags?: number;
                            origin?: number;
                            attribute?: {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[] & ({
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            } & { [K_164 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_165 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                def_index?: number;
                                value?: number;
                                value_bytes?: string;
                            }[]>]: never; };
                            interior_item?: {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[];
                                interior_item?: any;
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[];
                            } & {
                                id?: string;
                                account_id?: number;
                                inventory?: number;
                                def_index?: number;
                                quantity?: number;
                                level?: number;
                                quality?: number;
                                flags?: number;
                                origin?: number;
                                attribute?: {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[] & ({
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                } & { [K_166 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_167 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                    def_index?: number;
                                    value?: number;
                                    value_bytes?: string;
                                }[]>]: never; };
                                interior_item?: {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[];
                                    interior_item?: any;
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[];
                                } & {
                                    id?: string;
                                    account_id?: number;
                                    inventory?: number;
                                    def_index?: number;
                                    quantity?: number;
                                    level?: number;
                                    quality?: number;
                                    flags?: number;
                                    origin?: number;
                                    attribute?: {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[] & ({
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    } & { [K_168 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_169 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                        def_index?: number;
                                        value?: number;
                                        value_bytes?: string;
                                    }[]>]: never; };
                                    interior_item?: {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[];
                                        interior_item?: any;
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[];
                                    } & {
                                        id?: string;
                                        account_id?: number;
                                        inventory?: number;
                                        def_index?: number;
                                        quantity?: number;
                                        level?: number;
                                        quality?: number;
                                        flags?: number;
                                        origin?: number;
                                        attribute?: {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[] & ({
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        } & { [K_170 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_171 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                            def_index?: number;
                                            value?: number;
                                            value_bytes?: string;
                                        }[]>]: never; };
                                        interior_item?: {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[];
                                            interior_item?: any;
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[];
                                        } & {
                                            id?: string;
                                            account_id?: number;
                                            inventory?: number;
                                            def_index?: number;
                                            quantity?: number;
                                            level?: number;
                                            quality?: number;
                                            flags?: number;
                                            origin?: number;
                                            attribute?: {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[] & ({
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            } & { [K_172 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_173 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                def_index?: number;
                                                value?: number;
                                                value_bytes?: string;
                                            }[]>]: never; };
                                            interior_item?: {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[];
                                                interior_item?: any;
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[];
                                            } & {
                                                id?: string;
                                                account_id?: number;
                                                inventory?: number;
                                                def_index?: number;
                                                quantity?: number;
                                                level?: number;
                                                quality?: number;
                                                flags?: number;
                                                origin?: number;
                                                attribute?: {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[] & ({
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                } & any & { [K_174 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"][number], keyof import("./base_gcmessages").CSOEconItemAttribute>]: never; })[] & { [K_175 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["attribute"], keyof {
                                                    def_index?: number;
                                                    value?: number;
                                                    value_bytes?: string;
                                                }[]>]: never; };
                                                interior_item?: {
                                                    id?: string;
                                                    account_id?: number;
                                                    inventory?: number;
                                                    def_index?: number;
                                                    quantity?: number;
                                                    level?: number;
                                                    quality?: number;
                                                    flags?: number;
                                                    origin?: number;
                                                    attribute?: {
                                                        def_index?: number;
                                                        value?: number;
                                                        value_bytes?: string;
                                                    }[];
                                                    interior_item?: any;
                                                    style?: number;
                                                    original_id?: string;
                                                    equipped_state?: {
                                                        new_class?: number;
                                                        new_slot?: number;
                                                    }[];
                                                } & any & { [K_176 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                                style?: number;
                                                original_id?: string;
                                                equipped_state?: {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[] & ({
                                                    new_class?: number;
                                                    new_slot?: number;
                                                } & any & { [K_177 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_178 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                    new_class?: number;
                                                    new_slot?: number;
                                                }[]>]: never; };
                                            } & { [K_179 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                            style?: number;
                                            original_id?: string;
                                            equipped_state?: {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[] & ({
                                                new_class?: number;
                                                new_slot?: number;
                                            } & {
                                                new_class?: number;
                                                new_slot?: number;
                                            } & { [K_180 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_181 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                                new_class?: number;
                                                new_slot?: number;
                                            }[]>]: never; };
                                        } & { [K_182 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                        style?: number;
                                        original_id?: string;
                                        equipped_state?: {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[] & ({
                                            new_class?: number;
                                            new_slot?: number;
                                        } & {
                                            new_class?: number;
                                            new_slot?: number;
                                        } & { [K_183 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_184 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                            new_class?: number;
                                            new_slot?: number;
                                        }[]>]: never; };
                                    } & { [K_185 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                    style?: number;
                                    original_id?: string;
                                    equipped_state?: {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[] & ({
                                        new_class?: number;
                                        new_slot?: number;
                                    } & {
                                        new_class?: number;
                                        new_slot?: number;
                                    } & { [K_186 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_187 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                        new_class?: number;
                                        new_slot?: number;
                                    }[]>]: never; };
                                } & { [K_188 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                                style?: number;
                                original_id?: string;
                                equipped_state?: {
                                    new_class?: number;
                                    new_slot?: number;
                                }[] & ({
                                    new_class?: number;
                                    new_slot?: number;
                                } & {
                                    new_class?: number;
                                    new_slot?: number;
                                } & { [K_189 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_190 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                    new_class?: number;
                                    new_slot?: number;
                                }[]>]: never; };
                            } & { [K_191 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                            style?: number;
                            original_id?: string;
                            equipped_state?: {
                                new_class?: number;
                                new_slot?: number;
                            }[] & ({
                                new_class?: number;
                                new_slot?: number;
                            } & {
                                new_class?: number;
                                new_slot?: number;
                            } & { [K_192 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_193 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                                new_class?: number;
                                new_slot?: number;
                            }[]>]: never; };
                        } & { [K_194 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                        style?: number;
                        original_id?: string;
                        equipped_state?: {
                            new_class?: number;
                            new_slot?: number;
                        }[] & ({
                            new_class?: number;
                            new_slot?: number;
                        } & {
                            new_class?: number;
                            new_slot?: number;
                        } & { [K_195 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_196 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                            new_class?: number;
                            new_slot?: number;
                        }[]>]: never; };
                    } & { [K_197 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                    style?: number;
                    original_id?: string;
                    equipped_state?: {
                        new_class?: number;
                        new_slot?: number;
                    }[] & ({
                        new_class?: number;
                        new_slot?: number;
                    } & {
                        new_class?: number;
                        new_slot?: number;
                    } & { [K_198 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_199 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"]["equipped_state"], keyof {
                        new_class?: number;
                        new_slot?: number;
                    }[]>]: never; };
                } & { [K_200 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["interior_item"], keyof CSOEconItem>]: never; };
                style?: number;
                original_id?: string;
                equipped_state?: {
                    new_class?: number;
                    new_slot?: number;
                }[] & ({
                    new_class?: number;
                    new_slot?: number;
                } & {
                    new_class?: number;
                    new_slot?: number;
                } & { [K_201 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_202 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"]["equipped_state"], keyof {
                    new_class?: number;
                    new_slot?: number;
                }[]>]: never; };
            } & { [K_203 in Exclude<keyof I_1["plus_hero_relics_item"]["interior_item"], keyof CSOEconItem>]: never; };
            style?: number;
            original_id?: string;
            equipped_state?: {
                new_class?: number;
                new_slot?: number;
            }[] & ({
                new_class?: number;
                new_slot?: number;
            } & {
                new_class?: number;
                new_slot?: number;
            } & { [K_204 in Exclude<keyof I_1["plus_hero_relics_item"]["equipped_state"][number], keyof import("./base_gcmessages").CSOEconItemEquipped>]: never; })[] & { [K_205 in Exclude<keyof I_1["plus_hero_relics_item"]["equipped_state"], keyof {
                new_class?: number;
                new_slot?: number;
            }[]>]: never; };
        } & { [K_206 in Exclude<keyof I_1["plus_hero_relics_item"], keyof CSOEconItem>]: never; };
    } & { [K_207 in Exclude<keyof I_1, keyof CMsgProfileResponse_FeaturedHero>]: never; }>(object: I_1): CMsgProfileResponse_FeaturedHero;
};
export declare const CMsgProfileResponse_MatchInfo: {
    fromJSON(object: any): CMsgProfileResponse_MatchInfo;
    toJSON(message: CMsgProfileResponse_MatchInfo): unknown;
    create<I extends {
        match_id?: string;
        match_timestamp?: number;
        performance_rating?: number;
        hero_id?: number;
        won_match?: boolean;
    } & {
        match_id?: string;
        match_timestamp?: number;
        performance_rating?: number;
        hero_id?: number;
        won_match?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgProfileResponse_MatchInfo>]: never; }>(base?: I): CMsgProfileResponse_MatchInfo;
    fromPartial<I_1 extends {
        match_id?: string;
        match_timestamp?: number;
        performance_rating?: number;
        hero_id?: number;
        won_match?: boolean;
    } & {
        match_id?: string;
        match_timestamp?: number;
        performance_rating?: number;
        hero_id?: number;
        won_match?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgProfileResponse_MatchInfo>]: never; }>(object: I_1): CMsgProfileResponse_MatchInfo;
};
export declare const CMsgProfileUpdate: {
    fromJSON(object: any): CMsgProfileUpdate;
    toJSON(message: CMsgProfileUpdate): unknown;
    create<I extends {
        background_item_id?: string;
        featured_hero_ids?: number[];
    } & {
        background_item_id?: string;
        featured_hero_ids?: number[] & number[] & { [K in Exclude<keyof I["featured_hero_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgProfileUpdate>]: never; }>(base?: I): CMsgProfileUpdate;
    fromPartial<I_1 extends {
        background_item_id?: string;
        featured_hero_ids?: number[];
    } & {
        background_item_id?: string;
        featured_hero_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["featured_hero_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgProfileUpdate>]: never; }>(object: I_1): CMsgProfileUpdate;
};
export declare const CMsgProfileUpdateResponse: {
    fromJSON(object: any): CMsgProfileUpdateResponse;
    toJSON(message: CMsgProfileUpdateResponse): unknown;
    create<I extends {
        result?: CMsgProfileUpdateResponse_Result;
    } & {
        result?: CMsgProfileUpdateResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgProfileUpdateResponse;
    fromPartial<I_1 extends {
        result?: CMsgProfileUpdateResponse_Result;
    } & {
        result?: CMsgProfileUpdateResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgProfileUpdateResponse;
};
export declare const CMsgTalentWinRates: {
    fromJSON(object: any): CMsgTalentWinRates;
    toJSON(message: CMsgTalentWinRates): unknown;
    create<I extends {
        last_run?: number;
        ability_id?: number;
        game_count?: number;
        win_count?: number;
    } & {
        last_run?: number;
        ability_id?: number;
        game_count?: number;
        win_count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgTalentWinRates>]: never; }>(base?: I): CMsgTalentWinRates;
    fromPartial<I_1 extends {
        last_run?: number;
        ability_id?: number;
        game_count?: number;
        win_count?: number;
    } & {
        last_run?: number;
        ability_id?: number;
        game_count?: number;
        win_count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgTalentWinRates>]: never; }>(object: I_1): CMsgTalentWinRates;
};
export declare const CMsgGlobalHeroAverages: {
    fromJSON(object: any): CMsgGlobalHeroAverages;
    toJSON(message: CMsgGlobalHeroAverages): unknown;
    create<I extends {
        last_run?: number;
        avg_gold_per_min?: number;
        avg_xp_per_min?: number;
        avg_kills?: number;
        avg_deaths?: number;
        avg_assists?: number;
        avg_last_hits?: number;
        avg_denies?: number;
        avg_net_worth?: number;
    } & {
        last_run?: number;
        avg_gold_per_min?: number;
        avg_xp_per_min?: number;
        avg_kills?: number;
        avg_deaths?: number;
        avg_assists?: number;
        avg_last_hits?: number;
        avg_denies?: number;
        avg_net_worth?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGlobalHeroAverages>]: never; }>(base?: I): CMsgGlobalHeroAverages;
    fromPartial<I_1 extends {
        last_run?: number;
        avg_gold_per_min?: number;
        avg_xp_per_min?: number;
        avg_kills?: number;
        avg_deaths?: number;
        avg_assists?: number;
        avg_last_hits?: number;
        avg_denies?: number;
        avg_net_worth?: number;
    } & {
        last_run?: number;
        avg_gold_per_min?: number;
        avg_xp_per_min?: number;
        avg_kills?: number;
        avg_deaths?: number;
        avg_assists?: number;
        avg_last_hits?: number;
        avg_denies?: number;
        avg_net_worth?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGlobalHeroAverages>]: never; }>(object: I_1): CMsgGlobalHeroAverages;
};
export declare const CMsgHeroGlobalDataRequest: {
    fromJSON(object: any): CMsgHeroGlobalDataRequest;
    toJSON(message: CMsgHeroGlobalDataRequest): unknown;
    create<I extends {
        hero_id?: number;
    } & {
        hero_id?: number;
    } & { [K in Exclude<keyof I, "hero_id">]: never; }>(base?: I): CMsgHeroGlobalDataRequest;
    fromPartial<I_1 extends {
        hero_id?: number;
    } & {
        hero_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "hero_id">]: never; }>(object: I_1): CMsgHeroGlobalDataRequest;
};
export declare const CMsgHeroGlobalDataResponse: {
    fromJSON(object: any): CMsgHeroGlobalDataResponse;
    toJSON(message: CMsgHeroGlobalDataResponse): unknown;
    create<I extends {
        hero_id?: number;
        hero_data_per_chunk?: {
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[];
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
        }[];
    } & {
        hero_id?: number;
        hero_data_per_chunk?: {
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[];
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
        }[] & ({
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[];
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
        } & {
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[] & ({
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            } & {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            } & { [K in Exclude<keyof I["hero_data_per_chunk"][number]["talent_win_rates"][number], keyof CMsgTalentWinRates>]: never; })[] & { [K_1 in Exclude<keyof I["hero_data_per_chunk"][number]["talent_win_rates"], keyof {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[]>]: never; };
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            } & {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            } & { [K_2 in Exclude<keyof I["hero_data_per_chunk"][number]["hero_averages"], keyof CMsgGlobalHeroAverages>]: never; };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[] & ({
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            } & {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            } & { [K_3 in Exclude<keyof I["hero_data_per_chunk"][number]["graph_data"][number], keyof CMsgHeroGlobalDataResponse_GraphData>]: never; })[] & { [K_4 in Exclude<keyof I["hero_data_per_chunk"][number]["graph_data"], keyof {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[]>]: never; };
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[] & ({
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            } & {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            } & { [K_5 in Exclude<keyof I["hero_data_per_chunk"][number]["week_data"][number], keyof CMsgHeroGlobalDataResponse_WeekData>]: never; })[] & { [K_6 in Exclude<keyof I["hero_data_per_chunk"][number]["week_data"], keyof {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[]>]: never; };
        } & { [K_7 in Exclude<keyof I["hero_data_per_chunk"][number], keyof CMsgHeroGlobalDataResponse_HeroDataPerRankChunk>]: never; })[] & { [K_8 in Exclude<keyof I["hero_data_per_chunk"], keyof {
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[];
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I, keyof CMsgHeroGlobalDataResponse>]: never; }>(base?: I): CMsgHeroGlobalDataResponse;
    fromPartial<I_1 extends {
        hero_id?: number;
        hero_data_per_chunk?: {
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[];
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
        }[];
    } & {
        hero_id?: number;
        hero_data_per_chunk?: {
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[];
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
        }[] & ({
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[];
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
        } & {
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[] & ({
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            } & {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            } & { [K_10 in Exclude<keyof I_1["hero_data_per_chunk"][number]["talent_win_rates"][number], keyof CMsgTalentWinRates>]: never; })[] & { [K_11 in Exclude<keyof I_1["hero_data_per_chunk"][number]["talent_win_rates"], keyof {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[]>]: never; };
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            } & {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            } & { [K_12 in Exclude<keyof I_1["hero_data_per_chunk"][number]["hero_averages"], keyof CMsgGlobalHeroAverages>]: never; };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[] & ({
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            } & {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            } & { [K_13 in Exclude<keyof I_1["hero_data_per_chunk"][number]["graph_data"][number], keyof CMsgHeroGlobalDataResponse_GraphData>]: never; })[] & { [K_14 in Exclude<keyof I_1["hero_data_per_chunk"][number]["graph_data"], keyof {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[]>]: never; };
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[] & ({
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            } & {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            } & { [K_15 in Exclude<keyof I_1["hero_data_per_chunk"][number]["week_data"][number], keyof CMsgHeroGlobalDataResponse_WeekData>]: never; })[] & { [K_16 in Exclude<keyof I_1["hero_data_per_chunk"][number]["week_data"], keyof {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[]>]: never; };
        } & { [K_17 in Exclude<keyof I_1["hero_data_per_chunk"][number], keyof CMsgHeroGlobalDataResponse_HeroDataPerRankChunk>]: never; })[] & { [K_18 in Exclude<keyof I_1["hero_data_per_chunk"], keyof {
            rank_chunk?: number;
            talent_win_rates?: {
                last_run?: number;
                ability_id?: number;
                game_count?: number;
                win_count?: number;
            }[];
            hero_averages?: {
                last_run?: number;
                avg_gold_per_min?: number;
                avg_xp_per_min?: number;
                avg_kills?: number;
                avg_deaths?: number;
                avg_assists?: number;
                avg_last_hits?: number;
                avg_denies?: number;
                avg_net_worth?: number;
            };
            graph_data?: {
                day?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
            week_data?: {
                week?: number;
                win_percent?: number;
                pick_percent?: number;
                ban_percent?: number;
            }[];
        }[]>]: never; };
    } & { [K_19 in Exclude<keyof I_1, keyof CMsgHeroGlobalDataResponse>]: never; }>(object: I_1): CMsgHeroGlobalDataResponse;
};
export declare const CMsgHeroGlobalDataResponse_GraphData: {
    fromJSON(object: any): CMsgHeroGlobalDataResponse_GraphData;
    toJSON(message: CMsgHeroGlobalDataResponse_GraphData): unknown;
    create<I extends {
        day?: number;
        win_percent?: number;
        pick_percent?: number;
        ban_percent?: number;
    } & {
        day?: number;
        win_percent?: number;
        pick_percent?: number;
        ban_percent?: number;
    } & { [K in Exclude<keyof I, keyof CMsgHeroGlobalDataResponse_GraphData>]: never; }>(base?: I): CMsgHeroGlobalDataResponse_GraphData;
    fromPartial<I_1 extends {
        day?: number;
        win_percent?: number;
        pick_percent?: number;
        ban_percent?: number;
    } & {
        day?: number;
        win_percent?: number;
        pick_percent?: number;
        ban_percent?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgHeroGlobalDataResponse_GraphData>]: never; }>(object: I_1): CMsgHeroGlobalDataResponse_GraphData;
};
export declare const CMsgHeroGlobalDataResponse_WeekData: {
    fromJSON(object: any): CMsgHeroGlobalDataResponse_WeekData;
    toJSON(message: CMsgHeroGlobalDataResponse_WeekData): unknown;
    create<I extends {
        week?: number;
        win_percent?: number;
        pick_percent?: number;
        ban_percent?: number;
    } & {
        week?: number;
        win_percent?: number;
        pick_percent?: number;
        ban_percent?: number;
    } & { [K in Exclude<keyof I, keyof CMsgHeroGlobalDataResponse_WeekData>]: never; }>(base?: I): CMsgHeroGlobalDataResponse_WeekData;
    fromPartial<I_1 extends {
        week?: number;
        win_percent?: number;
        pick_percent?: number;
        ban_percent?: number;
    } & {
        week?: number;
        win_percent?: number;
        pick_percent?: number;
        ban_percent?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgHeroGlobalDataResponse_WeekData>]: never; }>(object: I_1): CMsgHeroGlobalDataResponse_WeekData;
};
export declare const CMsgHeroGlobalDataResponse_HeroDataPerRankChunk: {
    fromJSON(object: any): CMsgHeroGlobalDataResponse_HeroDataPerRankChunk;
    toJSON(message: CMsgHeroGlobalDataResponse_HeroDataPerRankChunk): unknown;
    create<I extends {
        rank_chunk?: number;
        talent_win_rates?: {
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        }[];
        hero_averages?: {
            last_run?: number;
            avg_gold_per_min?: number;
            avg_xp_per_min?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_last_hits?: number;
            avg_denies?: number;
            avg_net_worth?: number;
        };
        graph_data?: {
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[];
        week_data?: {
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[];
    } & {
        rank_chunk?: number;
        talent_win_rates?: {
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        }[] & ({
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        } & {
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        } & { [K in Exclude<keyof I["talent_win_rates"][number], keyof CMsgTalentWinRates>]: never; })[] & { [K_1 in Exclude<keyof I["talent_win_rates"], keyof {
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        }[]>]: never; };
        hero_averages?: {
            last_run?: number;
            avg_gold_per_min?: number;
            avg_xp_per_min?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_last_hits?: number;
            avg_denies?: number;
            avg_net_worth?: number;
        } & {
            last_run?: number;
            avg_gold_per_min?: number;
            avg_xp_per_min?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_last_hits?: number;
            avg_denies?: number;
            avg_net_worth?: number;
        } & { [K_2 in Exclude<keyof I["hero_averages"], keyof CMsgGlobalHeroAverages>]: never; };
        graph_data?: {
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[] & ({
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        } & {
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        } & { [K_3 in Exclude<keyof I["graph_data"][number], keyof CMsgHeroGlobalDataResponse_GraphData>]: never; })[] & { [K_4 in Exclude<keyof I["graph_data"], keyof {
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[]>]: never; };
        week_data?: {
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[] & ({
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        } & {
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        } & { [K_5 in Exclude<keyof I["week_data"][number], keyof CMsgHeroGlobalDataResponse_WeekData>]: never; })[] & { [K_6 in Exclude<keyof I["week_data"], keyof {
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I, keyof CMsgHeroGlobalDataResponse_HeroDataPerRankChunk>]: never; }>(base?: I): CMsgHeroGlobalDataResponse_HeroDataPerRankChunk;
    fromPartial<I_1 extends {
        rank_chunk?: number;
        talent_win_rates?: {
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        }[];
        hero_averages?: {
            last_run?: number;
            avg_gold_per_min?: number;
            avg_xp_per_min?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_last_hits?: number;
            avg_denies?: number;
            avg_net_worth?: number;
        };
        graph_data?: {
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[];
        week_data?: {
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[];
    } & {
        rank_chunk?: number;
        talent_win_rates?: {
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        }[] & ({
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        } & {
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        } & { [K_8 in Exclude<keyof I_1["talent_win_rates"][number], keyof CMsgTalentWinRates>]: never; })[] & { [K_9 in Exclude<keyof I_1["talent_win_rates"], keyof {
            last_run?: number;
            ability_id?: number;
            game_count?: number;
            win_count?: number;
        }[]>]: never; };
        hero_averages?: {
            last_run?: number;
            avg_gold_per_min?: number;
            avg_xp_per_min?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_last_hits?: number;
            avg_denies?: number;
            avg_net_worth?: number;
        } & {
            last_run?: number;
            avg_gold_per_min?: number;
            avg_xp_per_min?: number;
            avg_kills?: number;
            avg_deaths?: number;
            avg_assists?: number;
            avg_last_hits?: number;
            avg_denies?: number;
            avg_net_worth?: number;
        } & { [K_10 in Exclude<keyof I_1["hero_averages"], keyof CMsgGlobalHeroAverages>]: never; };
        graph_data?: {
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[] & ({
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        } & {
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        } & { [K_11 in Exclude<keyof I_1["graph_data"][number], keyof CMsgHeroGlobalDataResponse_GraphData>]: never; })[] & { [K_12 in Exclude<keyof I_1["graph_data"], keyof {
            day?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[]>]: never; };
        week_data?: {
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[] & ({
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        } & {
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        } & { [K_13 in Exclude<keyof I_1["week_data"][number], keyof CMsgHeroGlobalDataResponse_WeekData>]: never; })[] & { [K_14 in Exclude<keyof I_1["week_data"], keyof {
            week?: number;
            win_percent?: number;
            pick_percent?: number;
            ban_percent?: number;
        }[]>]: never; };
    } & { [K_15 in Exclude<keyof I_1, keyof CMsgHeroGlobalDataResponse_HeroDataPerRankChunk>]: never; }>(object: I_1): CMsgHeroGlobalDataResponse_HeroDataPerRankChunk;
};
export declare const CMsgHeroGlobalDataAllHeroes: {
    fromJSON(object: any): CMsgHeroGlobalDataAllHeroes;
    toJSON(message: CMsgHeroGlobalDataAllHeroes): unknown;
    create<I extends {
        heroes?: {
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[];
        }[];
    } & {
        heroes?: {
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[];
        }[] & ({
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[];
        } & {
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[] & ({
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            } & {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[] & ({
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                } & {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                } & { [K in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"][number]["talent_win_rates"][number], keyof CMsgTalentWinRates>]: never; })[] & { [K_1 in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"][number]["talent_win_rates"], keyof {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[]>]: never; };
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                } & {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                } & { [K_2 in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"][number]["hero_averages"], keyof CMsgGlobalHeroAverages>]: never; };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[] & ({
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                } & {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                } & { [K_3 in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"][number]["graph_data"][number], keyof CMsgHeroGlobalDataResponse_GraphData>]: never; })[] & { [K_4 in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"][number]["graph_data"], keyof {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[]>]: never; };
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[] & ({
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                } & {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                } & { [K_5 in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"][number]["week_data"][number], keyof CMsgHeroGlobalDataResponse_WeekData>]: never; })[] & { [K_6 in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"][number]["week_data"], keyof {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[]>]: never; };
            } & { [K_7 in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"][number], keyof CMsgHeroGlobalDataResponse_HeroDataPerRankChunk>]: never; })[] & { [K_8 in Exclude<keyof I["heroes"][number]["hero_data_per_chunk"], keyof {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[]>]: never; };
        } & { [K_9 in Exclude<keyof I["heroes"][number], keyof CMsgHeroGlobalDataResponse>]: never; })[] & { [K_10 in Exclude<keyof I["heroes"], keyof {
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[];
        }[]>]: never; };
    } & { [K_11 in Exclude<keyof I, "heroes">]: never; }>(base?: I): CMsgHeroGlobalDataAllHeroes;
    fromPartial<I_1 extends {
        heroes?: {
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[];
        }[];
    } & {
        heroes?: {
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[];
        }[] & ({
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[];
        } & {
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[] & ({
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            } & {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[] & ({
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                } & {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                } & { [K_12 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"][number]["talent_win_rates"][number], keyof CMsgTalentWinRates>]: never; })[] & { [K_13 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"][number]["talent_win_rates"], keyof {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[]>]: never; };
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                } & {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                } & { [K_14 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"][number]["hero_averages"], keyof CMsgGlobalHeroAverages>]: never; };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[] & ({
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                } & {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                } & { [K_15 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"][number]["graph_data"][number], keyof CMsgHeroGlobalDataResponse_GraphData>]: never; })[] & { [K_16 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"][number]["graph_data"], keyof {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[]>]: never; };
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[] & ({
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                } & {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                } & { [K_17 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"][number]["week_data"][number], keyof CMsgHeroGlobalDataResponse_WeekData>]: never; })[] & { [K_18 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"][number]["week_data"], keyof {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[]>]: never; };
            } & { [K_19 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"][number], keyof CMsgHeroGlobalDataResponse_HeroDataPerRankChunk>]: never; })[] & { [K_20 in Exclude<keyof I_1["heroes"][number]["hero_data_per_chunk"], keyof {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[]>]: never; };
        } & { [K_21 in Exclude<keyof I_1["heroes"][number], keyof CMsgHeroGlobalDataResponse>]: never; })[] & { [K_22 in Exclude<keyof I_1["heroes"], keyof {
            hero_id?: number;
            hero_data_per_chunk?: {
                rank_chunk?: number;
                talent_win_rates?: {
                    last_run?: number;
                    ability_id?: number;
                    game_count?: number;
                    win_count?: number;
                }[];
                hero_averages?: {
                    last_run?: number;
                    avg_gold_per_min?: number;
                    avg_xp_per_min?: number;
                    avg_kills?: number;
                    avg_deaths?: number;
                    avg_assists?: number;
                    avg_last_hits?: number;
                    avg_denies?: number;
                    avg_net_worth?: number;
                };
                graph_data?: {
                    day?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
                week_data?: {
                    week?: number;
                    win_percent?: number;
                    pick_percent?: number;
                    ban_percent?: number;
                }[];
            }[];
        }[]>]: never; };
    } & { [K_23 in Exclude<keyof I_1, "heroes">]: never; }>(object: I_1): CMsgHeroGlobalDataAllHeroes;
};
export declare const CMsgHeroGlobalDataHeroesAlliesAndEnemies: {
    fromJSON(object: any): CMsgHeroGlobalDataHeroesAlliesAndEnemies;
    toJSON(message: CMsgHeroGlobalDataHeroesAlliesAndEnemies): unknown;
    create<I extends {
        ranked_hero_data?: {
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[];
        }[];
    } & {
        ranked_hero_data?: {
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[];
        }[] & ({
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[];
        } & {
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[] & ({
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            } & {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[] & number[] & { [K in Exclude<keyof I["ranked_hero_data"][number]["hero_data"][number]["ally_win_rate"], keyof number[]>]: never; };
                enemy_win_rate?: number[] & number[] & { [K_1 in Exclude<keyof I["ranked_hero_data"][number]["hero_data"][number]["enemy_win_rate"], keyof number[]>]: never; };
            } & { [K_2 in Exclude<keyof I["ranked_hero_data"][number]["hero_data"][number], keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData>]: never; })[] & { [K_3 in Exclude<keyof I["ranked_hero_data"][number]["hero_data"], keyof {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[]>]: never; };
        } & { [K_4 in Exclude<keyof I["ranked_hero_data"][number], keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData>]: never; })[] & { [K_5 in Exclude<keyof I["ranked_hero_data"], keyof {
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[];
        }[]>]: never; };
    } & { [K_6 in Exclude<keyof I, "ranked_hero_data">]: never; }>(base?: I): CMsgHeroGlobalDataHeroesAlliesAndEnemies;
    fromPartial<I_1 extends {
        ranked_hero_data?: {
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[];
        }[];
    } & {
        ranked_hero_data?: {
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[];
        }[] & ({
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[];
        } & {
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[] & ({
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            } & {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[] & number[] & { [K_7 in Exclude<keyof I_1["ranked_hero_data"][number]["hero_data"][number]["ally_win_rate"], keyof number[]>]: never; };
                enemy_win_rate?: number[] & number[] & { [K_8 in Exclude<keyof I_1["ranked_hero_data"][number]["hero_data"][number]["enemy_win_rate"], keyof number[]>]: never; };
            } & { [K_9 in Exclude<keyof I_1["ranked_hero_data"][number]["hero_data"][number], keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData>]: never; })[] & { [K_10 in Exclude<keyof I_1["ranked_hero_data"][number]["hero_data"], keyof {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[]>]: never; };
        } & { [K_11 in Exclude<keyof I_1["ranked_hero_data"][number], keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData>]: never; })[] & { [K_12 in Exclude<keyof I_1["ranked_hero_data"], keyof {
            rank?: number;
            hero_data?: {
                hero_id?: number;
                win_rate?: number;
                first_other_hero_id?: number;
                ally_win_rate?: number[];
                enemy_win_rate?: number[];
            }[];
        }[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, "ranked_hero_data">]: never; }>(object: I_1): CMsgHeroGlobalDataHeroesAlliesAndEnemies;
};
export declare const CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData: {
    fromJSON(object: any): CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData;
    toJSON(message: CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData): unknown;
    create<I extends {
        hero_id?: number;
        win_rate?: number;
        first_other_hero_id?: number;
        ally_win_rate?: number[];
        enemy_win_rate?: number[];
    } & {
        hero_id?: number;
        win_rate?: number;
        first_other_hero_id?: number;
        ally_win_rate?: number[] & number[] & { [K in Exclude<keyof I["ally_win_rate"], keyof number[]>]: never; };
        enemy_win_rate?: number[] & number[] & { [K_1 in Exclude<keyof I["enemy_win_rate"], keyof number[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData>]: never; }>(base?: I): CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData;
    fromPartial<I_1 extends {
        hero_id?: number;
        win_rate?: number;
        first_other_hero_id?: number;
        ally_win_rate?: number[];
        enemy_win_rate?: number[];
    } & {
        hero_id?: number;
        win_rate?: number;
        first_other_hero_id?: number;
        ally_win_rate?: number[] & number[] & { [K_3 in Exclude<keyof I_1["ally_win_rate"], keyof number[]>]: never; };
        enemy_win_rate?: number[] & number[] & { [K_4 in Exclude<keyof I_1["enemy_win_rate"], keyof number[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData>]: never; }>(object: I_1): CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData;
};
export declare const CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData: {
    fromJSON(object: any): CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData;
    toJSON(message: CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData): unknown;
    create<I extends {
        rank?: number;
        hero_data?: {
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[];
            enemy_win_rate?: number[];
        }[];
    } & {
        rank?: number;
        hero_data?: {
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[];
            enemy_win_rate?: number[];
        }[] & ({
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[];
            enemy_win_rate?: number[];
        } & {
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[] & number[] & { [K in Exclude<keyof I["hero_data"][number]["ally_win_rate"], keyof number[]>]: never; };
            enemy_win_rate?: number[] & number[] & { [K_1 in Exclude<keyof I["hero_data"][number]["enemy_win_rate"], keyof number[]>]: never; };
        } & { [K_2 in Exclude<keyof I["hero_data"][number], keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData>]: never; })[] & { [K_3 in Exclude<keyof I["hero_data"], keyof {
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[];
            enemy_win_rate?: number[];
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData>]: never; }>(base?: I): CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData;
    fromPartial<I_1 extends {
        rank?: number;
        hero_data?: {
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[];
            enemy_win_rate?: number[];
        }[];
    } & {
        rank?: number;
        hero_data?: {
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[];
            enemy_win_rate?: number[];
        }[] & ({
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[];
            enemy_win_rate?: number[];
        } & {
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[] & number[] & { [K_5 in Exclude<keyof I_1["hero_data"][number]["ally_win_rate"], keyof number[]>]: never; };
            enemy_win_rate?: number[] & number[] & { [K_6 in Exclude<keyof I_1["hero_data"][number]["enemy_win_rate"], keyof number[]>]: never; };
        } & { [K_7 in Exclude<keyof I_1["hero_data"][number], keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_HeroData>]: never; })[] & { [K_8 in Exclude<keyof I_1["hero_data"], keyof {
            hero_id?: number;
            win_rate?: number;
            first_other_hero_id?: number;
            ally_win_rate?: number[];
            enemy_win_rate?: number[];
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData>]: never; }>(object: I_1): CMsgHeroGlobalDataHeroesAlliesAndEnemies_RankedHeroData;
};
export declare const CMsgPrivateMetadataKeyRequest: {
    fromJSON(object: any): CMsgPrivateMetadataKeyRequest;
    toJSON(message: CMsgPrivateMetadataKeyRequest): unknown;
    create<I extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K in Exclude<keyof I, "match_id">]: never; }>(base?: I): CMsgPrivateMetadataKeyRequest;
    fromPartial<I_1 extends {
        match_id?: string;
    } & {
        match_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "match_id">]: never; }>(object: I_1): CMsgPrivateMetadataKeyRequest;
};
export declare const CMsgPrivateMetadataKeyResponse: {
    fromJSON(object: any): CMsgPrivateMetadataKeyResponse;
    toJSON(message: CMsgPrivateMetadataKeyResponse): unknown;
    create<I extends {
        private_key?: number;
    } & {
        private_key?: number;
    } & { [K in Exclude<keyof I, "private_key">]: never; }>(base?: I): CMsgPrivateMetadataKeyResponse;
    fromPartial<I_1 extends {
        private_key?: number;
    } & {
        private_key?: number;
    } & { [K_1 in Exclude<keyof I_1, "private_key">]: never; }>(object: I_1): CMsgPrivateMetadataKeyResponse;
};
export declare const CMsgActivatePlusFreeTrialResponse: {
    fromJSON(object: any): CMsgActivatePlusFreeTrialResponse;
    toJSON(message: CMsgActivatePlusFreeTrialResponse): unknown;
    create<I extends {
        result?: CMsgActivatePlusFreeTrialResponse_Result;
    } & {
        result?: CMsgActivatePlusFreeTrialResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgActivatePlusFreeTrialResponse;
    fromPartial<I_1 extends {
        result?: CMsgActivatePlusFreeTrialResponse_Result;
    } & {
        result?: CMsgActivatePlusFreeTrialResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgActivatePlusFreeTrialResponse;
};
export declare const CMsgGCToClientCavernCrawlMapPathCompleted: {
    fromJSON(object: any): CMsgGCToClientCavernCrawlMapPathCompleted;
    toJSON(message: CMsgGCToClientCavernCrawlMapPathCompleted): unknown;
    create<I extends {
        event_id?: number;
        hero_id_completed?: number;
        completed_paths?: {
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        }[];
        map_variant?: number;
    } & {
        event_id?: number;
        hero_id_completed?: number;
        completed_paths?: {
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        }[] & ({
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        } & {
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        } & { [K in Exclude<keyof I["completed_paths"][number], keyof CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo>]: never; })[] & { [K_1 in Exclude<keyof I["completed_paths"], keyof {
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        }[]>]: never; };
        map_variant?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgGCToClientCavernCrawlMapPathCompleted>]: never; }>(base?: I): CMsgGCToClientCavernCrawlMapPathCompleted;
    fromPartial<I_1 extends {
        event_id?: number;
        hero_id_completed?: number;
        completed_paths?: {
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        }[];
        map_variant?: number;
    } & {
        event_id?: number;
        hero_id_completed?: number;
        completed_paths?: {
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        }[] & ({
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        } & {
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        } & { [K_3 in Exclude<keyof I_1["completed_paths"][number], keyof CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo>]: never; })[] & { [K_4 in Exclude<keyof I_1["completed_paths"], keyof {
            path_id_completed?: number;
            received_ultra_rare_reward?: boolean;
            half_completed?: boolean;
        }[]>]: never; };
        map_variant?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgGCToClientCavernCrawlMapPathCompleted>]: never; }>(object: I_1): CMsgGCToClientCavernCrawlMapPathCompleted;
};
export declare const CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo: {
    fromJSON(object: any): CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo;
    toJSON(message: CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo): unknown;
    create<I extends {
        path_id_completed?: number;
        received_ultra_rare_reward?: boolean;
        half_completed?: boolean;
    } & {
        path_id_completed?: number;
        received_ultra_rare_reward?: boolean;
        half_completed?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo>]: never; }>(base?: I): CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo;
    fromPartial<I_1 extends {
        path_id_completed?: number;
        received_ultra_rare_reward?: boolean;
        half_completed?: boolean;
    } & {
        path_id_completed?: number;
        received_ultra_rare_reward?: boolean;
        half_completed?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo>]: never; }>(object: I_1): CMsgGCToClientCavernCrawlMapPathCompleted_CompletedPathInfo;
};
export declare const CMsgGCToClientCavernCrawlMapUpdated: {
    fromJSON(object: any): CMsgGCToClientCavernCrawlMapUpdated;
    toJSON(message: CMsgGCToClientCavernCrawlMapUpdated): unknown;
    create<I extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K in Exclude<keyof I, "event_id">]: never; }>(base?: I): CMsgGCToClientCavernCrawlMapUpdated;
    fromPartial<I_1 extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "event_id">]: never; }>(object: I_1): CMsgGCToClientCavernCrawlMapUpdated;
};
export declare const CMsgClientToGCCavernCrawlClaimRoom: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlClaimRoom;
    toJSON(message: CMsgClientToGCCavernCrawlClaimRoom): unknown;
    create<I extends {
        event_id?: number;
        room_id?: number;
        map_variant?: number;
    } & {
        event_id?: number;
        room_id?: number;
        map_variant?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlClaimRoom>]: never; }>(base?: I): CMsgClientToGCCavernCrawlClaimRoom;
    fromPartial<I_1 extends {
        event_id?: number;
        room_id?: number;
        map_variant?: number;
    } & {
        event_id?: number;
        room_id?: number;
        map_variant?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlClaimRoom>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlClaimRoom;
};
export declare const CMsgClientToGCCavernCrawlClaimRoomResponse: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlClaimRoomResponse;
    toJSON(message: CMsgClientToGCCavernCrawlClaimRoomResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCCavernCrawlClaimRoomResponse_Result;
    } & {
        result?: CMsgClientToGCCavernCrawlClaimRoomResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCCavernCrawlClaimRoomResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCCavernCrawlClaimRoomResponse_Result;
    } & {
        result?: CMsgClientToGCCavernCrawlClaimRoomResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCCavernCrawlClaimRoomResponse;
};
export declare const CMsgClientToGCCavernCrawlUseItemOnRoom: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlUseItemOnRoom;
    toJSON(message: CMsgClientToGCCavernCrawlUseItemOnRoom): unknown;
    create<I extends {
        event_id?: number;
        room_id?: number;
        item_type?: number;
        map_variant?: number;
    } & {
        event_id?: number;
        room_id?: number;
        item_type?: number;
        map_variant?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlUseItemOnRoom>]: never; }>(base?: I): CMsgClientToGCCavernCrawlUseItemOnRoom;
    fromPartial<I_1 extends {
        event_id?: number;
        room_id?: number;
        item_type?: number;
        map_variant?: number;
    } & {
        event_id?: number;
        room_id?: number;
        item_type?: number;
        map_variant?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlUseItemOnRoom>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlUseItemOnRoom;
};
export declare const CMsgClientToGCCavernCrawlUseItemOnRoomResponse: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlUseItemOnRoomResponse;
    toJSON(message: CMsgClientToGCCavernCrawlUseItemOnRoomResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result;
    } & {
        result?: CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCCavernCrawlUseItemOnRoomResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result;
    } & {
        result?: CMsgClientToGCCavernCrawlUseItemOnRoomResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCCavernCrawlUseItemOnRoomResponse;
};
export declare const CMsgClientToGCCavernCrawlUseItemOnPath: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlUseItemOnPath;
    toJSON(message: CMsgClientToGCCavernCrawlUseItemOnPath): unknown;
    create<I extends {
        event_id?: number;
        path_id?: number;
        item_type?: number;
        map_variant?: number;
    } & {
        event_id?: number;
        path_id?: number;
        item_type?: number;
        map_variant?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlUseItemOnPath>]: never; }>(base?: I): CMsgClientToGCCavernCrawlUseItemOnPath;
    fromPartial<I_1 extends {
        event_id?: number;
        path_id?: number;
        item_type?: number;
        map_variant?: number;
    } & {
        event_id?: number;
        path_id?: number;
        item_type?: number;
        map_variant?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlUseItemOnPath>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlUseItemOnPath;
};
export declare const CMsgClientToGCCavernCrawlUseItemOnPathResponse: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlUseItemOnPathResponse;
    toJSON(message: CMsgClientToGCCavernCrawlUseItemOnPathResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result;
    } & {
        result?: CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCCavernCrawlUseItemOnPathResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result;
    } & {
        result?: CMsgClientToGCCavernCrawlUseItemOnPathResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCCavernCrawlUseItemOnPathResponse;
};
export declare const CMsgClientToGCCavernCrawlRequestMapState: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlRequestMapState;
    toJSON(message: CMsgClientToGCCavernCrawlRequestMapState): unknown;
    create<I extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K in Exclude<keyof I, "event_id">]: never; }>(base?: I): CMsgClientToGCCavernCrawlRequestMapState;
    fromPartial<I_1 extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "event_id">]: never; }>(object: I_1): CMsgClientToGCCavernCrawlRequestMapState;
};
export declare const CMsgClientToGCCavernCrawlRequestMapStateResponse: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlRequestMapStateResponse;
    toJSON(message: CMsgClientToGCCavernCrawlRequestMapStateResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCCavernCrawlRequestMapStateResponse_Result;
        available_map_variants_mask?: number;
        inventory_item?: {
            item_type?: number;
            count?: number;
        }[];
        map_variants?: {
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[];
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[];
        }[];
    } & {
        result?: CMsgClientToGCCavernCrawlRequestMapStateResponse_Result;
        available_map_variants_mask?: number;
        inventory_item?: {
            item_type?: number;
            count?: number;
        }[] & ({
            item_type?: number;
            count?: number;
        } & {
            item_type?: number;
            count?: number;
        } & { [K in Exclude<keyof I["inventory_item"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem>]: never; })[] & { [K_1 in Exclude<keyof I["inventory_item"], keyof {
            item_type?: number;
            count?: number;
        }[]>]: never; };
        map_variants?: {
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[];
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[];
        }[] & ({
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[];
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[];
        } & {
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[] & ({
                path_id_1?: number;
                path_id_2?: number;
            } & {
                path_id_1?: number;
                path_id_2?: number;
            } & { [K_2 in Exclude<keyof I["map_variants"][number]["swapped_challenge"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge>]: never; })[] & { [K_3 in Exclude<keyof I["map_variants"][number]["swapped_challenge"], keyof {
                path_id_1?: number;
                path_id_2?: number;
            }[]>]: never; };
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[] & ({
                map_room_id?: number;
                revealed_room_id?: number;
            } & {
                map_room_id?: number;
                revealed_room_id?: number;
            } & { [K_4 in Exclude<keyof I["map_variants"][number]["treasure_map"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap>]: never; })[] & { [K_5 in Exclude<keyof I["map_variants"][number]["treasure_map"], keyof {
                map_room_id?: number;
                revealed_room_id?: number;
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I["map_variants"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant>]: never; })[] & { [K_7 in Exclude<keyof I["map_variants"], keyof {
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[];
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[];
        }[]>]: never; };
    } & { [K_8 in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse>]: never; }>(base?: I): CMsgClientToGCCavernCrawlRequestMapStateResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCCavernCrawlRequestMapStateResponse_Result;
        available_map_variants_mask?: number;
        inventory_item?: {
            item_type?: number;
            count?: number;
        }[];
        map_variants?: {
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[];
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[];
        }[];
    } & {
        result?: CMsgClientToGCCavernCrawlRequestMapStateResponse_Result;
        available_map_variants_mask?: number;
        inventory_item?: {
            item_type?: number;
            count?: number;
        }[] & ({
            item_type?: number;
            count?: number;
        } & {
            item_type?: number;
            count?: number;
        } & { [K_9 in Exclude<keyof I_1["inventory_item"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem>]: never; })[] & { [K_10 in Exclude<keyof I_1["inventory_item"], keyof {
            item_type?: number;
            count?: number;
        }[]>]: never; };
        map_variants?: {
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[];
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[];
        }[] & ({
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[];
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[];
        } & {
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[] & ({
                path_id_1?: number;
                path_id_2?: number;
            } & {
                path_id_1?: number;
                path_id_2?: number;
            } & { [K_11 in Exclude<keyof I_1["map_variants"][number]["swapped_challenge"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge>]: never; })[] & { [K_12 in Exclude<keyof I_1["map_variants"][number]["swapped_challenge"], keyof {
                path_id_1?: number;
                path_id_2?: number;
            }[]>]: never; };
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[] & ({
                map_room_id?: number;
                revealed_room_id?: number;
            } & {
                map_room_id?: number;
                revealed_room_id?: number;
            } & { [K_13 in Exclude<keyof I_1["map_variants"][number]["treasure_map"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap>]: never; })[] & { [K_14 in Exclude<keyof I_1["map_variants"][number]["treasure_map"], keyof {
                map_room_id?: number;
                revealed_room_id?: number;
            }[]>]: never; };
        } & { [K_15 in Exclude<keyof I_1["map_variants"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant>]: never; })[] & { [K_16 in Exclude<keyof I_1["map_variants"], keyof {
            map_variant?: number;
            claimed_rooms_1?: string;
            claimed_rooms_2?: string;
            revealed_rooms_1?: string;
            revealed_rooms_2?: string;
            completed_paths_1?: string;
            completed_paths_2?: string;
            completed_paths_3?: string;
            completed_paths_4?: string;
            half_completed_paths_1?: string;
            half_completed_paths_2?: string;
            half_completed_paths_3?: string;
            half_completed_paths_4?: string;
            swapped_challenge?: {
                path_id_1?: number;
                path_id_2?: number;
            }[];
            ultra_rare_reward_room_number?: number;
            treasure_map?: {
                map_room_id?: number;
                revealed_room_id?: number;
            }[];
        }[]>]: never; };
    } & { [K_17 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlRequestMapStateResponse;
};
export declare const CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge;
    toJSON(message: CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge): unknown;
    create<I extends {
        path_id_1?: number;
        path_id_2?: number;
    } & {
        path_id_1?: number;
        path_id_2?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge>]: never; }>(base?: I): CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge;
    fromPartial<I_1 extends {
        path_id_1?: number;
        path_id_2?: number;
    } & {
        path_id_1?: number;
        path_id_2?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge;
};
export declare const CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem;
    toJSON(message: CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem): unknown;
    create<I extends {
        item_type?: number;
        count?: number;
    } & {
        item_type?: number;
        count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem>]: never; }>(base?: I): CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem;
    fromPartial<I_1 extends {
        item_type?: number;
        count?: number;
    } & {
        item_type?: number;
        count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlRequestMapStateResponse_InventoryItem;
};
export declare const CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap;
    toJSON(message: CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap): unknown;
    create<I extends {
        map_room_id?: number;
        revealed_room_id?: number;
    } & {
        map_room_id?: number;
        revealed_room_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap>]: never; }>(base?: I): CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap;
    fromPartial<I_1 extends {
        map_room_id?: number;
        revealed_room_id?: number;
    } & {
        map_room_id?: number;
        revealed_room_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap;
};
export declare const CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant;
    toJSON(message: CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant): unknown;
    create<I extends {
        map_variant?: number;
        claimed_rooms_1?: string;
        claimed_rooms_2?: string;
        revealed_rooms_1?: string;
        revealed_rooms_2?: string;
        completed_paths_1?: string;
        completed_paths_2?: string;
        completed_paths_3?: string;
        completed_paths_4?: string;
        half_completed_paths_1?: string;
        half_completed_paths_2?: string;
        half_completed_paths_3?: string;
        half_completed_paths_4?: string;
        swapped_challenge?: {
            path_id_1?: number;
            path_id_2?: number;
        }[];
        ultra_rare_reward_room_number?: number;
        treasure_map?: {
            map_room_id?: number;
            revealed_room_id?: number;
        }[];
    } & {
        map_variant?: number;
        claimed_rooms_1?: string;
        claimed_rooms_2?: string;
        revealed_rooms_1?: string;
        revealed_rooms_2?: string;
        completed_paths_1?: string;
        completed_paths_2?: string;
        completed_paths_3?: string;
        completed_paths_4?: string;
        half_completed_paths_1?: string;
        half_completed_paths_2?: string;
        half_completed_paths_3?: string;
        half_completed_paths_4?: string;
        swapped_challenge?: {
            path_id_1?: number;
            path_id_2?: number;
        }[] & ({
            path_id_1?: number;
            path_id_2?: number;
        } & {
            path_id_1?: number;
            path_id_2?: number;
        } & { [K in Exclude<keyof I["swapped_challenge"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge>]: never; })[] & { [K_1 in Exclude<keyof I["swapped_challenge"], keyof {
            path_id_1?: number;
            path_id_2?: number;
        }[]>]: never; };
        ultra_rare_reward_room_number?: number;
        treasure_map?: {
            map_room_id?: number;
            revealed_room_id?: number;
        }[] & ({
            map_room_id?: number;
            revealed_room_id?: number;
        } & {
            map_room_id?: number;
            revealed_room_id?: number;
        } & { [K_2 in Exclude<keyof I["treasure_map"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap>]: never; })[] & { [K_3 in Exclude<keyof I["treasure_map"], keyof {
            map_room_id?: number;
            revealed_room_id?: number;
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant>]: never; }>(base?: I): CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant;
    fromPartial<I_1 extends {
        map_variant?: number;
        claimed_rooms_1?: string;
        claimed_rooms_2?: string;
        revealed_rooms_1?: string;
        revealed_rooms_2?: string;
        completed_paths_1?: string;
        completed_paths_2?: string;
        completed_paths_3?: string;
        completed_paths_4?: string;
        half_completed_paths_1?: string;
        half_completed_paths_2?: string;
        half_completed_paths_3?: string;
        half_completed_paths_4?: string;
        swapped_challenge?: {
            path_id_1?: number;
            path_id_2?: number;
        }[];
        ultra_rare_reward_room_number?: number;
        treasure_map?: {
            map_room_id?: number;
            revealed_room_id?: number;
        }[];
    } & {
        map_variant?: number;
        claimed_rooms_1?: string;
        claimed_rooms_2?: string;
        revealed_rooms_1?: string;
        revealed_rooms_2?: string;
        completed_paths_1?: string;
        completed_paths_2?: string;
        completed_paths_3?: string;
        completed_paths_4?: string;
        half_completed_paths_1?: string;
        half_completed_paths_2?: string;
        half_completed_paths_3?: string;
        half_completed_paths_4?: string;
        swapped_challenge?: {
            path_id_1?: number;
            path_id_2?: number;
        }[] & ({
            path_id_1?: number;
            path_id_2?: number;
        } & {
            path_id_1?: number;
            path_id_2?: number;
        } & { [K_5 in Exclude<keyof I_1["swapped_challenge"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_SwappedChallenge>]: never; })[] & { [K_6 in Exclude<keyof I_1["swapped_challenge"], keyof {
            path_id_1?: number;
            path_id_2?: number;
        }[]>]: never; };
        ultra_rare_reward_room_number?: number;
        treasure_map?: {
            map_room_id?: number;
            revealed_room_id?: number;
        }[] & ({
            map_room_id?: number;
            revealed_room_id?: number;
        } & {
            map_room_id?: number;
            revealed_room_id?: number;
        } & { [K_7 in Exclude<keyof I_1["treasure_map"][number], keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_TreasureMap>]: never; })[] & { [K_8 in Exclude<keyof I_1["treasure_map"], keyof {
            map_room_id?: number;
            revealed_room_id?: number;
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlRequestMapStateResponse_MapVariant;
};
export declare const CMsgClientToGCCavernCrawlGetClaimedRoomCount: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlGetClaimedRoomCount;
    toJSON(message: CMsgClientToGCCavernCrawlGetClaimedRoomCount): unknown;
    create<I extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K in Exclude<keyof I, "event_id">]: never; }>(base?: I): CMsgClientToGCCavernCrawlGetClaimedRoomCount;
    fromPartial<I_1 extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "event_id">]: never; }>(object: I_1): CMsgClientToGCCavernCrawlGetClaimedRoomCount;
};
export declare const CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse;
    toJSON(message: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result;
        map_variants?: {
            map_variant?: number;
            count?: number;
        }[];
        available_map_variants_mask?: number;
    } & {
        result?: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result;
        map_variants?: {
            map_variant?: number;
            count?: number;
        }[] & ({
            map_variant?: number;
            count?: number;
        } & {
            map_variant?: number;
            count?: number;
        } & { [K in Exclude<keyof I["map_variants"][number], keyof CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant>]: never; })[] & { [K_1 in Exclude<keyof I["map_variants"], keyof {
            map_variant?: number;
            count?: number;
        }[]>]: never; };
        available_map_variants_mask?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse>]: never; }>(base?: I): CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result;
        map_variants?: {
            map_variant?: number;
            count?: number;
        }[];
        available_map_variants_mask?: number;
    } & {
        result?: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_Result;
        map_variants?: {
            map_variant?: number;
            count?: number;
        }[] & ({
            map_variant?: number;
            count?: number;
        } & {
            map_variant?: number;
            count?: number;
        } & { [K_3 in Exclude<keyof I_1["map_variants"][number], keyof CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant>]: never; })[] & { [K_4 in Exclude<keyof I_1["map_variants"], keyof {
            map_variant?: number;
            count?: number;
        }[]>]: never; };
        available_map_variants_mask?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse;
};
export declare const CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant: {
    fromJSON(object: any): CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant;
    toJSON(message: CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant): unknown;
    create<I extends {
        map_variant?: number;
        count?: number;
    } & {
        map_variant?: number;
        count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant>]: never; }>(base?: I): CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant;
    fromPartial<I_1 extends {
        map_variant?: number;
        count?: number;
    } & {
        map_variant?: number;
        count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant>]: never; }>(object: I_1): CMsgClientToGCCavernCrawlGetClaimedRoomCountResponse_MapVariant;
};
export declare const CMsgDOTAMutationList: {
    fromJSON(object: any): CMsgDOTAMutationList;
    toJSON(message: CMsgDOTAMutationList): unknown;
    create<I extends {
        mutations?: {
            id?: number;
            name?: string;
            description?: string;
        }[];
    } & {
        mutations?: {
            id?: number;
            name?: string;
            description?: string;
        }[] & ({
            id?: number;
            name?: string;
            description?: string;
        } & {
            id?: number;
            name?: string;
            description?: string;
        } & { [K in Exclude<keyof I["mutations"][number], keyof CMsgDOTAMutationList_Mutation>]: never; })[] & { [K_1 in Exclude<keyof I["mutations"], keyof {
            id?: number;
            name?: string;
            description?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "mutations">]: never; }>(base?: I): CMsgDOTAMutationList;
    fromPartial<I_1 extends {
        mutations?: {
            id?: number;
            name?: string;
            description?: string;
        }[];
    } & {
        mutations?: {
            id?: number;
            name?: string;
            description?: string;
        }[] & ({
            id?: number;
            name?: string;
            description?: string;
        } & {
            id?: number;
            name?: string;
            description?: string;
        } & { [K_3 in Exclude<keyof I_1["mutations"][number], keyof CMsgDOTAMutationList_Mutation>]: never; })[] & { [K_4 in Exclude<keyof I_1["mutations"], keyof {
            id?: number;
            name?: string;
            description?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "mutations">]: never; }>(object: I_1): CMsgDOTAMutationList;
};
export declare const CMsgDOTAMutationList_Mutation: {
    fromJSON(object: any): CMsgDOTAMutationList_Mutation;
    toJSON(message: CMsgDOTAMutationList_Mutation): unknown;
    create<I extends {
        id?: number;
        name?: string;
        description?: string;
    } & {
        id?: number;
        name?: string;
        description?: string;
    } & { [K in Exclude<keyof I, keyof CMsgDOTAMutationList_Mutation>]: never; }>(base?: I): CMsgDOTAMutationList_Mutation;
    fromPartial<I_1 extends {
        id?: number;
        name?: string;
        description?: string;
    } & {
        id?: number;
        name?: string;
        description?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDOTAMutationList_Mutation>]: never; }>(object: I_1): CMsgDOTAMutationList_Mutation;
};
export declare const CMsgEventTipsSummaryRequest: {
    fromJSON(object: any): CMsgEventTipsSummaryRequest;
    toJSON(message: CMsgEventTipsSummaryRequest): unknown;
    create<I extends {
        event_id?: EEvent;
        account_id?: number;
    } & {
        event_id?: EEvent;
        account_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgEventTipsSummaryRequest>]: never; }>(base?: I): CMsgEventTipsSummaryRequest;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        account_id?: number;
    } & {
        event_id?: EEvent;
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgEventTipsSummaryRequest>]: never; }>(object: I_1): CMsgEventTipsSummaryRequest;
};
export declare const CMsgEventTipsSummaryResponse: {
    fromJSON(object: any): CMsgEventTipsSummaryResponse;
    toJSON(message: CMsgEventTipsSummaryResponse): unknown;
    create<I extends {
        result?: boolean;
        tips_received?: {
            tipper_account_id?: number;
            tip_count?: number;
        }[];
    } & {
        result?: boolean;
        tips_received?: {
            tipper_account_id?: number;
            tip_count?: number;
        }[] & ({
            tipper_account_id?: number;
            tip_count?: number;
        } & {
            tipper_account_id?: number;
            tip_count?: number;
        } & { [K in Exclude<keyof I["tips_received"][number], keyof CMsgEventTipsSummaryResponse_Tipper>]: never; })[] & { [K_1 in Exclude<keyof I["tips_received"], keyof {
            tipper_account_id?: number;
            tip_count?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgEventTipsSummaryResponse>]: never; }>(base?: I): CMsgEventTipsSummaryResponse;
    fromPartial<I_1 extends {
        result?: boolean;
        tips_received?: {
            tipper_account_id?: number;
            tip_count?: number;
        }[];
    } & {
        result?: boolean;
        tips_received?: {
            tipper_account_id?: number;
            tip_count?: number;
        }[] & ({
            tipper_account_id?: number;
            tip_count?: number;
        } & {
            tipper_account_id?: number;
            tip_count?: number;
        } & { [K_3 in Exclude<keyof I_1["tips_received"][number], keyof CMsgEventTipsSummaryResponse_Tipper>]: never; })[] & { [K_4 in Exclude<keyof I_1["tips_received"], keyof {
            tipper_account_id?: number;
            tip_count?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgEventTipsSummaryResponse>]: never; }>(object: I_1): CMsgEventTipsSummaryResponse;
};
export declare const CMsgEventTipsSummaryResponse_Tipper: {
    fromJSON(object: any): CMsgEventTipsSummaryResponse_Tipper;
    toJSON(message: CMsgEventTipsSummaryResponse_Tipper): unknown;
    create<I extends {
        tipper_account_id?: number;
        tip_count?: number;
    } & {
        tipper_account_id?: number;
        tip_count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgEventTipsSummaryResponse_Tipper>]: never; }>(base?: I): CMsgEventTipsSummaryResponse_Tipper;
    fromPartial<I_1 extends {
        tipper_account_id?: number;
        tip_count?: number;
    } & {
        tipper_account_id?: number;
        tip_count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgEventTipsSummaryResponse_Tipper>]: never; }>(object: I_1): CMsgEventTipsSummaryResponse_Tipper;
};
export declare const CMsgSocialFeedRequest: {
    fromJSON(object: any): CMsgSocialFeedRequest;
    toJSON(message: CMsgSocialFeedRequest): unknown;
    create<I extends {
        account_id?: number;
        self_only?: boolean;
    } & {
        account_id?: number;
        self_only?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgSocialFeedRequest>]: never; }>(base?: I): CMsgSocialFeedRequest;
    fromPartial<I_1 extends {
        account_id?: number;
        self_only?: boolean;
    } & {
        account_id?: number;
        self_only?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSocialFeedRequest>]: never; }>(object: I_1): CMsgSocialFeedRequest;
};
export declare const CMsgSocialFeedResponse: {
    fromJSON(object: any): CMsgSocialFeedResponse;
    toJSON(message: CMsgSocialFeedResponse): unknown;
    create<I extends {
        result?: CMsgSocialFeedResponse_Result;
        feed_events?: {
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        }[];
    } & {
        result?: CMsgSocialFeedResponse_Result;
        feed_events?: {
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        }[] & ({
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        } & {
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        } & { [K in Exclude<keyof I["feed_events"][number], keyof CMsgSocialFeedResponse_FeedEvent>]: never; })[] & { [K_1 in Exclude<keyof I["feed_events"], keyof {
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgSocialFeedResponse>]: never; }>(base?: I): CMsgSocialFeedResponse;
    fromPartial<I_1 extends {
        result?: CMsgSocialFeedResponse_Result;
        feed_events?: {
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        }[];
    } & {
        result?: CMsgSocialFeedResponse_Result;
        feed_events?: {
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        }[] & ({
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        } & {
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        } & { [K_3 in Exclude<keyof I_1["feed_events"][number], keyof CMsgSocialFeedResponse_FeedEvent>]: never; })[] & { [K_4 in Exclude<keyof I_1["feed_events"], keyof {
            feed_event_id?: string;
            account_id?: number;
            timestamp?: number;
            comment_count?: number;
            event_type?: number;
            event_sub_type?: number;
            param_big_int_1?: string;
            param_int_1?: number;
            param_int_2?: number;
            param_int_3?: number;
            param_string?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSocialFeedResponse>]: never; }>(object: I_1): CMsgSocialFeedResponse;
};
export declare const CMsgSocialFeedResponse_FeedEvent: {
    fromJSON(object: any): CMsgSocialFeedResponse_FeedEvent;
    toJSON(message: CMsgSocialFeedResponse_FeedEvent): unknown;
    create<I extends {
        feed_event_id?: string;
        account_id?: number;
        timestamp?: number;
        comment_count?: number;
        event_type?: number;
        event_sub_type?: number;
        param_big_int_1?: string;
        param_int_1?: number;
        param_int_2?: number;
        param_int_3?: number;
        param_string?: string;
    } & {
        feed_event_id?: string;
        account_id?: number;
        timestamp?: number;
        comment_count?: number;
        event_type?: number;
        event_sub_type?: number;
        param_big_int_1?: string;
        param_int_1?: number;
        param_int_2?: number;
        param_int_3?: number;
        param_string?: string;
    } & { [K in Exclude<keyof I, keyof CMsgSocialFeedResponse_FeedEvent>]: never; }>(base?: I): CMsgSocialFeedResponse_FeedEvent;
    fromPartial<I_1 extends {
        feed_event_id?: string;
        account_id?: number;
        timestamp?: number;
        comment_count?: number;
        event_type?: number;
        event_sub_type?: number;
        param_big_int_1?: string;
        param_int_1?: number;
        param_int_2?: number;
        param_int_3?: number;
        param_string?: string;
    } & {
        feed_event_id?: string;
        account_id?: number;
        timestamp?: number;
        comment_count?: number;
        event_type?: number;
        event_sub_type?: number;
        param_big_int_1?: string;
        param_int_1?: number;
        param_int_2?: number;
        param_int_3?: number;
        param_string?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSocialFeedResponse_FeedEvent>]: never; }>(object: I_1): CMsgSocialFeedResponse_FeedEvent;
};
export declare const CMsgSocialFeedCommentsRequest: {
    fromJSON(object: any): CMsgSocialFeedCommentsRequest;
    toJSON(message: CMsgSocialFeedCommentsRequest): unknown;
    create<I extends {
        feed_event_id?: string;
    } & {
        feed_event_id?: string;
    } & { [K in Exclude<keyof I, "feed_event_id">]: never; }>(base?: I): CMsgSocialFeedCommentsRequest;
    fromPartial<I_1 extends {
        feed_event_id?: string;
    } & {
        feed_event_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "feed_event_id">]: never; }>(object: I_1): CMsgSocialFeedCommentsRequest;
};
export declare const CMsgSocialFeedCommentsResponse: {
    fromJSON(object: any): CMsgSocialFeedCommentsResponse;
    toJSON(message: CMsgSocialFeedCommentsResponse): unknown;
    create<I extends {
        result?: CMsgSocialFeedCommentsResponse_Result;
        feed_comments?: {
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        }[];
    } & {
        result?: CMsgSocialFeedCommentsResponse_Result;
        feed_comments?: {
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        }[] & ({
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        } & {
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        } & { [K in Exclude<keyof I["feed_comments"][number], keyof CMsgSocialFeedCommentsResponse_FeedComment>]: never; })[] & { [K_1 in Exclude<keyof I["feed_comments"], keyof {
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgSocialFeedCommentsResponse>]: never; }>(base?: I): CMsgSocialFeedCommentsResponse;
    fromPartial<I_1 extends {
        result?: CMsgSocialFeedCommentsResponse_Result;
        feed_comments?: {
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        }[];
    } & {
        result?: CMsgSocialFeedCommentsResponse_Result;
        feed_comments?: {
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        }[] & ({
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        } & {
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        } & { [K_3 in Exclude<keyof I_1["feed_comments"][number], keyof CMsgSocialFeedCommentsResponse_FeedComment>]: never; })[] & { [K_4 in Exclude<keyof I_1["feed_comments"], keyof {
            commenter_account_id?: number;
            timestamp?: number;
            comment_text?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgSocialFeedCommentsResponse>]: never; }>(object: I_1): CMsgSocialFeedCommentsResponse;
};
export declare const CMsgSocialFeedCommentsResponse_FeedComment: {
    fromJSON(object: any): CMsgSocialFeedCommentsResponse_FeedComment;
    toJSON(message: CMsgSocialFeedCommentsResponse_FeedComment): unknown;
    create<I extends {
        commenter_account_id?: number;
        timestamp?: number;
        comment_text?: string;
    } & {
        commenter_account_id?: number;
        timestamp?: number;
        comment_text?: string;
    } & { [K in Exclude<keyof I, keyof CMsgSocialFeedCommentsResponse_FeedComment>]: never; }>(base?: I): CMsgSocialFeedCommentsResponse_FeedComment;
    fromPartial<I_1 extends {
        commenter_account_id?: number;
        timestamp?: number;
        comment_text?: string;
    } & {
        commenter_account_id?: number;
        timestamp?: number;
        comment_text?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgSocialFeedCommentsResponse_FeedComment>]: never; }>(object: I_1): CMsgSocialFeedCommentsResponse_FeedComment;
};
export declare const CMsgClientToGCPlayerCardSpecificPurchaseRequest: {
    fromJSON(object: any): CMsgClientToGCPlayerCardSpecificPurchaseRequest;
    toJSON(message: CMsgClientToGCPlayerCardSpecificPurchaseRequest): unknown;
    create<I extends {
        player_account_id?: number;
        event_id?: number;
        card_dust_item_id?: string;
    } & {
        player_account_id?: number;
        event_id?: number;
        card_dust_item_id?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCPlayerCardSpecificPurchaseRequest>]: never; }>(base?: I): CMsgClientToGCPlayerCardSpecificPurchaseRequest;
    fromPartial<I_1 extends {
        player_account_id?: number;
        event_id?: number;
        card_dust_item_id?: string;
    } & {
        player_account_id?: number;
        event_id?: number;
        card_dust_item_id?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCPlayerCardSpecificPurchaseRequest>]: never; }>(object: I_1): CMsgClientToGCPlayerCardSpecificPurchaseRequest;
};
export declare const CMsgClientToGCPlayerCardSpecificPurchaseResponse: {
    fromJSON(object: any): CMsgClientToGCPlayerCardSpecificPurchaseResponse;
    toJSON(message: CMsgClientToGCPlayerCardSpecificPurchaseResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result;
        item_id?: string;
    } & {
        result?: CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result;
        item_id?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCPlayerCardSpecificPurchaseResponse>]: never; }>(base?: I): CMsgClientToGCPlayerCardSpecificPurchaseResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result;
        item_id?: string;
    } & {
        result?: CMsgClientToGCPlayerCardSpecificPurchaseResponse_Result;
        item_id?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCPlayerCardSpecificPurchaseResponse>]: never; }>(object: I_1): CMsgClientToGCPlayerCardSpecificPurchaseResponse;
};
export declare const CMsgClientToGCRequestContestVotes: {
    fromJSON(object: any): CMsgClientToGCRequestContestVotes;
    toJSON(message: CMsgClientToGCRequestContestVotes): unknown;
    create<I extends {
        contest_id?: number;
    } & {
        contest_id?: number;
    } & { [K in Exclude<keyof I, "contest_id">]: never; }>(base?: I): CMsgClientToGCRequestContestVotes;
    fromPartial<I_1 extends {
        contest_id?: number;
    } & {
        contest_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "contest_id">]: never; }>(object: I_1): CMsgClientToGCRequestContestVotes;
};
export declare const CMsgClientToGCRequestContestVotesResponse: {
    fromJSON(object: any): CMsgClientToGCRequestContestVotesResponse;
    toJSON(message: CMsgClientToGCRequestContestVotesResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCRequestContestVotesResponse_EResponse;
        votes?: {
            contest_item_id?: string;
            vote?: number;
        }[];
    } & {
        result?: CMsgClientToGCRequestContestVotesResponse_EResponse;
        votes?: {
            contest_item_id?: string;
            vote?: number;
        }[] & ({
            contest_item_id?: string;
            vote?: number;
        } & {
            contest_item_id?: string;
            vote?: number;
        } & { [K in Exclude<keyof I["votes"][number], keyof CMsgClientToGCRequestContestVotesResponse_ItemVote>]: never; })[] & { [K_1 in Exclude<keyof I["votes"], keyof {
            contest_item_id?: string;
            vote?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCRequestContestVotesResponse>]: never; }>(base?: I): CMsgClientToGCRequestContestVotesResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCRequestContestVotesResponse_EResponse;
        votes?: {
            contest_item_id?: string;
            vote?: number;
        }[];
    } & {
        result?: CMsgClientToGCRequestContestVotesResponse_EResponse;
        votes?: {
            contest_item_id?: string;
            vote?: number;
        }[] & ({
            contest_item_id?: string;
            vote?: number;
        } & {
            contest_item_id?: string;
            vote?: number;
        } & { [K_3 in Exclude<keyof I_1["votes"][number], keyof CMsgClientToGCRequestContestVotesResponse_ItemVote>]: never; })[] & { [K_4 in Exclude<keyof I_1["votes"], keyof {
            contest_item_id?: string;
            vote?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCRequestContestVotesResponse>]: never; }>(object: I_1): CMsgClientToGCRequestContestVotesResponse;
};
export declare const CMsgClientToGCRequestContestVotesResponse_ItemVote: {
    fromJSON(object: any): CMsgClientToGCRequestContestVotesResponse_ItemVote;
    toJSON(message: CMsgClientToGCRequestContestVotesResponse_ItemVote): unknown;
    create<I extends {
        contest_item_id?: string;
        vote?: number;
    } & {
        contest_item_id?: string;
        vote?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCRequestContestVotesResponse_ItemVote>]: never; }>(base?: I): CMsgClientToGCRequestContestVotesResponse_ItemVote;
    fromPartial<I_1 extends {
        contest_item_id?: string;
        vote?: number;
    } & {
        contest_item_id?: string;
        vote?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCRequestContestVotesResponse_ItemVote>]: never; }>(object: I_1): CMsgClientToGCRequestContestVotesResponse_ItemVote;
};
export declare const CMsgClientToGCRecordContestVote: {
    fromJSON(object: any): CMsgClientToGCRecordContestVote;
    toJSON(message: CMsgClientToGCRecordContestVote): unknown;
    create<I extends {
        contest_id?: number;
        contest_item_id?: string;
        vote?: number;
    } & {
        contest_id?: number;
        contest_item_id?: string;
        vote?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCRecordContestVote>]: never; }>(base?: I): CMsgClientToGCRecordContestVote;
    fromPartial<I_1 extends {
        contest_id?: number;
        contest_item_id?: string;
        vote?: number;
    } & {
        contest_id?: number;
        contest_item_id?: string;
        vote?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCRecordContestVote>]: never; }>(object: I_1): CMsgClientToGCRecordContestVote;
};
export declare const CMsgGCToClientRecordContestVoteResponse: {
    fromJSON(object: any): CMsgGCToClientRecordContestVoteResponse;
    toJSON(message: CMsgGCToClientRecordContestVoteResponse): unknown;
    create<I extends {
        eresult?: CMsgGCToClientRecordContestVoteResponse_EResult;
    } & {
        eresult?: CMsgGCToClientRecordContestVoteResponse_EResult;
    } & { [K in Exclude<keyof I, "eresult">]: never; }>(base?: I): CMsgGCToClientRecordContestVoteResponse;
    fromPartial<I_1 extends {
        eresult?: CMsgGCToClientRecordContestVoteResponse_EResult;
    } & {
        eresult?: CMsgGCToClientRecordContestVoteResponse_EResult;
    } & { [K_1 in Exclude<keyof I_1, "eresult">]: never; }>(object: I_1): CMsgGCToClientRecordContestVoteResponse;
};
export declare const CMsgDevGrantEventPoints: {
    fromJSON(object: any): CMsgDevGrantEventPoints;
    toJSON(message: CMsgDevGrantEventPoints): unknown;
    create<I extends {
        event_id?: EEvent;
        event_points?: number;
        premium_points?: number;
    } & {
        event_id?: EEvent;
        event_points?: number;
        premium_points?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDevGrantEventPoints>]: never; }>(base?: I): CMsgDevGrantEventPoints;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        event_points?: number;
        premium_points?: number;
    } & {
        event_id?: EEvent;
        event_points?: number;
        premium_points?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDevGrantEventPoints>]: never; }>(object: I_1): CMsgDevGrantEventPoints;
};
export declare const CMsgDevGrantEventPointsResponse: {
    fromJSON(object: any): CMsgDevGrantEventPointsResponse;
    toJSON(message: CMsgDevGrantEventPointsResponse): unknown;
    create<I extends {
        result?: EDevEventRequestResult;
    } & {
        result?: EDevEventRequestResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDevGrantEventPointsResponse;
    fromPartial<I_1 extends {
        result?: EDevEventRequestResult;
    } & {
        result?: EDevEventRequestResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDevGrantEventPointsResponse;
};
export declare const CMsgDevGrantEventAction: {
    fromJSON(object: any): CMsgDevGrantEventAction;
    toJSON(message: CMsgDevGrantEventAction): unknown;
    create<I extends {
        event_id?: EEvent;
        action_id?: number;
        action_score?: number;
    } & {
        event_id?: EEvent;
        action_id?: number;
        action_score?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDevGrantEventAction>]: never; }>(base?: I): CMsgDevGrantEventAction;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        action_id?: number;
        action_score?: number;
    } & {
        event_id?: EEvent;
        action_id?: number;
        action_score?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDevGrantEventAction>]: never; }>(object: I_1): CMsgDevGrantEventAction;
};
export declare const CMsgDevGrantEventActionResponse: {
    fromJSON(object: any): CMsgDevGrantEventActionResponse;
    toJSON(message: CMsgDevGrantEventActionResponse): unknown;
    create<I extends {
        result?: EDevEventRequestResult;
    } & {
        result?: EDevEventRequestResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDevGrantEventActionResponse;
    fromPartial<I_1 extends {
        result?: EDevEventRequestResult;
    } & {
        result?: EDevEventRequestResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDevGrantEventActionResponse;
};
export declare const CMsgDevDeleteEventActions: {
    fromJSON(object: any): CMsgDevDeleteEventActions;
    toJSON(message: CMsgDevDeleteEventActions): unknown;
    create<I extends {
        event_id?: EEvent;
        start_action_id?: number;
        end_action_id?: number;
        remove_audit?: boolean;
    } & {
        event_id?: EEvent;
        start_action_id?: number;
        end_action_id?: number;
        remove_audit?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgDevDeleteEventActions>]: never; }>(base?: I): CMsgDevDeleteEventActions;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        start_action_id?: number;
        end_action_id?: number;
        remove_audit?: boolean;
    } & {
        event_id?: EEvent;
        start_action_id?: number;
        end_action_id?: number;
        remove_audit?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDevDeleteEventActions>]: never; }>(object: I_1): CMsgDevDeleteEventActions;
};
export declare const CMsgDevDeleteEventActionsResponse: {
    fromJSON(object: any): CMsgDevDeleteEventActionsResponse;
    toJSON(message: CMsgDevDeleteEventActionsResponse): unknown;
    create<I extends {
        result?: EDevEventRequestResult;
    } & {
        result?: EDevEventRequestResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDevDeleteEventActionsResponse;
    fromPartial<I_1 extends {
        result?: EDevEventRequestResult;
    } & {
        result?: EDevEventRequestResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDevDeleteEventActionsResponse;
};
export declare const CMsgDevResetEventState: {
    fromJSON(object: any): CMsgDevResetEventState;
    toJSON(message: CMsgDevResetEventState): unknown;
    create<I extends {
        event_id?: EEvent;
        remove_audit?: boolean;
    } & {
        event_id?: EEvent;
        remove_audit?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgDevResetEventState>]: never; }>(base?: I): CMsgDevResetEventState;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        remove_audit?: boolean;
    } & {
        event_id?: EEvent;
        remove_audit?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDevResetEventState>]: never; }>(object: I_1): CMsgDevResetEventState;
};
export declare const CMsgDevResetEventStateResponse: {
    fromJSON(object: any): CMsgDevResetEventStateResponse;
    toJSON(message: CMsgDevResetEventStateResponse): unknown;
    create<I extends {
        result?: EDevEventRequestResult;
    } & {
        result?: EDevEventRequestResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgDevResetEventStateResponse;
    fromPartial<I_1 extends {
        result?: EDevEventRequestResult;
    } & {
        result?: EDevEventRequestResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgDevResetEventStateResponse;
};
export declare const CMsgConsumeEventSupportGrantItem: {
    fromJSON(object: any): CMsgConsumeEventSupportGrantItem;
    toJSON(message: CMsgConsumeEventSupportGrantItem): unknown;
    create<I extends {
        item_id?: string;
    } & {
        item_id?: string;
    } & { [K in Exclude<keyof I, "item_id">]: never; }>(base?: I): CMsgConsumeEventSupportGrantItem;
    fromPartial<I_1 extends {
        item_id?: string;
    } & {
        item_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "item_id">]: never; }>(object: I_1): CMsgConsumeEventSupportGrantItem;
};
export declare const CMsgConsumeEventSupportGrantItemResponse: {
    fromJSON(object: any): CMsgConsumeEventSupportGrantItemResponse;
    toJSON(message: CMsgConsumeEventSupportGrantItemResponse): unknown;
    create<I extends {
        result?: ESupportEventRequestResult;
    } & {
        result?: ESupportEventRequestResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgConsumeEventSupportGrantItemResponse;
    fromPartial<I_1 extends {
        result?: ESupportEventRequestResult;
    } & {
        result?: ESupportEventRequestResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgConsumeEventSupportGrantItemResponse;
};
export declare const CMsgClientToGCGetFilteredPlayers: {
    fromJSON(_: any): CMsgClientToGCGetFilteredPlayers;
    toJSON(_: CMsgClientToGCGetFilteredPlayers): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCGetFilteredPlayers;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCGetFilteredPlayers;
};
export declare const CMsgGCToClientGetFilteredPlayersResponse: {
    fromJSON(object: any): CMsgGCToClientGetFilteredPlayersResponse;
    toJSON(message: CMsgGCToClientGetFilteredPlayersResponse): unknown;
    create<I extends {
        result?: CMsgGCToClientGetFilteredPlayersResponse_Result;
        filtered_players?: {
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        }[];
        base_slots?: number;
        additional_slots?: number;
        next_slot_cost?: number;
    } & {
        result?: CMsgGCToClientGetFilteredPlayersResponse_Result;
        filtered_players?: {
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        }[] & ({
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        } & {
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        } & { [K in Exclude<keyof I["filtered_players"][number], keyof CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry>]: never; })[] & { [K_1 in Exclude<keyof I["filtered_players"], keyof {
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        }[]>]: never; };
        base_slots?: number;
        additional_slots?: number;
        next_slot_cost?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgGCToClientGetFilteredPlayersResponse>]: never; }>(base?: I): CMsgGCToClientGetFilteredPlayersResponse;
    fromPartial<I_1 extends {
        result?: CMsgGCToClientGetFilteredPlayersResponse_Result;
        filtered_players?: {
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        }[];
        base_slots?: number;
        additional_slots?: number;
        next_slot_cost?: number;
    } & {
        result?: CMsgGCToClientGetFilteredPlayersResponse_Result;
        filtered_players?: {
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        }[] & ({
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        } & {
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        } & { [K_3 in Exclude<keyof I_1["filtered_players"][number], keyof CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry>]: never; })[] & { [K_4 in Exclude<keyof I_1["filtered_players"], keyof {
            account_id?: number;
            time_added?: number;
            time_expires?: number;
            note?: string;
        }[]>]: never; };
        base_slots?: number;
        additional_slots?: number;
        next_slot_cost?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgGCToClientGetFilteredPlayersResponse>]: never; }>(object: I_1): CMsgGCToClientGetFilteredPlayersResponse;
};
export declare const CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry: {
    fromJSON(object: any): CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry;
    toJSON(message: CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry): unknown;
    create<I extends {
        account_id?: number;
        time_added?: number;
        time_expires?: number;
        note?: string;
    } & {
        account_id?: number;
        time_added?: number;
        time_expires?: number;
        note?: string;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry>]: never; }>(base?: I): CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry;
    fromPartial<I_1 extends {
        account_id?: number;
        time_added?: number;
        time_expires?: number;
        note?: string;
    } & {
        account_id?: number;
        time_added?: number;
        time_expires?: number;
        note?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry>]: never; }>(object: I_1): CMsgGCToClientGetFilteredPlayersResponse_CFilterEntry;
};
export declare const CMsgClientToGCRemoveFilteredPlayer: {
    fromJSON(object: any): CMsgClientToGCRemoveFilteredPlayer;
    toJSON(message: CMsgClientToGCRemoveFilteredPlayer): unknown;
    create<I extends {
        account_id_to_remove?: number;
    } & {
        account_id_to_remove?: number;
    } & { [K in Exclude<keyof I, "account_id_to_remove">]: never; }>(base?: I): CMsgClientToGCRemoveFilteredPlayer;
    fromPartial<I_1 extends {
        account_id_to_remove?: number;
    } & {
        account_id_to_remove?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id_to_remove">]: never; }>(object: I_1): CMsgClientToGCRemoveFilteredPlayer;
};
export declare const CMsgGCToClientRemoveFilteredPlayerResponse: {
    fromJSON(object: any): CMsgGCToClientRemoveFilteredPlayerResponse;
    toJSON(message: CMsgGCToClientRemoveFilteredPlayerResponse): unknown;
    create<I extends {
        result?: CMsgGCToClientRemoveFilteredPlayerResponse_Result;
    } & {
        result?: CMsgGCToClientRemoveFilteredPlayerResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgGCToClientRemoveFilteredPlayerResponse;
    fromPartial<I_1 extends {
        result?: CMsgGCToClientRemoveFilteredPlayerResponse_Result;
    } & {
        result?: CMsgGCToClientRemoveFilteredPlayerResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgGCToClientRemoveFilteredPlayerResponse;
};
export declare const CMsgClientToGCPurchaseFilteredPlayerSlot: {
    fromJSON(object: any): CMsgClientToGCPurchaseFilteredPlayerSlot;
    toJSON(message: CMsgClientToGCPurchaseFilteredPlayerSlot): unknown;
    create<I extends {
        additional_slots_current?: number;
    } & {
        additional_slots_current?: number;
    } & { [K in Exclude<keyof I, "additional_slots_current">]: never; }>(base?: I): CMsgClientToGCPurchaseFilteredPlayerSlot;
    fromPartial<I_1 extends {
        additional_slots_current?: number;
    } & {
        additional_slots_current?: number;
    } & { [K_1 in Exclude<keyof I_1, "additional_slots_current">]: never; }>(object: I_1): CMsgClientToGCPurchaseFilteredPlayerSlot;
};
export declare const CMsgGCToClientPurchaseFilteredPlayerSlotResponse: {
    fromJSON(object: any): CMsgGCToClientPurchaseFilteredPlayerSlotResponse;
    toJSON(message: CMsgGCToClientPurchaseFilteredPlayerSlotResponse): unknown;
    create<I extends {
        result?: CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result;
        additional_slots?: number;
        next_slot_cost?: number;
    } & {
        result?: CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result;
        additional_slots?: number;
        next_slot_cost?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientPurchaseFilteredPlayerSlotResponse>]: never; }>(base?: I): CMsgGCToClientPurchaseFilteredPlayerSlotResponse;
    fromPartial<I_1 extends {
        result?: CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result;
        additional_slots?: number;
        next_slot_cost?: number;
    } & {
        result?: CMsgGCToClientPurchaseFilteredPlayerSlotResponse_Result;
        additional_slots?: number;
        next_slot_cost?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientPurchaseFilteredPlayerSlotResponse>]: never; }>(object: I_1): CMsgGCToClientPurchaseFilteredPlayerSlotResponse;
};
export declare const CMsgClientToGCUpdateFilteredPlayerNote: {
    fromJSON(object: any): CMsgClientToGCUpdateFilteredPlayerNote;
    toJSON(message: CMsgClientToGCUpdateFilteredPlayerNote): unknown;
    create<I extends {
        target_account_id?: number;
        new_note?: string;
    } & {
        target_account_id?: number;
        new_note?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCUpdateFilteredPlayerNote>]: never; }>(base?: I): CMsgClientToGCUpdateFilteredPlayerNote;
    fromPartial<I_1 extends {
        target_account_id?: number;
        new_note?: string;
    } & {
        target_account_id?: number;
        new_note?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCUpdateFilteredPlayerNote>]: never; }>(object: I_1): CMsgClientToGCUpdateFilteredPlayerNote;
};
export declare const CMsgGCToClientUpdateFilteredPlayerNoteResponse: {
    fromJSON(object: any): CMsgGCToClientUpdateFilteredPlayerNoteResponse;
    toJSON(message: CMsgGCToClientUpdateFilteredPlayerNoteResponse): unknown;
    create<I extends {
        result?: CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result;
    } & {
        result?: CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgGCToClientUpdateFilteredPlayerNoteResponse;
    fromPartial<I_1 extends {
        result?: CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result;
    } & {
        result?: CMsgGCToClientUpdateFilteredPlayerNoteResponse_Result;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgGCToClientUpdateFilteredPlayerNoteResponse;
};
export declare const CMsgPartySearchPlayer: {
    fromJSON(object: any): CMsgPartySearchPlayer;
    toJSON(message: CMsgPartySearchPlayer): unknown;
    create<I extends {
        account_id?: number;
        match_id?: string;
        creation_time?: number;
    } & {
        account_id?: number;
        match_id?: string;
        creation_time?: number;
    } & { [K in Exclude<keyof I, keyof CMsgPartySearchPlayer>]: never; }>(base?: I): CMsgPartySearchPlayer;
    fromPartial<I_1 extends {
        account_id?: number;
        match_id?: string;
        creation_time?: number;
    } & {
        account_id?: number;
        match_id?: string;
        creation_time?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgPartySearchPlayer>]: never; }>(object: I_1): CMsgPartySearchPlayer;
};
export declare const CMsgGCToClientPlayerBeaconState: {
    fromJSON(object: any): CMsgGCToClientPlayerBeaconState;
    toJSON(message: CMsgGCToClientPlayerBeaconState): unknown;
    create<I extends {
        num_active_beacons?: number[];
    } & {
        num_active_beacons?: number[] & number[] & { [K in Exclude<keyof I["num_active_beacons"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "num_active_beacons">]: never; }>(base?: I): CMsgGCToClientPlayerBeaconState;
    fromPartial<I_1 extends {
        num_active_beacons?: number[];
    } & {
        num_active_beacons?: number[] & number[] & { [K_2 in Exclude<keyof I_1["num_active_beacons"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "num_active_beacons">]: never; }>(object: I_1): CMsgGCToClientPlayerBeaconState;
};
export declare const CMsgGCToClientPartyBeaconUpdate: {
    fromJSON(object: any): CMsgGCToClientPartyBeaconUpdate;
    toJSON(message: CMsgGCToClientPartyBeaconUpdate): unknown;
    create<I extends {
        beacon_added?: boolean;
        beacon_type?: number;
        account_id?: number;
    } & {
        beacon_added?: boolean;
        beacon_type?: number;
        account_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientPartyBeaconUpdate>]: never; }>(base?: I): CMsgGCToClientPartyBeaconUpdate;
    fromPartial<I_1 extends {
        beacon_added?: boolean;
        beacon_type?: number;
        account_id?: number;
    } & {
        beacon_added?: boolean;
        beacon_type?: number;
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientPartyBeaconUpdate>]: never; }>(object: I_1): CMsgGCToClientPartyBeaconUpdate;
};
export declare const CMsgClientToGCUpdatePartyBeacon: {
    fromJSON(object: any): CMsgClientToGCUpdatePartyBeacon;
    toJSON(message: CMsgClientToGCUpdatePartyBeacon): unknown;
    create<I extends {
        action?: CMsgClientToGCUpdatePartyBeacon_Action;
    } & {
        action?: CMsgClientToGCUpdatePartyBeacon_Action;
    } & { [K in Exclude<keyof I, "action">]: never; }>(base?: I): CMsgClientToGCUpdatePartyBeacon;
    fromPartial<I_1 extends {
        action?: CMsgClientToGCUpdatePartyBeacon_Action;
    } & {
        action?: CMsgClientToGCUpdatePartyBeacon_Action;
    } & { [K_1 in Exclude<keyof I_1, "action">]: never; }>(object: I_1): CMsgClientToGCUpdatePartyBeacon;
};
export declare const CMsgClientToGCRequestActiveBeaconParties: {
    fromJSON(_: any): CMsgClientToGCRequestActiveBeaconParties;
    toJSON(_: CMsgClientToGCRequestActiveBeaconParties): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCRequestActiveBeaconParties;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCRequestActiveBeaconParties;
};
export declare const CMsgGCToClientRequestActiveBeaconPartiesResponse: {
    fromJSON(object: any): CMsgGCToClientRequestActiveBeaconPartiesResponse;
    toJSON(message: CMsgGCToClientRequestActiveBeaconPartiesResponse): unknown;
    create<I extends {
        response?: CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse;
        active_parties?: {
            party_id?: string;
            beacon_type?: number;
            party_members?: number[];
        }[];
    } & {
        response?: CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse;
        active_parties?: {
            party_id?: string;
            beacon_type?: number;
            party_members?: number[];
        }[] & ({
            party_id?: string;
            beacon_type?: number;
            party_members?: number[];
        } & {
            party_id?: string;
            beacon_type?: number;
            party_members?: number[] & number[] & { [K in Exclude<keyof I["active_parties"][number]["party_members"], keyof number[]>]: never; };
        } & { [K_1 in Exclude<keyof I["active_parties"][number], keyof CPartySearchClientParty>]: never; })[] & { [K_2 in Exclude<keyof I["active_parties"], keyof {
            party_id?: string;
            beacon_type?: number;
            party_members?: number[];
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgGCToClientRequestActiveBeaconPartiesResponse>]: never; }>(base?: I): CMsgGCToClientRequestActiveBeaconPartiesResponse;
    fromPartial<I_1 extends {
        response?: CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse;
        active_parties?: {
            party_id?: string;
            beacon_type?: number;
            party_members?: number[];
        }[];
    } & {
        response?: CMsgGCToClientRequestActiveBeaconPartiesResponse_EResponse;
        active_parties?: {
            party_id?: string;
            beacon_type?: number;
            party_members?: number[];
        }[] & ({
            party_id?: string;
            beacon_type?: number;
            party_members?: number[];
        } & {
            party_id?: string;
            beacon_type?: number;
            party_members?: number[] & number[] & { [K_4 in Exclude<keyof I_1["active_parties"][number]["party_members"], keyof number[]>]: never; };
        } & { [K_5 in Exclude<keyof I_1["active_parties"][number], keyof CPartySearchClientParty>]: never; })[] & { [K_6 in Exclude<keyof I_1["active_parties"], keyof {
            party_id?: string;
            beacon_type?: number;
            party_members?: number[];
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgGCToClientRequestActiveBeaconPartiesResponse>]: never; }>(object: I_1): CMsgGCToClientRequestActiveBeaconPartiesResponse;
};
export declare const CMsgClientToGCJoinPartyFromBeacon: {
    fromJSON(object: any): CMsgClientToGCJoinPartyFromBeacon;
    toJSON(message: CMsgClientToGCJoinPartyFromBeacon): unknown;
    create<I extends {
        party_id?: string;
        account_id?: number;
        beacon_type?: number;
    } & {
        party_id?: string;
        account_id?: number;
        beacon_type?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCJoinPartyFromBeacon>]: never; }>(base?: I): CMsgClientToGCJoinPartyFromBeacon;
    fromPartial<I_1 extends {
        party_id?: string;
        account_id?: number;
        beacon_type?: number;
    } & {
        party_id?: string;
        account_id?: number;
        beacon_type?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCJoinPartyFromBeacon>]: never; }>(object: I_1): CMsgClientToGCJoinPartyFromBeacon;
};
export declare const CMsgGCToClientJoinPartyFromBeaconResponse: {
    fromJSON(object: any): CMsgGCToClientJoinPartyFromBeaconResponse;
    toJSON(message: CMsgGCToClientJoinPartyFromBeaconResponse): unknown;
    create<I extends {
        response?: CMsgGCToClientJoinPartyFromBeaconResponse_EResponse;
    } & {
        response?: CMsgGCToClientJoinPartyFromBeaconResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgGCToClientJoinPartyFromBeaconResponse;
    fromPartial<I_1 extends {
        response?: CMsgGCToClientJoinPartyFromBeaconResponse_EResponse;
    } & {
        response?: CMsgGCToClientJoinPartyFromBeaconResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgGCToClientJoinPartyFromBeaconResponse;
};
export declare const CMsgClientToGCManageFavorites: {
    fromJSON(object: any): CMsgClientToGCManageFavorites;
    toJSON(message: CMsgClientToGCManageFavorites): unknown;
    create<I extends {
        action?: CMsgClientToGCManageFavorites_Action;
        account_id?: number;
        favorite_name?: string;
        invite_response?: boolean;
        from_friendlist?: boolean;
        lobby_id?: string;
    } & {
        action?: CMsgClientToGCManageFavorites_Action;
        account_id?: number;
        favorite_name?: string;
        invite_response?: boolean;
        from_friendlist?: boolean;
        lobby_id?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCManageFavorites>]: never; }>(base?: I): CMsgClientToGCManageFavorites;
    fromPartial<I_1 extends {
        action?: CMsgClientToGCManageFavorites_Action;
        account_id?: number;
        favorite_name?: string;
        invite_response?: boolean;
        from_friendlist?: boolean;
        lobby_id?: string;
    } & {
        action?: CMsgClientToGCManageFavorites_Action;
        account_id?: number;
        favorite_name?: string;
        invite_response?: boolean;
        from_friendlist?: boolean;
        lobby_id?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCManageFavorites>]: never; }>(object: I_1): CMsgClientToGCManageFavorites;
};
export declare const CMsgGCToClientManageFavoritesResponse: {
    fromJSON(object: any): CMsgGCToClientManageFavoritesResponse;
    toJSON(message: CMsgGCToClientManageFavoritesResponse): unknown;
    create<I extends {
        response?: CMsgGCToClientManageFavoritesResponse_EResponse;
        debug_message?: string;
        player?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        };
    } & {
        response?: CMsgGCToClientManageFavoritesResponse_EResponse;
        debug_message?: string;
        player?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & { [K in Exclude<keyof I["player"], keyof CMsgPartySearchPlayer>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgGCToClientManageFavoritesResponse>]: never; }>(base?: I): CMsgGCToClientManageFavoritesResponse;
    fromPartial<I_1 extends {
        response?: CMsgGCToClientManageFavoritesResponse_EResponse;
        debug_message?: string;
        player?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        };
    } & {
        response?: CMsgGCToClientManageFavoritesResponse_EResponse;
        debug_message?: string;
        player?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & { [K_2 in Exclude<keyof I_1["player"], keyof CMsgPartySearchPlayer>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgGCToClientManageFavoritesResponse>]: never; }>(object: I_1): CMsgGCToClientManageFavoritesResponse;
};
export declare const CMsgClientToGCGetFavoritePlayers: {
    fromJSON(object: any): CMsgClientToGCGetFavoritePlayers;
    toJSON(message: CMsgClientToGCGetFavoritePlayers): unknown;
    create<I extends {
        pagination_key?: string;
        pagination_count?: number;
    } & {
        pagination_key?: string;
        pagination_count?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCGetFavoritePlayers>]: never; }>(base?: I): CMsgClientToGCGetFavoritePlayers;
    fromPartial<I_1 extends {
        pagination_key?: string;
        pagination_count?: number;
    } & {
        pagination_key?: string;
        pagination_count?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCGetFavoritePlayers>]: never; }>(object: I_1): CMsgClientToGCGetFavoritePlayers;
};
export declare const CMsgGCToClientGetFavoritePlayersResponse: {
    fromJSON(object: any): CMsgGCToClientGetFavoritePlayersResponse;
    toJSON(message: CMsgGCToClientGetFavoritePlayersResponse): unknown;
    create<I extends {
        response?: CMsgGCToClientGetFavoritePlayersResponse_EResponse;
        players?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        }[];
        next_pagination_key?: string;
    } & {
        response?: CMsgGCToClientGetFavoritePlayersResponse_EResponse;
        players?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        }[] & ({
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & { [K in Exclude<keyof I["players"][number], keyof CMsgPartySearchPlayer>]: never; })[] & { [K_1 in Exclude<keyof I["players"], keyof {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        }[]>]: never; };
        next_pagination_key?: string;
    } & { [K_2 in Exclude<keyof I, keyof CMsgGCToClientGetFavoritePlayersResponse>]: never; }>(base?: I): CMsgGCToClientGetFavoritePlayersResponse;
    fromPartial<I_1 extends {
        response?: CMsgGCToClientGetFavoritePlayersResponse_EResponse;
        players?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        }[];
        next_pagination_key?: string;
    } & {
        response?: CMsgGCToClientGetFavoritePlayersResponse_EResponse;
        players?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        }[] & ({
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & { [K_3 in Exclude<keyof I_1["players"][number], keyof CMsgPartySearchPlayer>]: never; })[] & { [K_4 in Exclude<keyof I_1["players"], keyof {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        }[]>]: never; };
        next_pagination_key?: string;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgGCToClientGetFavoritePlayersResponse>]: never; }>(object: I_1): CMsgGCToClientGetFavoritePlayersResponse;
};
export declare const CMsgGCToClientPartySearchInvite: {
    fromJSON(object: any): CMsgGCToClientPartySearchInvite;
    toJSON(message: CMsgGCToClientPartySearchInvite): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgGCToClientPartySearchInvite;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgGCToClientPartySearchInvite;
};
export declare const CMsgClientToGCVerifyFavoritePlayers: {
    fromJSON(object: any): CMsgClientToGCVerifyFavoritePlayers;
    toJSON(message: CMsgClientToGCVerifyFavoritePlayers): unknown;
    create<I extends {
        account_ids?: number[];
    } & {
        account_ids?: number[] & number[] & { [K in Exclude<keyof I["account_ids"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "account_ids">]: never; }>(base?: I): CMsgClientToGCVerifyFavoritePlayers;
    fromPartial<I_1 extends {
        account_ids?: number[];
    } & {
        account_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["account_ids"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "account_ids">]: never; }>(object: I_1): CMsgClientToGCVerifyFavoritePlayers;
};
export declare const CMsgGCToClientVerifyFavoritePlayersResponse: {
    fromJSON(object: any): CMsgGCToClientVerifyFavoritePlayersResponse;
    toJSON(message: CMsgGCToClientVerifyFavoritePlayersResponse): unknown;
    create<I extends {
        results?: {
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            };
            is_favorite?: boolean;
        }[];
    } & {
        results?: {
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            };
            is_favorite?: boolean;
        }[] & ({
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            };
            is_favorite?: boolean;
        } & {
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            } & {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            } & { [K in Exclude<keyof I["results"][number]["player"], keyof CMsgPartySearchPlayer>]: never; };
            is_favorite?: boolean;
        } & { [K_1 in Exclude<keyof I["results"][number], keyof CMsgGCToClientVerifyFavoritePlayersResponse_Result>]: never; })[] & { [K_2 in Exclude<keyof I["results"], keyof {
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            };
            is_favorite?: boolean;
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, "results">]: never; }>(base?: I): CMsgGCToClientVerifyFavoritePlayersResponse;
    fromPartial<I_1 extends {
        results?: {
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            };
            is_favorite?: boolean;
        }[];
    } & {
        results?: {
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            };
            is_favorite?: boolean;
        }[] & ({
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            };
            is_favorite?: boolean;
        } & {
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            } & {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            } & { [K_4 in Exclude<keyof I_1["results"][number]["player"], keyof CMsgPartySearchPlayer>]: never; };
            is_favorite?: boolean;
        } & { [K_5 in Exclude<keyof I_1["results"][number], keyof CMsgGCToClientVerifyFavoritePlayersResponse_Result>]: never; })[] & { [K_6 in Exclude<keyof I_1["results"], keyof {
            player?: {
                account_id?: number;
                match_id?: string;
                creation_time?: number;
            };
            is_favorite?: boolean;
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "results">]: never; }>(object: I_1): CMsgGCToClientVerifyFavoritePlayersResponse;
};
export declare const CMsgGCToClientVerifyFavoritePlayersResponse_Result: {
    fromJSON(object: any): CMsgGCToClientVerifyFavoritePlayersResponse_Result;
    toJSON(message: CMsgGCToClientVerifyFavoritePlayersResponse_Result): unknown;
    create<I extends {
        player?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        };
        is_favorite?: boolean;
    } & {
        player?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & { [K in Exclude<keyof I["player"], keyof CMsgPartySearchPlayer>]: never; };
        is_favorite?: boolean;
    } & { [K_1 in Exclude<keyof I, keyof CMsgGCToClientVerifyFavoritePlayersResponse_Result>]: never; }>(base?: I): CMsgGCToClientVerifyFavoritePlayersResponse_Result;
    fromPartial<I_1 extends {
        player?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        };
        is_favorite?: boolean;
    } & {
        player?: {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & {
            account_id?: number;
            match_id?: string;
            creation_time?: number;
        } & { [K_2 in Exclude<keyof I_1["player"], keyof CMsgPartySearchPlayer>]: never; };
        is_favorite?: boolean;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgGCToClientVerifyFavoritePlayersResponse_Result>]: never; }>(object: I_1): CMsgGCToClientVerifyFavoritePlayersResponse_Result;
};
export declare const CMsgClientToGCRequestPlayerRecentAccomplishments: {
    fromJSON(object: any): CMsgClientToGCRequestPlayerRecentAccomplishments;
    toJSON(message: CMsgClientToGCRequestPlayerRecentAccomplishments): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgClientToGCRequestPlayerRecentAccomplishments;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgClientToGCRequestPlayerRecentAccomplishments;
};
export declare const CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse: {
    fromJSON(object: any): CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse;
    toJSON(message: CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse;
        player_accomplishments?: {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            };
            total_record?: {
                wins?: number;
                losses?: number;
            };
            prediction_streak?: number;
            plus_prediction_streak?: number;
            recent_commends?: {
                commends?: number;
                match_count?: number;
            };
            first_match_timestamp?: number;
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            };
            recent_mvps?: {
                outcomes?: number;
                match_count?: number;
            };
        };
    } & {
        result?: CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse;
        player_accomplishments?: {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            };
            total_record?: {
                wins?: number;
                losses?: number;
            };
            prediction_streak?: number;
            plus_prediction_streak?: number;
            recent_commends?: {
                commends?: number;
                match_count?: number;
            };
            first_match_timestamp?: number;
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            };
            recent_mvps?: {
                outcomes?: number;
                match_count?: number;
            };
        } & {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            } & {
                outcomes?: number;
                match_count?: number;
            } & { [K in Exclude<keyof I["player_accomplishments"]["recent_outcomes"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchOutcomes>]: never; };
            total_record?: {
                wins?: number;
                losses?: number;
            } & {
                wins?: number;
                losses?: number;
            } & { [K_1 in Exclude<keyof I["player_accomplishments"]["total_record"], keyof import("./dota_gcmessages_common").CMsgPlayerMatchRecord>]: never; };
            prediction_streak?: number;
            plus_prediction_streak?: number;
            recent_commends?: {
                commends?: number;
                match_count?: number;
            } & {
                commends?: number;
                match_count?: number;
            } & { [K_2 in Exclude<keyof I["player_accomplishments"]["recent_commends"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentCommends>]: never; };
            first_match_timestamp?: number;
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            } & {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            } & { [K_3 in Exclude<keyof I["player_accomplishments"]["last_match"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchInfo>]: never; };
            recent_mvps?: {
                outcomes?: number;
                match_count?: number;
            } & {
                outcomes?: number;
                match_count?: number;
            } & { [K_4 in Exclude<keyof I["player_accomplishments"]["recent_mvps"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchOutcomes>]: never; };
        } & { [K_5 in Exclude<keyof I["player_accomplishments"], keyof CMsgPlayerRecentAccomplishments>]: never; };
    } & { [K_6 in Exclude<keyof I, keyof CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse>]: never; }>(base?: I): CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse;
        player_accomplishments?: {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            };
            total_record?: {
                wins?: number;
                losses?: number;
            };
            prediction_streak?: number;
            plus_prediction_streak?: number;
            recent_commends?: {
                commends?: number;
                match_count?: number;
            };
            first_match_timestamp?: number;
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            };
            recent_mvps?: {
                outcomes?: number;
                match_count?: number;
            };
        };
    } & {
        result?: CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse_EResponse;
        player_accomplishments?: {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            };
            total_record?: {
                wins?: number;
                losses?: number;
            };
            prediction_streak?: number;
            plus_prediction_streak?: number;
            recent_commends?: {
                commends?: number;
                match_count?: number;
            };
            first_match_timestamp?: number;
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            };
            recent_mvps?: {
                outcomes?: number;
                match_count?: number;
            };
        } & {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            } & {
                outcomes?: number;
                match_count?: number;
            } & { [K_7 in Exclude<keyof I_1["player_accomplishments"]["recent_outcomes"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchOutcomes>]: never; };
            total_record?: {
                wins?: number;
                losses?: number;
            } & {
                wins?: number;
                losses?: number;
            } & { [K_8 in Exclude<keyof I_1["player_accomplishments"]["total_record"], keyof import("./dota_gcmessages_common").CMsgPlayerMatchRecord>]: never; };
            prediction_streak?: number;
            plus_prediction_streak?: number;
            recent_commends?: {
                commends?: number;
                match_count?: number;
            } & {
                commends?: number;
                match_count?: number;
            } & { [K_9 in Exclude<keyof I_1["player_accomplishments"]["recent_commends"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentCommends>]: never; };
            first_match_timestamp?: number;
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            } & {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            } & { [K_10 in Exclude<keyof I_1["player_accomplishments"]["last_match"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchInfo>]: never; };
            recent_mvps?: {
                outcomes?: number;
                match_count?: number;
            } & {
                outcomes?: number;
                match_count?: number;
            } & { [K_11 in Exclude<keyof I_1["player_accomplishments"]["recent_mvps"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchOutcomes>]: never; };
        } & { [K_12 in Exclude<keyof I_1["player_accomplishments"], keyof CMsgPlayerRecentAccomplishments>]: never; };
    } & { [K_13 in Exclude<keyof I_1, keyof CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse>]: never; }>(object: I_1): CMsgClientToGCRequestPlayerRecentAccomplishmentsResponse;
};
export declare const CMsgClientToGCRequestPlayerHeroRecentAccomplishments: {
    fromJSON(object: any): CMsgClientToGCRequestPlayerHeroRecentAccomplishments;
    toJSON(message: CMsgClientToGCRequestPlayerHeroRecentAccomplishments): unknown;
    create<I extends {
        account_id?: number;
        hero_id?: number;
    } & {
        account_id?: number;
        hero_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCRequestPlayerHeroRecentAccomplishments>]: never; }>(base?: I): CMsgClientToGCRequestPlayerHeroRecentAccomplishments;
    fromPartial<I_1 extends {
        account_id?: number;
        hero_id?: number;
    } & {
        account_id?: number;
        hero_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCRequestPlayerHeroRecentAccomplishments>]: never; }>(object: I_1): CMsgClientToGCRequestPlayerHeroRecentAccomplishments;
};
export declare const CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse: {
    fromJSON(object: any): CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse;
    toJSON(message: CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse;
        hero_accomplishments?: {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            };
            total_record?: {
                wins?: number;
                losses?: number;
            };
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            };
        };
    } & {
        result?: CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse;
        hero_accomplishments?: {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            };
            total_record?: {
                wins?: number;
                losses?: number;
            };
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            };
        } & {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            } & {
                outcomes?: number;
                match_count?: number;
            } & { [K in Exclude<keyof I["hero_accomplishments"]["recent_outcomes"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchOutcomes>]: never; };
            total_record?: {
                wins?: number;
                losses?: number;
            } & {
                wins?: number;
                losses?: number;
            } & { [K_1 in Exclude<keyof I["hero_accomplishments"]["total_record"], keyof import("./dota_gcmessages_common").CMsgPlayerMatchRecord>]: never; };
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            } & {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            } & { [K_2 in Exclude<keyof I["hero_accomplishments"]["last_match"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchInfo>]: never; };
        } & { [K_3 in Exclude<keyof I["hero_accomplishments"], keyof CMsgPlayerHeroRecentAccomplishments>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse>]: never; }>(base?: I): CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse;
        hero_accomplishments?: {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            };
            total_record?: {
                wins?: number;
                losses?: number;
            };
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            };
        };
    } & {
        result?: CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse_EResponse;
        hero_accomplishments?: {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            };
            total_record?: {
                wins?: number;
                losses?: number;
            };
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            };
        } & {
            recent_outcomes?: {
                outcomes?: number;
                match_count?: number;
            } & {
                outcomes?: number;
                match_count?: number;
            } & { [K_5 in Exclude<keyof I_1["hero_accomplishments"]["recent_outcomes"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchOutcomes>]: never; };
            total_record?: {
                wins?: number;
                losses?: number;
            } & {
                wins?: number;
                losses?: number;
            } & { [K_6 in Exclude<keyof I_1["hero_accomplishments"]["total_record"], keyof import("./dota_gcmessages_common").CMsgPlayerMatchRecord>]: never; };
            last_match?: {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            } & {
                match_id?: string;
                timestamp?: number;
                duration?: number;
                win?: boolean;
                hero_id?: number;
                kills?: number;
                deaths?: number;
                assists?: number;
            } & { [K_7 in Exclude<keyof I_1["hero_accomplishments"]["last_match"], keyof import("./dota_gcmessages_common").CMsgPlayerRecentMatchInfo>]: never; };
        } & { [K_8 in Exclude<keyof I_1["hero_accomplishments"], keyof CMsgPlayerHeroRecentAccomplishments>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse>]: never; }>(object: I_1): CMsgClientToGCRequestPlayerHeroRecentAccomplishmentsResponse;
};
export declare const CMsgClientToGCSubmitPlayerMatchSurvey: {
    fromJSON(object: any): CMsgClientToGCSubmitPlayerMatchSurvey;
    toJSON(message: CMsgClientToGCSubmitPlayerMatchSurvey): unknown;
    create<I extends {
        match_id?: string;
        rating?: number;
        flags?: number;
    } & {
        match_id?: string;
        rating?: number;
        flags?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSubmitPlayerMatchSurvey>]: never; }>(base?: I): CMsgClientToGCSubmitPlayerMatchSurvey;
    fromPartial<I_1 extends {
        match_id?: string;
        rating?: number;
        flags?: number;
    } & {
        match_id?: string;
        rating?: number;
        flags?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSubmitPlayerMatchSurvey>]: never; }>(object: I_1): CMsgClientToGCSubmitPlayerMatchSurvey;
};
export declare const CMsgClientToGCSubmitPlayerMatchSurveyResponse: {
    fromJSON(object: any): CMsgClientToGCSubmitPlayerMatchSurveyResponse;
    toJSON(message: CMsgClientToGCSubmitPlayerMatchSurveyResponse): unknown;
    create<I extends {
        eresult?: CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse;
        account_id?: number;
    } & {
        eresult?: CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse;
        account_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSubmitPlayerMatchSurveyResponse>]: never; }>(base?: I): CMsgClientToGCSubmitPlayerMatchSurveyResponse;
    fromPartial<I_1 extends {
        eresult?: CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse;
        account_id?: number;
    } & {
        eresult?: CMsgClientToGCSubmitPlayerMatchSurveyResponse_EResponse;
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSubmitPlayerMatchSurveyResponse>]: never; }>(object: I_1): CMsgClientToGCSubmitPlayerMatchSurveyResponse;
};
export declare const CMsgGCToClientVACReminder: {
    fromJSON(_: any): CMsgGCToClientVACReminder;
    toJSON(_: CMsgGCToClientVACReminder): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgGCToClientVACReminder;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgGCToClientVACReminder;
};
export declare const CMsgClientToGCUnderDraftRequest: {
    fromJSON(object: any): CMsgClientToGCUnderDraftRequest;
    toJSON(message: CMsgClientToGCUnderDraftRequest): unknown;
    create<I extends {
        account_id?: number;
        event_id?: number;
    } & {
        account_id?: number;
        event_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCUnderDraftRequest>]: never; }>(base?: I): CMsgClientToGCUnderDraftRequest;
    fromPartial<I_1 extends {
        account_id?: number;
        event_id?: number;
    } & {
        account_id?: number;
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftRequest>]: never; }>(object: I_1): CMsgClientToGCUnderDraftRequest;
};
export declare const CMsgClientToGCUnderDraftResponse: {
    fromJSON(object: any): CMsgClientToGCUnderDraftResponse;
    toJSON(message: CMsgClientToGCUnderDraftResponse): unknown;
    create<I extends {
        result?: EUnderDraftResponse;
        account_id?: number;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        account_id?: number;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K in Exclude<keyof I["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_1 in Exclude<keyof I["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_2 in Exclude<keyof I["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_3 in Exclude<keyof I["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_4 in Exclude<keyof I["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof CMsgClientToGCUnderDraftResponse>]: never; }>(base?: I): CMsgClientToGCUnderDraftResponse;
    fromPartial<I_1 extends {
        result?: EUnderDraftResponse;
        account_id?: number;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        account_id?: number;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K_6 in Exclude<keyof I_1["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_7 in Exclude<keyof I_1["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_8 in Exclude<keyof I_1["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_9 in Exclude<keyof I_1["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_10 in Exclude<keyof I_1["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftResponse>]: never; }>(object: I_1): CMsgClientToGCUnderDraftResponse;
};
export declare const CMsgClientToGCUnderDraftReroll: {
    fromJSON(object: any): CMsgClientToGCUnderDraftReroll;
    toJSON(message: CMsgClientToGCUnderDraftReroll): unknown;
    create<I extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K in Exclude<keyof I, "event_id">]: never; }>(base?: I): CMsgClientToGCUnderDraftReroll;
    fromPartial<I_1 extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "event_id">]: never; }>(object: I_1): CMsgClientToGCUnderDraftReroll;
};
export declare const CMsgClientToGCUnderDraftRerollResponse: {
    fromJSON(object: any): CMsgClientToGCUnderDraftRerollResponse;
    toJSON(message: CMsgClientToGCUnderDraftRerollResponse): unknown;
    create<I extends {
        result?: EUnderDraftResponse;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K in Exclude<keyof I["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_1 in Exclude<keyof I["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_2 in Exclude<keyof I["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_3 in Exclude<keyof I["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_4 in Exclude<keyof I["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof CMsgClientToGCUnderDraftRerollResponse>]: never; }>(base?: I): CMsgClientToGCUnderDraftRerollResponse;
    fromPartial<I_1 extends {
        result?: EUnderDraftResponse;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K_6 in Exclude<keyof I_1["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_7 in Exclude<keyof I_1["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_8 in Exclude<keyof I_1["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_9 in Exclude<keyof I_1["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_10 in Exclude<keyof I_1["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftRerollResponse>]: never; }>(object: I_1): CMsgClientToGCUnderDraftRerollResponse;
};
export declare const CMsgClientToGCUnderDraftBuy: {
    fromJSON(object: any): CMsgClientToGCUnderDraftBuy;
    toJSON(message: CMsgClientToGCUnderDraftBuy): unknown;
    create<I extends {
        event_id?: number;
        slot_id?: number;
    } & {
        event_id?: number;
        slot_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCUnderDraftBuy>]: never; }>(base?: I): CMsgClientToGCUnderDraftBuy;
    fromPartial<I_1 extends {
        event_id?: number;
        slot_id?: number;
    } & {
        event_id?: number;
        slot_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftBuy>]: never; }>(object: I_1): CMsgClientToGCUnderDraftBuy;
};
export declare const CMsgGCToClientGuildUnderDraftGoldUpdated: {
    fromJSON(object: any): CMsgGCToClientGuildUnderDraftGoldUpdated;
    toJSON(message: CMsgGCToClientGuildUnderDraftGoldUpdated): unknown;
    create<I extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K in Exclude<keyof I, "event_id">]: never; }>(base?: I): CMsgGCToClientGuildUnderDraftGoldUpdated;
    fromPartial<I_1 extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "event_id">]: never; }>(object: I_1): CMsgGCToClientGuildUnderDraftGoldUpdated;
};
export declare const CMsgClientToGCUnderDraftBuyResponse: {
    fromJSON(object: any): CMsgClientToGCUnderDraftBuyResponse;
    toJSON(message: CMsgClientToGCUnderDraftBuyResponse): unknown;
    create<I extends {
        result?: EUnderDraftResponse;
        event_id?: number;
        slot_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        event_id?: number;
        slot_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K in Exclude<keyof I["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_1 in Exclude<keyof I["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_2 in Exclude<keyof I["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_3 in Exclude<keyof I["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_4 in Exclude<keyof I["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof CMsgClientToGCUnderDraftBuyResponse>]: never; }>(base?: I): CMsgClientToGCUnderDraftBuyResponse;
    fromPartial<I_1 extends {
        result?: EUnderDraftResponse;
        event_id?: number;
        slot_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        event_id?: number;
        slot_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K_6 in Exclude<keyof I_1["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_7 in Exclude<keyof I_1["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_8 in Exclude<keyof I_1["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_9 in Exclude<keyof I_1["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_10 in Exclude<keyof I_1["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftBuyResponse>]: never; }>(object: I_1): CMsgClientToGCUnderDraftBuyResponse;
};
export declare const CMsgClientToGCUnderDraftRollBackBench: {
    fromJSON(object: any): CMsgClientToGCUnderDraftRollBackBench;
    toJSON(message: CMsgClientToGCUnderDraftRollBackBench): unknown;
    create<I extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K in Exclude<keyof I, "event_id">]: never; }>(base?: I): CMsgClientToGCUnderDraftRollBackBench;
    fromPartial<I_1 extends {
        event_id?: number;
    } & {
        event_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "event_id">]: never; }>(object: I_1): CMsgClientToGCUnderDraftRollBackBench;
};
export declare const CMsgClientToGCUnderDraftRollBackBenchResponse: {
    fromJSON(object: any): CMsgClientToGCUnderDraftRollBackBenchResponse;
    toJSON(message: CMsgClientToGCUnderDraftRollBackBenchResponse): unknown;
    create<I extends {
        result?: EUnderDraftResponse;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K in Exclude<keyof I["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_1 in Exclude<keyof I["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_2 in Exclude<keyof I["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_3 in Exclude<keyof I["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_4 in Exclude<keyof I["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof CMsgClientToGCUnderDraftRollBackBenchResponse>]: never; }>(base?: I): CMsgClientToGCUnderDraftRollBackBenchResponse;
    fromPartial<I_1 extends {
        result?: EUnderDraftResponse;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        event_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K_6 in Exclude<keyof I_1["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_7 in Exclude<keyof I_1["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_8 in Exclude<keyof I_1["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_9 in Exclude<keyof I_1["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_10 in Exclude<keyof I_1["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftRollBackBenchResponse>]: never; }>(object: I_1): CMsgClientToGCUnderDraftRollBackBenchResponse;
};
export declare const CMsgClientToGCUnderDraftSell: {
    fromJSON(object: any): CMsgClientToGCUnderDraftSell;
    toJSON(message: CMsgClientToGCUnderDraftSell): unknown;
    create<I extends {
        event_id?: number;
        slot_id?: number;
    } & {
        event_id?: number;
        slot_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCUnderDraftSell>]: never; }>(base?: I): CMsgClientToGCUnderDraftSell;
    fromPartial<I_1 extends {
        event_id?: number;
        slot_id?: number;
    } & {
        event_id?: number;
        slot_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftSell>]: never; }>(object: I_1): CMsgClientToGCUnderDraftSell;
};
export declare const CMsgClientToGCUnderDraftSellResponse: {
    fromJSON(object: any): CMsgClientToGCUnderDraftSellResponse;
    toJSON(message: CMsgClientToGCUnderDraftSellResponse): unknown;
    create<I extends {
        result?: EUnderDraftResponse;
        event_id?: number;
        slot_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        event_id?: number;
        slot_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K in Exclude<keyof I["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_1 in Exclude<keyof I["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_2 in Exclude<keyof I["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_3 in Exclude<keyof I["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_4 in Exclude<keyof I["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof CMsgClientToGCUnderDraftSellResponse>]: never; }>(base?: I): CMsgClientToGCUnderDraftSellResponse;
    fromPartial<I_1 extends {
        result?: EUnderDraftResponse;
        event_id?: number;
        slot_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        };
    } & {
        result?: EUnderDraftResponse;
        event_id?: number;
        slot_id?: number;
        draft_data?: {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[];
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[];
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & {
            bench_slots?: {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            } & { [K_6 in Exclude<keyof I_1["draft_data"]["bench_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_BenchSlot>]: never; })[] & { [K_7 in Exclude<keyof I_1["draft_data"]["bench_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                stars?: number;
            }[]>]: never; };
            shop_slots?: {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[] & ({
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            } & { [K_8 in Exclude<keyof I_1["draft_data"]["shop_slots"][number], keyof import("./dota_gcmessages_common").CMsgUnderDraftData_ShopSlot>]: never; })[] & { [K_9 in Exclude<keyof I_1["draft_data"]["shop_slots"], keyof {
                slot_id?: number;
                hero_id?: number;
                is_special_reward?: boolean;
            }[]>]: never; };
            gold?: number;
            total_gold?: number;
            not_restorable?: boolean;
        } & { [K_10 in Exclude<keyof I_1["draft_data"], keyof CMsgUnderDraftData>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftSellResponse>]: never; }>(object: I_1): CMsgClientToGCUnderDraftSellResponse;
};
export declare const CMsgClientToGCUnderDraftRedeemReward: {
    fromJSON(object: any): CMsgClientToGCUnderDraftRedeemReward;
    toJSON(message: CMsgClientToGCUnderDraftRedeemReward): unknown;
    create<I extends {
        event_id?: number;
        action_id?: number;
    } & {
        event_id?: number;
        action_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCUnderDraftRedeemReward>]: never; }>(base?: I): CMsgClientToGCUnderDraftRedeemReward;
    fromPartial<I_1 extends {
        event_id?: number;
        action_id?: number;
    } & {
        event_id?: number;
        action_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCUnderDraftRedeemReward>]: never; }>(object: I_1): CMsgClientToGCUnderDraftRedeemReward;
};
export declare const CMsgClientToGCUnderDraftRedeemRewardResponse: {
    fromJSON(object: any): CMsgClientToGCUnderDraftRedeemRewardResponse;
    toJSON(message: CMsgClientToGCUnderDraftRedeemRewardResponse): unknown;
    create<I extends {
        result?: EUnderDraftResponse;
    } & {
        result?: EUnderDraftResponse;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCUnderDraftRedeemRewardResponse;
    fromPartial<I_1 extends {
        result?: EUnderDraftResponse;
    } & {
        result?: EUnderDraftResponse;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCUnderDraftRedeemRewardResponse;
};
export declare const CMsgClientToGCSubmitDraftTriviaMatchAnswer: {
    fromJSON(object: any): CMsgClientToGCSubmitDraftTriviaMatchAnswer;
    toJSON(message: CMsgClientToGCSubmitDraftTriviaMatchAnswer): unknown;
    create<I extends {
        chose_radiant_as_winner?: boolean;
        event_id?: number;
        end_time?: number;
    } & {
        chose_radiant_as_winner?: boolean;
        event_id?: number;
        end_time?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSubmitDraftTriviaMatchAnswer>]: never; }>(base?: I): CMsgClientToGCSubmitDraftTriviaMatchAnswer;
    fromPartial<I_1 extends {
        chose_radiant_as_winner?: boolean;
        event_id?: number;
        end_time?: number;
    } & {
        chose_radiant_as_winner?: boolean;
        event_id?: number;
        end_time?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSubmitDraftTriviaMatchAnswer>]: never; }>(object: I_1): CMsgClientToGCSubmitDraftTriviaMatchAnswer;
};
export declare const CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse: {
    fromJSON(object: any): CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse;
    toJSON(message: CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse): unknown;
    create<I extends {
        result?: EDOTADraftTriviaAnswerResult;
    } & {
        result?: EDOTADraftTriviaAnswerResult;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse;
    fromPartial<I_1 extends {
        result?: EDOTADraftTriviaAnswerResult;
    } & {
        result?: EDOTADraftTriviaAnswerResult;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCSubmitDraftTriviaMatchAnswerResponse;
};
export declare const CMsgDraftTriviaVoteCount: {
    fromJSON(object: any): CMsgDraftTriviaVoteCount;
    toJSON(message: CMsgDraftTriviaVoteCount): unknown;
    create<I extends {
        total_votes?: number;
        radiant_votes?: number;
        dire_votes?: number;
    } & {
        total_votes?: number;
        radiant_votes?: number;
        dire_votes?: number;
    } & { [K in Exclude<keyof I, keyof CMsgDraftTriviaVoteCount>]: never; }>(base?: I): CMsgDraftTriviaVoteCount;
    fromPartial<I_1 extends {
        total_votes?: number;
        radiant_votes?: number;
        dire_votes?: number;
    } & {
        total_votes?: number;
        radiant_votes?: number;
        dire_votes?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgDraftTriviaVoteCount>]: never; }>(object: I_1): CMsgDraftTriviaVoteCount;
};
export declare const CMsgClientToGCRecalibrateMMR: {
    fromJSON(_: any): CMsgClientToGCRecalibrateMMR;
    toJSON(_: CMsgClientToGCRecalibrateMMR): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCRecalibrateMMR;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCRecalibrateMMR;
};
export declare const CMsgClientToGCRecalibrateMMRResponse: {
    fromJSON(object: any): CMsgClientToGCRecalibrateMMRResponse;
    toJSON(message: CMsgClientToGCRecalibrateMMRResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCRecalibrateMMRResponse_EResponse;
    } & {
        result?: CMsgClientToGCRecalibrateMMRResponse_EResponse;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCRecalibrateMMRResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCRecalibrateMMRResponse_EResponse;
    } & {
        result?: CMsgClientToGCRecalibrateMMRResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCRecalibrateMMRResponse;
};
export declare const CMsgDOTAPostGameItemAwardNotification: {
    fromJSON(object: any): CMsgDOTAPostGameItemAwardNotification;
    toJSON(message: CMsgDOTAPostGameItemAwardNotification): unknown;
    create<I extends {
        receiver_account_id?: number;
        item_def_index?: number[];
        action_id?: number;
    } & {
        receiver_account_id?: number;
        item_def_index?: number[] & number[] & { [K in Exclude<keyof I["item_def_index"], keyof number[]>]: never; };
        action_id?: number;
    } & { [K_1 in Exclude<keyof I, keyof CMsgDOTAPostGameItemAwardNotification>]: never; }>(base?: I): CMsgDOTAPostGameItemAwardNotification;
    fromPartial<I_1 extends {
        receiver_account_id?: number;
        item_def_index?: number[];
        action_id?: number;
    } & {
        receiver_account_id?: number;
        item_def_index?: number[] & number[] & { [K_2 in Exclude<keyof I_1["item_def_index"], keyof number[]>]: never; };
        action_id?: number;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgDOTAPostGameItemAwardNotification>]: never; }>(object: I_1): CMsgDOTAPostGameItemAwardNotification;
};
export declare const CMsgClientToGCGetOWMatchDetails: {
    fromJSON(_: any): CMsgClientToGCGetOWMatchDetails;
    toJSON(_: CMsgClientToGCGetOWMatchDetails): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCGetOWMatchDetails;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCGetOWMatchDetails;
};
export declare const CMsgClientToGCGetOWMatchDetailsResponse: {
    fromJSON(object: any): CMsgClientToGCGetOWMatchDetailsResponse;
    toJSON(message: CMsgClientToGCGetOWMatchDetailsResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCGetOWMatchDetailsResponse_EResponse;
        overwatch_replay_id?: string;
        decryption_key?: string;
        cluster?: number;
        overwatch_salt?: number;
        target_player_slot?: number;
        markers?: {
            start_game_time_s?: number;
            end_game_time_s?: number;
        }[];
        report_reason?: EOverwatchReportReason;
        target_hero_id?: number;
        rank_tier?: number;
        lane_selection_flags?: number;
    } & {
        result?: CMsgClientToGCGetOWMatchDetailsResponse_EResponse;
        overwatch_replay_id?: string;
        decryption_key?: string;
        cluster?: number;
        overwatch_salt?: number;
        target_player_slot?: number;
        markers?: {
            start_game_time_s?: number;
            end_game_time_s?: number;
        }[] & ({
            start_game_time_s?: number;
            end_game_time_s?: number;
        } & {
            start_game_time_s?: number;
            end_game_time_s?: number;
        } & { [K in Exclude<keyof I["markers"][number], keyof CMsgClientToGCGetOWMatchDetailsResponse_Marker>]: never; })[] & { [K_1 in Exclude<keyof I["markers"], keyof {
            start_game_time_s?: number;
            end_game_time_s?: number;
        }[]>]: never; };
        report_reason?: EOverwatchReportReason;
        target_hero_id?: number;
        rank_tier?: number;
        lane_selection_flags?: number;
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCGetOWMatchDetailsResponse>]: never; }>(base?: I): CMsgClientToGCGetOWMatchDetailsResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCGetOWMatchDetailsResponse_EResponse;
        overwatch_replay_id?: string;
        decryption_key?: string;
        cluster?: number;
        overwatch_salt?: number;
        target_player_slot?: number;
        markers?: {
            start_game_time_s?: number;
            end_game_time_s?: number;
        }[];
        report_reason?: EOverwatchReportReason;
        target_hero_id?: number;
        rank_tier?: number;
        lane_selection_flags?: number;
    } & {
        result?: CMsgClientToGCGetOWMatchDetailsResponse_EResponse;
        overwatch_replay_id?: string;
        decryption_key?: string;
        cluster?: number;
        overwatch_salt?: number;
        target_player_slot?: number;
        markers?: {
            start_game_time_s?: number;
            end_game_time_s?: number;
        }[] & ({
            start_game_time_s?: number;
            end_game_time_s?: number;
        } & {
            start_game_time_s?: number;
            end_game_time_s?: number;
        } & { [K_3 in Exclude<keyof I_1["markers"][number], keyof CMsgClientToGCGetOWMatchDetailsResponse_Marker>]: never; })[] & { [K_4 in Exclude<keyof I_1["markers"], keyof {
            start_game_time_s?: number;
            end_game_time_s?: number;
        }[]>]: never; };
        report_reason?: EOverwatchReportReason;
        target_hero_id?: number;
        rank_tier?: number;
        lane_selection_flags?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCGetOWMatchDetailsResponse>]: never; }>(object: I_1): CMsgClientToGCGetOWMatchDetailsResponse;
};
export declare const CMsgClientToGCGetOWMatchDetailsResponse_Marker: {
    fromJSON(object: any): CMsgClientToGCGetOWMatchDetailsResponse_Marker;
    toJSON(message: CMsgClientToGCGetOWMatchDetailsResponse_Marker): unknown;
    create<I extends {
        start_game_time_s?: number;
        end_game_time_s?: number;
    } & {
        start_game_time_s?: number;
        end_game_time_s?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCGetOWMatchDetailsResponse_Marker>]: never; }>(base?: I): CMsgClientToGCGetOWMatchDetailsResponse_Marker;
    fromPartial<I_1 extends {
        start_game_time_s?: number;
        end_game_time_s?: number;
    } & {
        start_game_time_s?: number;
        end_game_time_s?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCGetOWMatchDetailsResponse_Marker>]: never; }>(object: I_1): CMsgClientToGCGetOWMatchDetailsResponse_Marker;
};
export declare const CMsgClientToGCSubmitOWConviction: {
    fromJSON(object: any): CMsgClientToGCSubmitOWConviction;
    toJSON(message: CMsgClientToGCSubmitOWConviction): unknown;
    create<I extends {
        overwatch_replay_id?: string;
        target_player_slot?: number;
        cheating_conviction?: EOverwatchConviction;
        griefing_conviction?: EOverwatchConviction;
    } & {
        overwatch_replay_id?: string;
        target_player_slot?: number;
        cheating_conviction?: EOverwatchConviction;
        griefing_conviction?: EOverwatchConviction;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSubmitOWConviction>]: never; }>(base?: I): CMsgClientToGCSubmitOWConviction;
    fromPartial<I_1 extends {
        overwatch_replay_id?: string;
        target_player_slot?: number;
        cheating_conviction?: EOverwatchConviction;
        griefing_conviction?: EOverwatchConviction;
    } & {
        overwatch_replay_id?: string;
        target_player_slot?: number;
        cheating_conviction?: EOverwatchConviction;
        griefing_conviction?: EOverwatchConviction;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSubmitOWConviction>]: never; }>(object: I_1): CMsgClientToGCSubmitOWConviction;
};
export declare const CMsgClientToGCSubmitOWConvictionResponse: {
    fromJSON(object: any): CMsgClientToGCSubmitOWConvictionResponse;
    toJSON(message: CMsgClientToGCSubmitOWConvictionResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCSubmitOWConvictionResponse_EResponse;
        overwatch_replay_id?: string;
    } & {
        result?: CMsgClientToGCSubmitOWConvictionResponse_EResponse;
        overwatch_replay_id?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSubmitOWConvictionResponse>]: never; }>(base?: I): CMsgClientToGCSubmitOWConvictionResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCSubmitOWConvictionResponse_EResponse;
        overwatch_replay_id?: string;
    } & {
        result?: CMsgClientToGCSubmitOWConvictionResponse_EResponse;
        overwatch_replay_id?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSubmitOWConvictionResponse>]: never; }>(object: I_1): CMsgClientToGCSubmitOWConvictionResponse;
};
export declare const CMsgClientToGCChinaSSAURLRequest: {
    fromJSON(_: any): CMsgClientToGCChinaSSAURLRequest;
    toJSON(_: CMsgClientToGCChinaSSAURLRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCChinaSSAURLRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCChinaSSAURLRequest;
};
export declare const CMsgClientToGCChinaSSAURLResponse: {
    fromJSON(object: any): CMsgClientToGCChinaSSAURLResponse;
    toJSON(message: CMsgClientToGCChinaSSAURLResponse): unknown;
    create<I extends {
        agreement_url?: string;
    } & {
        agreement_url?: string;
    } & { [K in Exclude<keyof I, "agreement_url">]: never; }>(base?: I): CMsgClientToGCChinaSSAURLResponse;
    fromPartial<I_1 extends {
        agreement_url?: string;
    } & {
        agreement_url?: string;
    } & { [K_1 in Exclude<keyof I_1, "agreement_url">]: never; }>(object: I_1): CMsgClientToGCChinaSSAURLResponse;
};
export declare const CMsgClientToGCChinaSSAAcceptedRequest: {
    fromJSON(_: any): CMsgClientToGCChinaSSAAcceptedRequest;
    toJSON(_: CMsgClientToGCChinaSSAAcceptedRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCChinaSSAAcceptedRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCChinaSSAAcceptedRequest;
};
export declare const CMsgClientToGCChinaSSAAcceptedResponse: {
    fromJSON(object: any): CMsgClientToGCChinaSSAAcceptedResponse;
    toJSON(message: CMsgClientToGCChinaSSAAcceptedResponse): unknown;
    create<I extends {
        agreement_accepted?: boolean;
    } & {
        agreement_accepted?: boolean;
    } & { [K in Exclude<keyof I, "agreement_accepted">]: never; }>(base?: I): CMsgClientToGCChinaSSAAcceptedResponse;
    fromPartial<I_1 extends {
        agreement_accepted?: boolean;
    } & {
        agreement_accepted?: boolean;
    } & { [K_1 in Exclude<keyof I_1, "agreement_accepted">]: never; }>(object: I_1): CMsgClientToGCChinaSSAAcceptedResponse;
};
export declare const CMsgGCToClientOverwatchCasesAvailable: {
    fromJSON(object: any): CMsgGCToClientOverwatchCasesAvailable;
    toJSON(message: CMsgGCToClientOverwatchCasesAvailable): unknown;
    create<I extends {
        expire_time?: number;
    } & {
        expire_time?: number;
    } & { [K in Exclude<keyof I, "expire_time">]: never; }>(base?: I): CMsgGCToClientOverwatchCasesAvailable;
    fromPartial<I_1 extends {
        expire_time?: number;
    } & {
        expire_time?: number;
    } & { [K_1 in Exclude<keyof I_1, "expire_time">]: never; }>(object: I_1): CMsgGCToClientOverwatchCasesAvailable;
};
export declare const CMsgClientToGCStartWatchingOverwatch: {
    fromJSON(object: any): CMsgClientToGCStartWatchingOverwatch;
    toJSON(message: CMsgClientToGCStartWatchingOverwatch): unknown;
    create<I extends {
        overwatch_replay_id?: string;
        target_player_slot?: number;
    } & {
        overwatch_replay_id?: string;
        target_player_slot?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCStartWatchingOverwatch>]: never; }>(base?: I): CMsgClientToGCStartWatchingOverwatch;
    fromPartial<I_1 extends {
        overwatch_replay_id?: string;
        target_player_slot?: number;
    } & {
        overwatch_replay_id?: string;
        target_player_slot?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCStartWatchingOverwatch>]: never; }>(object: I_1): CMsgClientToGCStartWatchingOverwatch;
};
export declare const CMsgClientToGCStopWatchingOverwatch: {
    fromJSON(object: any): CMsgClientToGCStopWatchingOverwatch;
    toJSON(message: CMsgClientToGCStopWatchingOverwatch): unknown;
    create<I extends {
        overwatch_replay_id?: string;
        target_player_slot?: number;
    } & {
        overwatch_replay_id?: string;
        target_player_slot?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCStopWatchingOverwatch>]: never; }>(base?: I): CMsgClientToGCStopWatchingOverwatch;
    fromPartial<I_1 extends {
        overwatch_replay_id?: string;
        target_player_slot?: number;
    } & {
        overwatch_replay_id?: string;
        target_player_slot?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCStopWatchingOverwatch>]: never; }>(object: I_1): CMsgClientToGCStopWatchingOverwatch;
};
export declare const CMsgClientToGCOverwatchReplayError: {
    fromJSON(object: any): CMsgClientToGCOverwatchReplayError;
    toJSON(message: CMsgClientToGCOverwatchReplayError): unknown;
    create<I extends {
        overwatch_replay_id?: string;
    } & {
        overwatch_replay_id?: string;
    } & { [K in Exclude<keyof I, "overwatch_replay_id">]: never; }>(base?: I): CMsgClientToGCOverwatchReplayError;
    fromPartial<I_1 extends {
        overwatch_replay_id?: string;
    } & {
        overwatch_replay_id?: string;
    } & { [K_1 in Exclude<keyof I_1, "overwatch_replay_id">]: never; }>(object: I_1): CMsgClientToGCOverwatchReplayError;
};
export declare const CMsgClientToGCGetDPCFavorites: {
    fromJSON(_: any): CMsgClientToGCGetDPCFavorites;
    toJSON(_: CMsgClientToGCGetDPCFavorites): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCGetDPCFavorites;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCGetDPCFavorites;
};
export declare const CMsgClientToGCGetDPCFavoritesResponse: {
    fromJSON(object: any): CMsgClientToGCGetDPCFavoritesResponse;
    toJSON(message: CMsgClientToGCGetDPCFavoritesResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCGetDPCFavoritesResponse_EResponse;
        favorites?: {
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        }[];
    } & {
        result?: CMsgClientToGCGetDPCFavoritesResponse_EResponse;
        favorites?: {
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        }[] & ({
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        } & {
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        } & { [K in Exclude<keyof I["favorites"][number], keyof CMsgClientToGCGetDPCFavoritesResponse_Favorite>]: never; })[] & { [K_1 in Exclude<keyof I["favorites"], keyof {
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof CMsgClientToGCGetDPCFavoritesResponse>]: never; }>(base?: I): CMsgClientToGCGetDPCFavoritesResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCGetDPCFavoritesResponse_EResponse;
        favorites?: {
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        }[];
    } & {
        result?: CMsgClientToGCGetDPCFavoritesResponse_EResponse;
        favorites?: {
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        }[] & ({
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        } & {
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        } & { [K_3 in Exclude<keyof I_1["favorites"][number], keyof CMsgClientToGCGetDPCFavoritesResponse_Favorite>]: never; })[] & { [K_4 in Exclude<keyof I_1["favorites"], keyof {
            favorite_type?: EDPCFavoriteType;
            favorite_id?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof CMsgClientToGCGetDPCFavoritesResponse>]: never; }>(object: I_1): CMsgClientToGCGetDPCFavoritesResponse;
};
export declare const CMsgClientToGCGetDPCFavoritesResponse_Favorite: {
    fromJSON(object: any): CMsgClientToGCGetDPCFavoritesResponse_Favorite;
    toJSON(message: CMsgClientToGCGetDPCFavoritesResponse_Favorite): unknown;
    create<I extends {
        favorite_type?: EDPCFavoriteType;
        favorite_id?: number;
    } & {
        favorite_type?: EDPCFavoriteType;
        favorite_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCGetDPCFavoritesResponse_Favorite>]: never; }>(base?: I): CMsgClientToGCGetDPCFavoritesResponse_Favorite;
    fromPartial<I_1 extends {
        favorite_type?: EDPCFavoriteType;
        favorite_id?: number;
    } & {
        favorite_type?: EDPCFavoriteType;
        favorite_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCGetDPCFavoritesResponse_Favorite>]: never; }>(object: I_1): CMsgClientToGCGetDPCFavoritesResponse_Favorite;
};
export declare const CMsgClientToGCSetDPCFavoriteState: {
    fromJSON(object: any): CMsgClientToGCSetDPCFavoriteState;
    toJSON(message: CMsgClientToGCSetDPCFavoriteState): unknown;
    create<I extends {
        favorite_type?: EDPCFavoriteType;
        favorite_id?: number;
        enabled?: boolean;
    } & {
        favorite_type?: EDPCFavoriteType;
        favorite_id?: number;
        enabled?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSetDPCFavoriteState>]: never; }>(base?: I): CMsgClientToGCSetDPCFavoriteState;
    fromPartial<I_1 extends {
        favorite_type?: EDPCFavoriteType;
        favorite_id?: number;
        enabled?: boolean;
    } & {
        favorite_type?: EDPCFavoriteType;
        favorite_id?: number;
        enabled?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSetDPCFavoriteState>]: never; }>(object: I_1): CMsgClientToGCSetDPCFavoriteState;
};
export declare const CMsgClientToGCSetDPCFavoriteStateResponse: {
    fromJSON(object: any): CMsgClientToGCSetDPCFavoriteStateResponse;
    toJSON(message: CMsgClientToGCSetDPCFavoriteStateResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCSetDPCFavoriteStateResponse_EResponse;
    } & {
        result?: CMsgClientToGCSetDPCFavoriteStateResponse_EResponse;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCSetDPCFavoriteStateResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCSetDPCFavoriteStateResponse_EResponse;
    } & {
        result?: CMsgClientToGCSetDPCFavoriteStateResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCSetDPCFavoriteStateResponse;
};
export declare const CMsgClientToGCSetEventActiveSeasonID: {
    fromJSON(object: any): CMsgClientToGCSetEventActiveSeasonID;
    toJSON(message: CMsgClientToGCSetEventActiveSeasonID): unknown;
    create<I extends {
        event_id?: number;
        active_season_id?: number;
    } & {
        event_id?: number;
        active_season_id?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSetEventActiveSeasonID>]: never; }>(base?: I): CMsgClientToGCSetEventActiveSeasonID;
    fromPartial<I_1 extends {
        event_id?: number;
        active_season_id?: number;
    } & {
        event_id?: number;
        active_season_id?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSetEventActiveSeasonID>]: never; }>(object: I_1): CMsgClientToGCSetEventActiveSeasonID;
};
export declare const CMsgClientToGCSetEventActiveSeasonIDResponse: {
    fromJSON(object: any): CMsgClientToGCSetEventActiveSeasonIDResponse;
    toJSON(message: CMsgClientToGCSetEventActiveSeasonIDResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse;
    } & {
        result?: CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCSetEventActiveSeasonIDResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse;
    } & {
        result?: CMsgClientToGCSetEventActiveSeasonIDResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCSetEventActiveSeasonIDResponse;
};
export declare const CMsgClientToGCPurchaseLabyrinthBlessings: {
    fromJSON(object: any): CMsgClientToGCPurchaseLabyrinthBlessings;
    toJSON(message: CMsgClientToGCPurchaseLabyrinthBlessings): unknown;
    create<I extends {
        event_id?: EEvent;
        blessing_ids?: number[];
        debug?: boolean;
        debug_remove?: boolean;
    } & {
        event_id?: EEvent;
        blessing_ids?: number[] & number[] & { [K in Exclude<keyof I["blessing_ids"], keyof number[]>]: never; };
        debug?: boolean;
        debug_remove?: boolean;
    } & { [K_1 in Exclude<keyof I, keyof CMsgClientToGCPurchaseLabyrinthBlessings>]: never; }>(base?: I): CMsgClientToGCPurchaseLabyrinthBlessings;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        blessing_ids?: number[];
        debug?: boolean;
        debug_remove?: boolean;
    } & {
        event_id?: EEvent;
        blessing_ids?: number[] & number[] & { [K_2 in Exclude<keyof I_1["blessing_ids"], keyof number[]>]: never; };
        debug?: boolean;
        debug_remove?: boolean;
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgClientToGCPurchaseLabyrinthBlessings>]: never; }>(object: I_1): CMsgClientToGCPurchaseLabyrinthBlessings;
};
export declare const CMsgClientToGCPurchaseLabyrinthBlessingsResponse: {
    fromJSON(object: any): CMsgClientToGCPurchaseLabyrinthBlessingsResponse;
    toJSON(message: CMsgClientToGCPurchaseLabyrinthBlessingsResponse): unknown;
    create<I extends {
        result?: CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse;
    } & {
        result?: CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse;
    } & { [K in Exclude<keyof I, "result">]: never; }>(base?: I): CMsgClientToGCPurchaseLabyrinthBlessingsResponse;
    fromPartial<I_1 extends {
        result?: CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse;
    } & {
        result?: CMsgClientToGCPurchaseLabyrinthBlessingsResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): CMsgClientToGCPurchaseLabyrinthBlessingsResponse;
};
export declare const CMsgClientToGCGetStickerbookRequest: {
    fromJSON(object: any): CMsgClientToGCGetStickerbookRequest;
    toJSON(message: CMsgClientToGCGetStickerbookRequest): unknown;
    create<I extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K in Exclude<keyof I, "account_id">]: never; }>(base?: I): CMsgClientToGCGetStickerbookRequest;
    fromPartial<I_1 extends {
        account_id?: number;
    } & {
        account_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "account_id">]: never; }>(object: I_1): CMsgClientToGCGetStickerbookRequest;
};
export declare const CMsgClientToGCGetStickerbookResponse: {
    fromJSON(object: any): CMsgClientToGCGetStickerbookResponse;
    toJSON(message: CMsgClientToGCGetStickerbookResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCGetStickerbookResponse_EResponse;
        stickerbook?: {
            pages?: {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            }[];
            team_page_order_sequence?: {
                page_numbers?: number[];
            };
            favorite_page_num?: number;
        };
    } & {
        response?: CMsgClientToGCGetStickerbookResponse_EResponse;
        stickerbook?: {
            pages?: {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            }[];
            team_page_order_sequence?: {
                page_numbers?: number[];
            };
            favorite_page_num?: number;
        } & {
            pages?: {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            }[] & ({
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            } & {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[] & ({
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                } & {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                } & { [K in Exclude<keyof I["stickerbook"]["pages"][number]["stickers"][number], keyof CMsgStickerbookSticker>]: never; })[] & { [K_1 in Exclude<keyof I["stickerbook"]["pages"][number]["stickers"], keyof {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[]>]: never; };
                page_type?: EStickerbookPageType;
            } & { [K_2 in Exclude<keyof I["stickerbook"]["pages"][number], keyof CMsgStickerbookPage>]: never; })[] & { [K_3 in Exclude<keyof I["stickerbook"]["pages"], keyof {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            }[]>]: never; };
            team_page_order_sequence?: {
                page_numbers?: number[];
            } & {
                page_numbers?: number[] & number[] & { [K_4 in Exclude<keyof I["stickerbook"]["team_page_order_sequence"]["page_numbers"], keyof number[]>]: never; };
            } & { [K_5 in Exclude<keyof I["stickerbook"]["team_page_order_sequence"], "page_numbers">]: never; };
            favorite_page_num?: number;
        } & { [K_6 in Exclude<keyof I["stickerbook"], keyof CMsgStickerbook>]: never; };
    } & { [K_7 in Exclude<keyof I, keyof CMsgClientToGCGetStickerbookResponse>]: never; }>(base?: I): CMsgClientToGCGetStickerbookResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCGetStickerbookResponse_EResponse;
        stickerbook?: {
            pages?: {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            }[];
            team_page_order_sequence?: {
                page_numbers?: number[];
            };
            favorite_page_num?: number;
        };
    } & {
        response?: CMsgClientToGCGetStickerbookResponse_EResponse;
        stickerbook?: {
            pages?: {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            }[];
            team_page_order_sequence?: {
                page_numbers?: number[];
            };
            favorite_page_num?: number;
        } & {
            pages?: {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            }[] & ({
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            } & {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[] & ({
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                } & {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                } & { [K_8 in Exclude<keyof I_1["stickerbook"]["pages"][number]["stickers"][number], keyof CMsgStickerbookSticker>]: never; })[] & { [K_9 in Exclude<keyof I_1["stickerbook"]["pages"][number]["stickers"], keyof {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[]>]: never; };
                page_type?: EStickerbookPageType;
            } & { [K_10 in Exclude<keyof I_1["stickerbook"]["pages"][number], keyof CMsgStickerbookPage>]: never; })[] & { [K_11 in Exclude<keyof I_1["stickerbook"]["pages"], keyof {
                page_num?: number;
                event_id?: EEvent;
                team_id?: number;
                stickers?: {
                    item_def_id?: number;
                    sticker_num?: number;
                    quality?: number;
                    position_x?: number;
                    position_y?: number;
                    position_z?: number;
                    rotation?: number;
                    scale?: number;
                    source_item_id?: string;
                    depth_bias?: number;
                }[];
                page_type?: EStickerbookPageType;
            }[]>]: never; };
            team_page_order_sequence?: {
                page_numbers?: number[];
            } & {
                page_numbers?: number[] & number[] & { [K_12 in Exclude<keyof I_1["stickerbook"]["team_page_order_sequence"]["page_numbers"], keyof number[]>]: never; };
            } & { [K_13 in Exclude<keyof I_1["stickerbook"]["team_page_order_sequence"], "page_numbers">]: never; };
            favorite_page_num?: number;
        } & { [K_14 in Exclude<keyof I_1["stickerbook"], keyof CMsgStickerbook>]: never; };
    } & { [K_15 in Exclude<keyof I_1, keyof CMsgClientToGCGetStickerbookResponse>]: never; }>(object: I_1): CMsgClientToGCGetStickerbookResponse;
};
export declare const CMsgClientToGCCreateStickerbookPageRequest: {
    fromJSON(object: any): CMsgClientToGCCreateStickerbookPageRequest;
    toJSON(message: CMsgClientToGCCreateStickerbookPageRequest): unknown;
    create<I extends {
        team_id?: number;
        event_id?: EEvent;
        page_type?: EStickerbookPageType;
    } & {
        team_id?: number;
        event_id?: EEvent;
        page_type?: EStickerbookPageType;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCreateStickerbookPageRequest>]: never; }>(base?: I): CMsgClientToGCCreateStickerbookPageRequest;
    fromPartial<I_1 extends {
        team_id?: number;
        event_id?: EEvent;
        page_type?: EStickerbookPageType;
    } & {
        team_id?: number;
        event_id?: EEvent;
        page_type?: EStickerbookPageType;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCreateStickerbookPageRequest>]: never; }>(object: I_1): CMsgClientToGCCreateStickerbookPageRequest;
};
export declare const CMsgClientToGCCreateStickerbookPageResponse: {
    fromJSON(object: any): CMsgClientToGCCreateStickerbookPageResponse;
    toJSON(message: CMsgClientToGCCreateStickerbookPageResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCCreateStickerbookPageResponse_EResponse;
        page_number?: number;
    } & {
        response?: CMsgClientToGCCreateStickerbookPageResponse_EResponse;
        page_number?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCCreateStickerbookPageResponse>]: never; }>(base?: I): CMsgClientToGCCreateStickerbookPageResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCCreateStickerbookPageResponse_EResponse;
        page_number?: number;
    } & {
        response?: CMsgClientToGCCreateStickerbookPageResponse_EResponse;
        page_number?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCCreateStickerbookPageResponse>]: never; }>(object: I_1): CMsgClientToGCCreateStickerbookPageResponse;
};
export declare const CMsgClientToGCDeleteStickerbookPageRequest: {
    fromJSON(object: any): CMsgClientToGCDeleteStickerbookPageRequest;
    toJSON(message: CMsgClientToGCDeleteStickerbookPageRequest): unknown;
    create<I extends {
        page_num?: number;
        sticker_count?: number;
        sticker_max?: number;
    } & {
        page_num?: number;
        sticker_count?: number;
        sticker_max?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCDeleteStickerbookPageRequest>]: never; }>(base?: I): CMsgClientToGCDeleteStickerbookPageRequest;
    fromPartial<I_1 extends {
        page_num?: number;
        sticker_count?: number;
        sticker_max?: number;
    } & {
        page_num?: number;
        sticker_count?: number;
        sticker_max?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCDeleteStickerbookPageRequest>]: never; }>(object: I_1): CMsgClientToGCDeleteStickerbookPageRequest;
};
export declare const CMsgClientToGCDeleteStickerbookPageResponse: {
    fromJSON(object: any): CMsgClientToGCDeleteStickerbookPageResponse;
    toJSON(message: CMsgClientToGCDeleteStickerbookPageResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCDeleteStickerbookPageResponse_EResponse;
    } & {
        response?: CMsgClientToGCDeleteStickerbookPageResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgClientToGCDeleteStickerbookPageResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCDeleteStickerbookPageResponse_EResponse;
    } & {
        response?: CMsgClientToGCDeleteStickerbookPageResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgClientToGCDeleteStickerbookPageResponse;
};
export declare const CMsgClientToGCPlaceStickersRequest: {
    fromJSON(object: any): CMsgClientToGCPlaceStickersRequest;
    toJSON(message: CMsgClientToGCPlaceStickersRequest): unknown;
    create<I extends {
        sticker_items?: {
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            };
        }[];
    } & {
        sticker_items?: {
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            };
        }[] & ({
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            };
        } & {
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            } & {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            } & { [K in Exclude<keyof I["sticker_items"][number]["sticker"], keyof CMsgStickerbookSticker>]: never; };
        } & { [K_1 in Exclude<keyof I["sticker_items"][number], keyof CMsgClientToGCPlaceStickersRequest_StickerItem>]: never; })[] & { [K_2 in Exclude<keyof I["sticker_items"], keyof {
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            };
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, "sticker_items">]: never; }>(base?: I): CMsgClientToGCPlaceStickersRequest;
    fromPartial<I_1 extends {
        sticker_items?: {
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            };
        }[];
    } & {
        sticker_items?: {
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            };
        }[] & ({
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            };
        } & {
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            } & {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            } & { [K_4 in Exclude<keyof I_1["sticker_items"][number]["sticker"], keyof CMsgStickerbookSticker>]: never; };
        } & { [K_5 in Exclude<keyof I_1["sticker_items"][number], keyof CMsgClientToGCPlaceStickersRequest_StickerItem>]: never; })[] & { [K_6 in Exclude<keyof I_1["sticker_items"], keyof {
            page_num?: number;
            sticker?: {
                item_def_id?: number;
                sticker_num?: number;
                quality?: number;
                position_x?: number;
                position_y?: number;
                position_z?: number;
                rotation?: number;
                scale?: number;
                source_item_id?: string;
                depth_bias?: number;
            };
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "sticker_items">]: never; }>(object: I_1): CMsgClientToGCPlaceStickersRequest;
};
export declare const CMsgClientToGCPlaceStickersRequest_StickerItem: {
    fromJSON(object: any): CMsgClientToGCPlaceStickersRequest_StickerItem;
    toJSON(message: CMsgClientToGCPlaceStickersRequest_StickerItem): unknown;
    create<I extends {
        page_num?: number;
        sticker?: {
            item_def_id?: number;
            sticker_num?: number;
            quality?: number;
            position_x?: number;
            position_y?: number;
            position_z?: number;
            rotation?: number;
            scale?: number;
            source_item_id?: string;
            depth_bias?: number;
        };
    } & {
        page_num?: number;
        sticker?: {
            item_def_id?: number;
            sticker_num?: number;
            quality?: number;
            position_x?: number;
            position_y?: number;
            position_z?: number;
            rotation?: number;
            scale?: number;
            source_item_id?: string;
            depth_bias?: number;
        } & {
            item_def_id?: number;
            sticker_num?: number;
            quality?: number;
            position_x?: number;
            position_y?: number;
            position_z?: number;
            rotation?: number;
            scale?: number;
            source_item_id?: string;
            depth_bias?: number;
        } & { [K in Exclude<keyof I["sticker"], keyof CMsgStickerbookSticker>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof CMsgClientToGCPlaceStickersRequest_StickerItem>]: never; }>(base?: I): CMsgClientToGCPlaceStickersRequest_StickerItem;
    fromPartial<I_1 extends {
        page_num?: number;
        sticker?: {
            item_def_id?: number;
            sticker_num?: number;
            quality?: number;
            position_x?: number;
            position_y?: number;
            position_z?: number;
            rotation?: number;
            scale?: number;
            source_item_id?: string;
            depth_bias?: number;
        };
    } & {
        page_num?: number;
        sticker?: {
            item_def_id?: number;
            sticker_num?: number;
            quality?: number;
            position_x?: number;
            position_y?: number;
            position_z?: number;
            rotation?: number;
            scale?: number;
            source_item_id?: string;
            depth_bias?: number;
        } & {
            item_def_id?: number;
            sticker_num?: number;
            quality?: number;
            position_x?: number;
            position_y?: number;
            position_z?: number;
            rotation?: number;
            scale?: number;
            source_item_id?: string;
            depth_bias?: number;
        } & { [K_2 in Exclude<keyof I_1["sticker"], keyof CMsgStickerbookSticker>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof CMsgClientToGCPlaceStickersRequest_StickerItem>]: never; }>(object: I_1): CMsgClientToGCPlaceStickersRequest_StickerItem;
};
export declare const CMsgClientToGCPlaceStickersResponse: {
    fromJSON(object: any): CMsgClientToGCPlaceStickersResponse;
    toJSON(message: CMsgClientToGCPlaceStickersResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCPlaceStickersResponse_EResponse;
    } & {
        response?: CMsgClientToGCPlaceStickersResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgClientToGCPlaceStickersResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCPlaceStickersResponse_EResponse;
    } & {
        response?: CMsgClientToGCPlaceStickersResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgClientToGCPlaceStickersResponse;
};
export declare const CMsgClientToGCPlaceCollectionStickersRequest: {
    fromJSON(object: any): CMsgClientToGCPlaceCollectionStickersRequest;
    toJSON(message: CMsgClientToGCPlaceCollectionStickersRequest): unknown;
    create<I extends {
        slots?: {
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        }[];
    } & {
        slots?: {
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        }[] & ({
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        } & {
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        } & { [K in Exclude<keyof I["slots"][number], keyof CMsgClientToGCPlaceCollectionStickersRequest_Slot>]: never; })[] & { [K_1 in Exclude<keyof I["slots"], keyof {
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "slots">]: never; }>(base?: I): CMsgClientToGCPlaceCollectionStickersRequest;
    fromPartial<I_1 extends {
        slots?: {
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        }[];
    } & {
        slots?: {
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        }[] & ({
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        } & {
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        } & { [K_3 in Exclude<keyof I_1["slots"][number], keyof CMsgClientToGCPlaceCollectionStickersRequest_Slot>]: never; })[] & { [K_4 in Exclude<keyof I_1["slots"], keyof {
            page_num?: number;
            slot?: number;
            new_item_id?: string;
            old_item_def_id?: number;
            old_quality?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "slots">]: never; }>(object: I_1): CMsgClientToGCPlaceCollectionStickersRequest;
};
export declare const CMsgClientToGCPlaceCollectionStickersRequest_Slot: {
    fromJSON(object: any): CMsgClientToGCPlaceCollectionStickersRequest_Slot;
    toJSON(message: CMsgClientToGCPlaceCollectionStickersRequest_Slot): unknown;
    create<I extends {
        page_num?: number;
        slot?: number;
        new_item_id?: string;
        old_item_def_id?: number;
        old_quality?: number;
    } & {
        page_num?: number;
        slot?: number;
        new_item_id?: string;
        old_item_def_id?: number;
        old_quality?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCPlaceCollectionStickersRequest_Slot>]: never; }>(base?: I): CMsgClientToGCPlaceCollectionStickersRequest_Slot;
    fromPartial<I_1 extends {
        page_num?: number;
        slot?: number;
        new_item_id?: string;
        old_item_def_id?: number;
        old_quality?: number;
    } & {
        page_num?: number;
        slot?: number;
        new_item_id?: string;
        old_item_def_id?: number;
        old_quality?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCPlaceCollectionStickersRequest_Slot>]: never; }>(object: I_1): CMsgClientToGCPlaceCollectionStickersRequest_Slot;
};
export declare const CMsgClientToGCPlaceCollectionStickersResponse: {
    fromJSON(object: any): CMsgClientToGCPlaceCollectionStickersResponse;
    toJSON(message: CMsgClientToGCPlaceCollectionStickersResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCPlaceCollectionStickersResponse_EResponse;
    } & {
        response?: CMsgClientToGCPlaceCollectionStickersResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgClientToGCPlaceCollectionStickersResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCPlaceCollectionStickersResponse_EResponse;
    } & {
        response?: CMsgClientToGCPlaceCollectionStickersResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgClientToGCPlaceCollectionStickersResponse;
};
export declare const CMsgClientToGCOrderStickerbookTeamPageRequest: {
    fromJSON(object: any): CMsgClientToGCOrderStickerbookTeamPageRequest;
    toJSON(message: CMsgClientToGCOrderStickerbookTeamPageRequest): unknown;
    create<I extends {
        page_order_sequence?: {
            page_numbers?: number[];
        };
    } & {
        page_order_sequence?: {
            page_numbers?: number[];
        } & {
            page_numbers?: number[] & number[] & { [K in Exclude<keyof I["page_order_sequence"]["page_numbers"], keyof number[]>]: never; };
        } & { [K_1 in Exclude<keyof I["page_order_sequence"], "page_numbers">]: never; };
    } & { [K_2 in Exclude<keyof I, "page_order_sequence">]: never; }>(base?: I): CMsgClientToGCOrderStickerbookTeamPageRequest;
    fromPartial<I_1 extends {
        page_order_sequence?: {
            page_numbers?: number[];
        };
    } & {
        page_order_sequence?: {
            page_numbers?: number[];
        } & {
            page_numbers?: number[] & number[] & { [K_3 in Exclude<keyof I_1["page_order_sequence"]["page_numbers"], keyof number[]>]: never; };
        } & { [K_4 in Exclude<keyof I_1["page_order_sequence"], "page_numbers">]: never; };
    } & { [K_5 in Exclude<keyof I_1, "page_order_sequence">]: never; }>(object: I_1): CMsgClientToGCOrderStickerbookTeamPageRequest;
};
export declare const CMsgClientToGCOrderStickerbookTeamPageResponse: {
    fromJSON(object: any): CMsgClientToGCOrderStickerbookTeamPageResponse;
    toJSON(message: CMsgClientToGCOrderStickerbookTeamPageResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse;
    } & {
        response?: CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgClientToGCOrderStickerbookTeamPageResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse;
    } & {
        response?: CMsgClientToGCOrderStickerbookTeamPageResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgClientToGCOrderStickerbookTeamPageResponse;
};
export declare const CMsgClientToGCSetHeroSticker: {
    fromJSON(object: any): CMsgClientToGCSetHeroSticker;
    toJSON(message: CMsgClientToGCSetHeroSticker): unknown;
    create<I extends {
        hero_id?: number;
        new_item_id?: string;
        old_item_id?: string;
    } & {
        hero_id?: number;
        new_item_id?: string;
        old_item_id?: string;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSetHeroSticker>]: never; }>(base?: I): CMsgClientToGCSetHeroSticker;
    fromPartial<I_1 extends {
        hero_id?: number;
        new_item_id?: string;
        old_item_id?: string;
    } & {
        hero_id?: number;
        new_item_id?: string;
        old_item_id?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSetHeroSticker>]: never; }>(object: I_1): CMsgClientToGCSetHeroSticker;
};
export declare const CMsgClientToGCSetHeroStickerResponse: {
    fromJSON(object: any): CMsgClientToGCSetHeroStickerResponse;
    toJSON(message: CMsgClientToGCSetHeroStickerResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCSetHeroStickerResponse_EResponse;
    } & {
        response?: CMsgClientToGCSetHeroStickerResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgClientToGCSetHeroStickerResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCSetHeroStickerResponse_EResponse;
    } & {
        response?: CMsgClientToGCSetHeroStickerResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgClientToGCSetHeroStickerResponse;
};
export declare const CMsgClientToGCGetHeroStickers: {
    fromJSON(_: any): CMsgClientToGCGetHeroStickers;
    toJSON(_: CMsgClientToGCGetHeroStickers): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CMsgClientToGCGetHeroStickers;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CMsgClientToGCGetHeroStickers;
};
export declare const CMsgClientToGCGetHeroStickersResponse: {
    fromJSON(object: any): CMsgClientToGCGetHeroStickersResponse;
    toJSON(message: CMsgClientToGCGetHeroStickersResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCGetHeroStickersResponse_EResponse;
        sticker_heroes?: {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[];
        };
    } & {
        response?: CMsgClientToGCGetHeroStickersResponse_EResponse;
        sticker_heroes?: {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[];
        } & {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[] & ({
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            } & {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            } & { [K in Exclude<keyof I["sticker_heroes"]["heroes"][number], keyof import("./dota_gcmessages_common").CMsgStickerHero>]: never; })[] & { [K_1 in Exclude<keyof I["sticker_heroes"]["heroes"], keyof {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[]>]: never; };
        } & { [K_2 in Exclude<keyof I["sticker_heroes"], "heroes">]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CMsgClientToGCGetHeroStickersResponse>]: never; }>(base?: I): CMsgClientToGCGetHeroStickersResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCGetHeroStickersResponse_EResponse;
        sticker_heroes?: {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[];
        };
    } & {
        response?: CMsgClientToGCGetHeroStickersResponse_EResponse;
        sticker_heroes?: {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[];
        } & {
            heroes?: {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[] & ({
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            } & {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            } & { [K_4 in Exclude<keyof I_1["sticker_heroes"]["heroes"][number], keyof import("./dota_gcmessages_common").CMsgStickerHero>]: never; })[] & { [K_5 in Exclude<keyof I_1["sticker_heroes"]["heroes"], keyof {
                hero_id?: number;
                item_def_id?: number;
                quality?: number;
                source_item_id?: string;
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I_1["sticker_heroes"], "heroes">]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CMsgClientToGCGetHeroStickersResponse>]: never; }>(object: I_1): CMsgClientToGCGetHeroStickersResponse;
};
export declare const CMsgClientToGCSetFavoritePage: {
    fromJSON(object: any): CMsgClientToGCSetFavoritePage;
    toJSON(message: CMsgClientToGCSetFavoritePage): unknown;
    create<I extends {
        page_num?: number;
        clear?: boolean;
    } & {
        page_num?: number;
        clear?: boolean;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCSetFavoritePage>]: never; }>(base?: I): CMsgClientToGCSetFavoritePage;
    fromPartial<I_1 extends {
        page_num?: number;
        clear?: boolean;
    } & {
        page_num?: number;
        clear?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCSetFavoritePage>]: never; }>(object: I_1): CMsgClientToGCSetFavoritePage;
};
export declare const CMsgClientToGCSetFavoritePageResponse: {
    fromJSON(object: any): CMsgClientToGCSetFavoritePageResponse;
    toJSON(message: CMsgClientToGCSetFavoritePageResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCSetFavoritePageResponse_EResponse;
    } & {
        response?: CMsgClientToGCSetFavoritePageResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgClientToGCSetFavoritePageResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCSetFavoritePageResponse_EResponse;
    } & {
        response?: CMsgClientToGCSetFavoritePageResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgClientToGCSetFavoritePageResponse;
};
export declare const CMsgClientToGCClaimSwag: {
    fromJSON(object: any): CMsgClientToGCClaimSwag;
    toJSON(message: CMsgClientToGCClaimSwag): unknown;
    create<I extends {
        event_id?: EEvent;
        action_id?: number;
        data?: number;
    } & {
        event_id?: EEvent;
        action_id?: number;
        data?: number;
    } & { [K in Exclude<keyof I, keyof CMsgClientToGCClaimSwag>]: never; }>(base?: I): CMsgClientToGCClaimSwag;
    fromPartial<I_1 extends {
        event_id?: EEvent;
        action_id?: number;
        data?: number;
    } & {
        event_id?: EEvent;
        action_id?: number;
        data?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgClientToGCClaimSwag>]: never; }>(object: I_1): CMsgClientToGCClaimSwag;
};
export declare const CMsgClientToGCClaimSwagResponse: {
    fromJSON(object: any): CMsgClientToGCClaimSwagResponse;
    toJSON(message: CMsgClientToGCClaimSwagResponse): unknown;
    create<I extends {
        response?: CMsgClientToGCClaimSwagResponse_EResponse;
    } & {
        response?: CMsgClientToGCClaimSwagResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgClientToGCClaimSwagResponse;
    fromPartial<I_1 extends {
        response?: CMsgClientToGCClaimSwagResponse_EResponse;
    } & {
        response?: CMsgClientToGCClaimSwagResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgClientToGCClaimSwagResponse;
};
export declare const CMsgClientToGCCollectorsCacheAvailableDataRequest: {
    fromJSON(object: any): CMsgClientToGCCollectorsCacheAvailableDataRequest;
    toJSON(message: CMsgClientToGCCollectorsCacheAvailableDataRequest): unknown;
    create<I extends {
        contest_id?: number;
    } & {
        contest_id?: number;
    } & { [K in Exclude<keyof I, "contest_id">]: never; }>(base?: I): CMsgClientToGCCollectorsCacheAvailableDataRequest;
    fromPartial<I_1 extends {
        contest_id?: number;
    } & {
        contest_id?: number;
    } & { [K_1 in Exclude<keyof I_1, "contest_id">]: never; }>(object: I_1): CMsgClientToGCCollectorsCacheAvailableDataRequest;
};
export declare const CMsgGCToClientCollectorsCacheAvailableDataResponse: {
    fromJSON(object: any): CMsgGCToClientCollectorsCacheAvailableDataResponse;
    toJSON(message: CMsgGCToClientCollectorsCacheAvailableDataResponse): unknown;
    create<I extends {
        votes?: {
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        }[];
    } & {
        votes?: {
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        }[] & ({
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        } & {
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        } & { [K in Exclude<keyof I["votes"][number], keyof CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote>]: never; })[] & { [K_1 in Exclude<keyof I["votes"], keyof {
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "votes">]: never; }>(base?: I): CMsgGCToClientCollectorsCacheAvailableDataResponse;
    fromPartial<I_1 extends {
        votes?: {
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        }[];
    } & {
        votes?: {
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        }[] & ({
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        } & {
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        } & { [K_3 in Exclude<keyof I_1["votes"][number], keyof CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote>]: never; })[] & { [K_4 in Exclude<keyof I_1["votes"], keyof {
            item_def?: number;
            vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "votes">]: never; }>(object: I_1): CMsgGCToClientCollectorsCacheAvailableDataResponse;
};
export declare const CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote: {
    fromJSON(object: any): CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote;
    toJSON(message: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote): unknown;
    create<I extends {
        item_def?: number;
        vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
    } & {
        item_def?: number;
        vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
    } & { [K in Exclude<keyof I, keyof CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote>]: never; }>(base?: I): CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote;
    fromPartial<I_1 extends {
        item_def?: number;
        vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
    } & {
        item_def?: number;
        vote_type?: CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote_EVoteType;
    } & { [K_1 in Exclude<keyof I_1, keyof CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote>]: never; }>(object: I_1): CMsgGCToClientCollectorsCacheAvailableDataResponse_Vote;
};
export declare const CMsgClientToGCUploadMatchClip: {
    fromJSON(object: any): CMsgClientToGCUploadMatchClip;
    toJSON(message: CMsgClientToGCUploadMatchClip): unknown;
    create<I extends {
        match_clip?: {
            match_id?: string;
            player_account_id?: number;
            game_time_seconds?: number;
            duration_seconds?: number;
            player_id?: number;
            hero_id?: number;
            ability_id?: number;
            camera_mode?: number;
            comment?: string;
        };
    } & {
        match_clip?: {
            match_id?: string;
            player_account_id?: number;
            game_time_seconds?: number;
            duration_seconds?: number;
            player_id?: number;
            hero_id?: number;
            ability_id?: number;
            camera_mode?: number;
            comment?: string;
        } & {
            match_id?: string;
            player_account_id?: number;
            game_time_seconds?: number;
            duration_seconds?: number;
            player_id?: number;
            hero_id?: number;
            ability_id?: number;
            camera_mode?: number;
            comment?: string;
        } & { [K in Exclude<keyof I["match_clip"], keyof CMatchClip>]: never; };
    } & { [K_1 in Exclude<keyof I, "match_clip">]: never; }>(base?: I): CMsgClientToGCUploadMatchClip;
    fromPartial<I_1 extends {
        match_clip?: {
            match_id?: string;
            player_account_id?: number;
            game_time_seconds?: number;
            duration_seconds?: number;
            player_id?: number;
            hero_id?: number;
            ability_id?: number;
            camera_mode?: number;
            comment?: string;
        };
    } & {
        match_clip?: {
            match_id?: string;
            player_account_id?: number;
            game_time_seconds?: number;
            duration_seconds?: number;
            player_id?: number;
            hero_id?: number;
            ability_id?: number;
            camera_mode?: number;
            comment?: string;
        } & {
            match_id?: string;
            player_account_id?: number;
            game_time_seconds?: number;
            duration_seconds?: number;
            player_id?: number;
            hero_id?: number;
            ability_id?: number;
            camera_mode?: number;
            comment?: string;
        } & { [K_2 in Exclude<keyof I_1["match_clip"], keyof CMatchClip>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "match_clip">]: never; }>(object: I_1): CMsgClientToGCUploadMatchClip;
};
export declare const CMsgGCToClientUploadMatchClipResponse: {
    fromJSON(object: any): CMsgGCToClientUploadMatchClipResponse;
    toJSON(message: CMsgGCToClientUploadMatchClipResponse): unknown;
    create<I extends {
        response?: CMsgGCToClientUploadMatchClipResponse_EResponse;
    } & {
        response?: CMsgGCToClientUploadMatchClipResponse_EResponse;
    } & { [K in Exclude<keyof I, "response">]: never; }>(base?: I): CMsgGCToClientUploadMatchClipResponse;
    fromPartial<I_1 extends {
        response?: CMsgGCToClientUploadMatchClipResponse_EResponse;
    } & {
        response?: CMsgGCToClientUploadMatchClipResponse_EResponse;
    } & { [K_1 in Exclude<keyof I_1, "response">]: never; }>(object: I_1): CMsgGCToClientUploadMatchClipResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
